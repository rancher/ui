languageName: "简体中文"
languageContribute: "帮助翻译 Rancher"

##############################
# Really generic things used in multiple places (use sparingly)
##############################
generic:
  actions: 操作
  active: Active
  activate: 激活
  add: 添加
  advanced: 高级
  all: 全部
  any: 任何
  application: 应用程序
  as: 以
  back: 返回
  cancel: 取消
  closeModal: 关闭
  cluster: 集群
  collapse: 折叠
  collapseAll: 全部折叠
  comingSoon: 即将推出
  command: 命令
  confirm: 确认
  containers: 容器
  created: 创建时间
  createdDate: "创建时间: {date}"
  custom: 自定义
  customize: 定制
  default: 默认
  description: 描述
  details: 详情
  disable: 禁用
  disabled: 禁用
  displayName: 显示名称
  dockerId: '容器 ID: '
  domainName: 域名
  done: 完成
  download: 下载
  edit: 编辑
  emptyString: ""
  enable: 启用
  enabled: 启用
  entrypoint: 入口
  environment: 环境
  expand: 展开
  expandAll: 全部展开
  experimental: "(实验)"
  from: '来自'
  false: 'False'
  generic: '常规'
  gigabyte: 'GB'
  group: 'Group'
  hardware: 硬件
  healthy: 健康
  help: 帮助
  hostname: 主机名
  hours: 小时
  hpa: HPA
  id: 用户 ID
  image: 镜像
  import: 导入
  internal: 内部
  ipAddress: Pod IP
  istioRule: 流量规则
  key: 键
  limit: 限制
  limits: 限制
  loading: "加载中..."
  loggingOut: "注销..."
  member: 成员
  mbps: Mbps
  mibibyte: 'MiB'
  minutes: 分钟
  milliseconds: '毫秒'
  missing: "*%缺少%*"
  moreActions: 更多操作
  na: 'n/a'
  name: 名称
  namespaces: 命名空间
  namespace: 命名空间
  never: 从不
  no: "否"
  noRating: 无评价
  node: 主机
  none: 无
  completedOf: "{completed} of {total}"
  owner: 所有者
  paste: 粘贴
  pod: pod
  podRestarts: Pod 中容器重启次数
  port: 端口
  ports: 端口
  prefix: 前缀
  project: 项目
  persistentVolume: 持久卷(PV)
  persistentVolumeClaim: PVC
  random: 随机
  remove: 移除
  restarts: Pod 中容器重启次数
  role: 角色
  save: 保存
  saved: 已保存
  saving: 保存中
  scope: 范围
  search: 搜索
  searchOrCustomInput: 搜索或输入自定义值
  searching: '正在搜索...'
  seconds: 秒
  select: 选择
  service: 服务
  services: 服务
  size: 大小
  state: 状态
  tags: 标签
  test: 测试
  testing: 测试
  to: 至
  total: 合计
  true: 'True'
  type: 类型
  unknown: 未知
  unknownUser: 无法获取用户信息
  upload: 上传
  url: URL
  user: 用户
  uuid: UUID
  value: 值
  version: 版本
  yes: "是"
  isRequired: 必须填写
  readOnly: 只读
  readWrite: 读写
  writeOnly: 只写
  full: 完整
  linux: Linux
  windows: Windows
  host: 主机
  istioHostPlaceholder: 选择或输入主机
  cpu: CPU
  memory: 内存
  noData: 没有数据
  authorize: 认证 & 同步代码库
  branch: 分支
  commit: 构建提交
  repository: 代码库
  registry: 镜像库
  imageName: 镜像名称
  loginIn: 登入
  logout: 退出用户 {user}
  pipeline: 项目
  is: 是
  push: 提交到代码库
  noBranch: 该代码库中没有任何分支。
  github: GitHub
  gitlab: GitLab
  bitbucket: Bitbucket
  required: '{key} 为必填项。'
  run: 运行

realmNames:
  all: 全部
  usWest: 美国西部
  usEast: 美国东部
  asia: 亚洲
  euWest: 欧洲西部
  euEast: 欧洲东部

##############################
# Routes
##############################
accountsPage:
  detail:
    header: 用户信息
    table:
      headers:
        permission: 权限
        role: 角色
        clusterName: 集群
        projectName: 项目
        active: 激活
        created: 已授权
        group: 用户组
      global:
        title: 全局角色
        description: 访问管理影响整个安装的事情
        admin: 此用户是管理员并拥有所有权限
        noRoles: 此用户没有全局角色
      cluster:
        title: 集群角色
        description: 授予此用户的单个集群的角色
        noRoles: 此用户没有项目角色
      project:
        title: 项目角色
        description: 授予此用户的单个项目的角色
        noRoles: 此用户没有项目角色
      roles:
        title: 角色
  index:
    header: 用户列表
    localLink: 添加用户
    groupLink: 分配全局角色
    table:
      id: '用户 ID'
      kind: 类型
      username: 本地用户名
      identity: 标识
      noData: 目前还没有用户
      noMatch: 没有用户匹配当前搜索
      noName: 无
  groups:
    header: 用户组
    table:
      groupName: 组名称
      globalRole: 全局角色名称
      noData: 没有定义组。
      noMatch: 没有组匹配当前搜索
      noName: None
  new:
    header: 添加用户
    errors:
      usernameReq: 必须填写用户名。
      usernameInExists: 用户名已存在，请设置新的用户名。
      pwReq: 必须设置密码。
      role: 新用户需要具备角色，从列表中选择角色。
    form:
      username:
        labelText: 用户名
        placeholder: '例如: jsmith'
      password:
        labelText: 密码
      name:
        labelText: 显示名称
        placeholder: '例如: John Smith'
      type:
        labelText: 账号类型
      description:
        labelText: 描述
        placeholder: '例如: 这是 John Smith 的账号'
  editGroup:
    header: 编辑组
  newGroup:
    header: 将全局角色分配给组
    warning: 为组分配全局角色只能与支持组的外部 auth 提供程序一起工作。本地授权不支持组。
    errors:
      group: 需要指定组。
      role: 需要指定角色
    form:
      group:
        labelText: 选择要添加的组
  modal:
    password: 修改密码

appDetailPage:
  header: "App: {appName}"
  endpoints:
    title: 端点
    detail: '此应用的公共接入点'
    endpoint: Endpoint
    protocol: 协议
    noData: 此应用未创建公开接入点
    noMatch: 没有满足当前搜索的公共接入点
  answers:
    title: 应答
    detail: 自定义应用应答
    variable: 键
  notes:
    title: 注释
    detail: '关于如何使用此应用的说明'
  workloads:
    title: 工作负载
    detail: 此应用创建的工作负载
    nodata: 此应用未创建工作负载
  ingress:
    title: Ingress 规则
    detail: 此应用创建的入口规则
    nodata: 此应用未创建入口规则
  services:
    title: 服务
    detail: 此应用创建的服务
    nodata: 此应用未创建服务
  volumes:
    title: 卷
    detail: 此应用创建的持久卷声明(PVC)。
    nodata: 此应用未创建持久卷声明
  configMaps:
    title: 配置映射
    detail: 与此应用关联的配置映射
    nodata: 此应用程序没有配置映射
  secrets:
    title: 密文
    detail: 此应用相关的密文(Secrets)。
    nodata: 此应用未使用密文

alertPage:
  na: 未配置
  items: 项目
  addSelectorLabel: 添加选择器
  create: 创建
  save: 保存
  cluster: 集群
  project: 项目
  alertGroups: 告警组
  newOrEdit:
    showAdvanced: 显示高级选项
    initialWait: 等待时间
    interval: 时间间隔
    initialWaitHelpText: 在触发告警到发送通知需要等待多长时间
    failed: 扫描失败
    run: 扫描完成
    repeatIntervalHelpText: 当告警处于活动状态时，重复发送通知的时间间隔
    whenA: 当
    whenAn: 当
    happens: 发生
    sendA: 发送
    to: 到
    alert: 告警
    is: 是
    lessThan: 少于
    and: 和
    critical: 危险
    addRecipient: 添加接收者
    info: 信息
    normal: 正常
    warning: 警告
    notReady: 未就绪
    unhealthy: 不健康
    cpuUsage: CPU 预留超过
    memUsage: 内存预留超过
    podPlaceholder: 选择 Pod
    notRunning: 未运行
    notScheduled: 未调度
    restarted: 重启
    restartedTimes: 最后重启时间
    minutes: 分钟
    available: 可用
    createOne: 创建一条
    noNotifierHelpText: 没有定义通知规则，去
    workloadTypePlaceholder: 选择工作负载类型
    resourcePlaceholder:  选择资源
    notifierPlaceholder: 选择通知
    nodePlaceholder: 选择主机
    systemServicePlaceholder:  选择系统服务
    nodeRequired: 需要选择主机
    nodeSelectorRequired: 需要主机选择器
    recipient:
      helpText: 默认情况下使用通知程序中设置的值,您可以用另一个值覆盖它。
    expression:
      label: 表达式
      noData: 图表无数据
      error: 获取图表数据失败
      placeholder: 输入表达式
    removeAlert: 删除告警规则
    alertRule: 告警规则
    groupWaitSeconds:
      label: 告警组等待时长
      helpText: 告警触发后发送的等待时长
    groupIntervalSeconds:
      label: 告警组间隔时长
      helpText: 添加触发报警的规则进组后,发送告警的间隔
    repeatIntervalSeconds:
      label: 重复间隔
      helpText: 告警发送后再次发送的间隔
    monitoringDisabled: 表达式类型不可用,点击
    enableMonitoring: 启用监控
    for: 持续
    moreTarget: 更多的规则类型
    inherited:
      label: 组继承
      enabled: 启用 - 从组继承高级选项
  resourceKinds:
    # backend use capitalized name
    Pod: Pod
    Node: Node
    Deployment: Deployment
    DaemonSet: DaemonSet
    StatefulSet: StatefulSet
  targetTypes:
    pod: Pod
    node: Node
    deployment: Deployment
    daemonset: Daemonset
    statefulset: Statefulset
    workload: Workload
    event: Event
    systemService: System Service
    nodeSelector: Node Selector
    workloadSelector: Workload Selector
    metric: Metric
    cisScan: CIS 扫描
    undefined: None
  index:
    addAlertGroup: 添加告警组
    addAlert: 添加告警规则
    noAlerts: 当前没有配置告警规则。
    table:
      noMatch: 没有告警与当前搜索匹配。
      noData: 没有配置告警规则
      noGroup: 未分配告警组
      condition: 条件
      target: 目标
      recipients: 接收者
      displayCondition:
        failure: 失败
        notScheduled: 未调度
        notRunning: 未运行
        available: '{percent}%可用'
        restarted: 在 {interval} 分钟内重启 {times} 次
        notready: 未就绪
        unhealthy: 不健康
        happens: 发生
        notReady: 未就绪
        cpuUsage: 'CPU 使用超过 {percent}%'
        memUsage: '内存使用超过 {percent}%'
        expression: 表达式
  new:
    addHeader: 添加告警组
    editHeader: 编辑告警组
    addRuleHeader: 添加告警规则
    editRuleHeader: 编辑告警规则
  comparison:
    equal: 等于
    not-equal: 不等于
    greater-than: 大于
    less-than: 小于
    greater-or-equal: 大于或等于
    less-or-equal: 小于或等于
    has-value: 不为空

podSecurityPoliciesPage:
  index:
    header: Pod 安全策略
    description: 将策略应用于由具有此角色的用户创建的 Pod。
    table:
      name: 名称
      created: 创建时间
      noData: 未配置 Pod 安全策略
      noMatch: 没有与当前搜索匹配的 Pod 安全策略。
  addPodSecurityPolicy: 添加策略
  editPodSecurityPolicy: 编辑策略
  detail:
    header: 策略
  saveEdit: 编辑
  saveNew: 创建
  new:
    errors:
      nameReq: 名称(必填)
      nameInExists: 名称已存在，请使用新的 Pod 安全策略名称。
    form:
      name:
        labelText: 名称
        placeholder: '例如: 策略'

rolesPage:
  title: 角色
  headers:
    global: 全局
    cluster: 集群
    project: 项目
  index:
    localLink: 添加角色
    warning: "不存在在用户首次登录时可能产生意外后果的默认角色。请将其中一个角色设置为新用户默认值。"
    table:
      builtin: 内置
      created: 创建时间
      enabled: 已启用
      name: 名称
      id: Id
      noData: 目前还没有角色
      noMatch: 没有与当前搜索匹配的角色
      subjectKind: 类型
      template: 模板
      global: 新用户默认角色
      cluster: 新集群默认角色
      project: 新项目默认角色
      showDefaults: 仅显示默认角色
    errors:
      inherited: "角色 {displayName} 被: {roleNames} 继承"
  resources:
    title: 资源授权
    detail: 对 Kubernetes 资源的具体操作进行授权。
  inherit:
    title: 角色继承
    detail: 继承其他角色的所有权限
  addRole: 添加角色
  editRole: 编辑角色
  saveEdit: 编辑
  saveNew: 创建
  new:
    errors:
      nameReq: 名称(必填)
      memberReq: 成员必需设置
      nameInExists: 名称已存在，请使用新的角色名称。
      ruleResourceReq: 资源必须选择
      roleTemplate: 角色模板必须选择
      noSelectedRoles: 请为该用户至少选择一个角色。
      roleAlreadyExists: 用户已经具有"{key}" 角色。
    form:
      name:
        labelText: 名称
        placeholder: '例如: 开发者'
      context:
        labelText: 上下文
        detail: 此角色的适用范围适合在此展示。
      locked:
        labelText: 锁定
        detail: 对已经绑定的用户没有影响
        enabled: '是: 不允许用户再绑定此角色，已绑定的用户不受影响。'
        disabled: "否"
      allow:
        create: 创建
        delete: 删除
        deletecollection: '删除集合'
        get: 获取
        list: 列表
        patch: 修补程序
        update: 更新
        watch: 观察
        labelText: 允许
        resource: 资源
        nonResourceUrl: 非资源 url(仅路径)
        addAction: 添加资源
        apiGroups: API 组
      otherRole:
        labelText: 包含其他角色
        role: 角色
        addAction: 添加角色
      policy:
        policy: 策略
        addAction: 添加策略
      default:
        global: 新用户默认角色
        cluster: 新集群默认角色
        project: 新项目默认角色
        enabled:
          global: "是: 新用户的默认角色"
          cluster: "是: 新集群的默认角色"
          project: "是: 新项目的默认角色"
        disabled: "否"

apiPage:
  header: API & Keys
  actionButton: 添加 Key
  currentEndpoint: 'API 访问地址:'
  detail: "API 密钥与特定用户(例如: {name})绑定，可以创建、删除和操作有权访问的所有集群和项目。"
  table:
    state: 状态
    name: 访问密钥
    description: 描述
    scope: 范围
    created: 创建时间
    expires:
      label: 过期时间
      never: 永不过期
    noData: 没有配置 API 密钥

authPage:
  setting:
    executor:
      label: 最大流水线运行个数
      scale: 数量
    cacerts:
      label: 配置证书，支持从自签名的 Git 服务中拉取代码
      show: 修改证书
      saveActionLabel: 保存证书
    limit:
      label: 为执行程序配置资源预留和限制
      saveActionLabel: 更新预留和限制
  header: 流水线设置
  setup: "1. 配置 {type} 应用"
  authenticated:
    header:
      text: 代码库认证信息
      enterpriseHostName: "地址:"
      clientId:
        text: "客户端 ID:"
      key:
        text: "Key:"
  testAuth:
    header: '3. 测试并启用验证'
    subtext: '通过测试认证来检查配置是否正确: '
    buttonText:
      preVariable: 授权
      post: 授权中
  form:
    headerVariable: '2. 完成配置后，使用您的 {SCM} 账号进行验证。'
    isEnterprise:
      labelText: 使用 https 连接
    enterprise:
      labelText: '使用私有 {type} 企业版部署'
    enterpriseHost:
      labelText: 企业版主机
      placeholder: '例如: example.com'
  gitlab:
    auth: '标准 GitLab: <a href="https://gitlab.com/profile/applications" target="_blank" rel="nofollow noreferrer">点击此处</a>访问并登陆 GitLab，在弹出的新窗口中进行应用设置。'
    enterpriseAuth: "企业版 GitLab: 通过企业版 GitLab 地址访问并登陆 GitLab，然后点击 Settings，再点击 Applications 进行设置。"
    ul:
      li2:
        text: '填写表单内容:'
        ul:
          li1: '<b>应用名称: </b><span class="text-muted">任意名称，例如: My Pipeline。</span>'
          li2: '回调 URL:'
      li3:
        text: '点击 Save application'
    form:
      subtextVariable: '将新创建应用的 Application Id 和 Secret 复制粘贴到对应的输入框中。'
      clientId:
        labelText: Application Id
      clientSecret:
        labelText: Secret
  bitbucketcloud:
    target:
      header: '1. 选择你要使用的 Bitbucket 类型'
      bitbucketserver: '私有 Bitbucket Server'
      bitbucketcloud: '公有 Bitbucket Cloud'
    setup: '2. 配置 Bitbucket Cloud 应用'
    auth: '<a href="https://bitbucket.org/account" target="_blank" rel="nofollow noreferrer">点击此处</a>，在弹出的新窗口中进行应用设置。'
    ul:
      li2:
        text: '点击"OAuth"，然后点击"Add consumer"，并填写表单内容: '
        ul:
          li1: '<b>应用名称:</b> <span class="text-muted">任意名称，例如 My Pipeline</span>'
          li2: '回调 URL:'
          li3: '<b>权限设置: </b> <b>Account Read</b>, <b>Pull Requests Write</b>, <b>Projects Read</b>和<b>Webhooks Read And Write</b>'
      li3:
        text: '点击 "Save" '
    form:
      headerVariable: '3. 完成配置后，使用您的 Bitbucket Cloud 账号进行验证。'
      subtextVariable: '复制并粘贴新创建的 consumer 的 Key 和 Secret'
      clientId:
        labelText: Key
      clientSecret:
        labelText: Secret
  bitbucketserver:
    warning: Bitbucket Server Webhook 需要 SSL 验证，请确保 {appName} 服务器的证书在 Bitbucket Server 中是可信的。点击<a href="https://rancher.com/docs/rancher/v2.x/en/tools/pipelines/configurations/#1-configuring-version-control-providers" target="_blank" rel="nofollow noopener noreferrer">这里</a>获取更多信息。
    copy: 点击复制
    target:
      header: '1. 选择你要使用的 Bitbucket 类型'
      bitbucketserver: '私有 Bitbucket Server'
      bitbucketcloud: '公有 Bitbucket Cloud'
    setup: '2. 配置 Bitbucket Server 应用'
    auth: '访问 Bitbucket Server 并登陆你的账户，点击 Administration，然后点击 Application Links。'
    ul:
      li2:
        text: '创建新的应用链接:'
        ul:
          li1: '<b>Link:</b>'
          li2: '<b>应用名称: </b> <span class="text-muted">任意名称，例如: My Pipeline</span>'
          li3: '<b>勾选 Create incoming link</b>'
          li4: '<b>点击: "Continue"</b>'
          li5: 'Consumer Key:'
          li6: '<b>Consumer Name:</b> <span class="text-muted">任意名称, 例如: pipeline</span>'
          li7: 'Public Key:'
          li8: '<b>点击"Continue"</b>'
    form:
      headerVariable: '3. 完成配置后，使用您的 Bitbucket Server 账号进行验证。'
      hostname:
        labelText: Bitbucket Server 主机
        placeholder: '例如: example.com'
        required: 必须配置私有 Bitbucket Server 主机地址。
      tls:
        labelText: 使用 https 连接
  saml:
    accessEnabled:
      header: 认证
      disable: 禁用访问控制
    header:
      disabled:
        label: "{providerName} 未配置。"
    enabled:
      authenticated:
        header:
          text: 认证
      groupsField: '组: '
      displayName: '显示名称'
      userName: '用户名: '
      userId: '用户 ID: '
    disabled:
      header: "1. 配置 {providerName} 账户。"
      headerDetail: "填写 {providerName} 账户信息。"
      label: "{providerName} 未配置"
      name:
        labelText: 显示名称
        display: "显示名称: "
      username:
        labelText: 用户名
        display: "用户名: "
      uid:
        labelText: UID
        display: "UID: "
      rancherApiHost:
        labelText: "{appName} API 地址"
        display: "{appName} API 地址: "
      groups:
        labelText: 组
        display: "组: "
      testAuth:
        header: '{step}. 测试并启用认证'
        subtext: '测试以确认配置是否正确'
    providerName:
      ping: Ping
      adfs: AD FS
      keycloak: Keycloak
      okta: Okta
      shibboleth: Shibboleth
    authError: '未授权访问'
    popupError: '请禁用弹出窗口拦截器并再次单击"验证"。'
  ping:
    buttonText:
      pre: '启用 Ping 认证 '
      post: '等待返回'
  keycloak:
    buttonText:
      pre: '启用 Keycloak 认证'
      post: '等待返回'
  adfs:
    buttonText:
      pre: '启用 AD FS 认证'
      post: '等待返回'
  okta:
    buttonText:
      pre: '启用 Okta 认证'
      post: '等待返回'


  shibboleth:
    buttonText:
      pre: '启用 Shibboleth 认证'
      post: 等待 IDP 响应
      edit: '测试 Shibboleth 配置'
    providerName:
      shibboleth: Shibboleth
    openLdap:
      header: 2. OpenLDAP 搜索配置
      detail: 在下面添加 OpenLDAP 配置来配置搜索功能。
      help: "<span class='text-italic'>注意: 只有在使用 Shibboleth 授权配置 OpenLDAP 搜索时，才需要本节中的必需字段。</span>"
    advanced:
      hr: 额外的配置参数
  root:
    header: 访问控制
  github:
    auth: '标准 GitHub: <a href="https://github.com/settings/developers" target="_blank" rel="nofollow noreferrer">点击此处</a>访问并登陆 GitHub，在弹出的新窗口中进行应用设置。'
    enterpriseAuth: "企业版 GitHub: 通过企业版 GitHub 地址访问并登陆企业版 GitHub，然后点击 Settings，再点击 Applications 进行设置。"
    ul:
      li2:
        text: '点击 "注册新应用" 并填写表单内容:'
        ul:
          li1: '<b>应用名称: </b><span class="text-muted">任意名称，例如: My Pipeline。</span>'
          li2: '主页 URL: '
          li3: '<b>应用描述: </b><span class="text-muted">应用描述，可选。</span>'
          li4: '授权回调 URL: '
      li3:
        text: '点击 注册应用'
    form:
      subtextVariable: '将新创建应用的 Client ID 和 Client Secret 复制粘贴到对应的输入框中。'
      clientId:
        labelText: 客户端 ID
      clientSecret:
        labelText: 客户端秘钥
    standard: GitHub 标准版
    enterprise: GitHub 企业版
    header:
      disabled:
        label: GitHub 没有配置
    authenticated:
      header:
        text: 认证信息
        enterpriseHostName: "企业版主机地址:"
        clientId:
          text: "客户端 ID: "
          helpText: '要修改设置的 GitHub 应用，请在下方禁用访问控制后重新设置'
      disableAccess:
        header: "危险区域&trade;"
        warning: '<b class="text-danger">警告: </b>禁用访问控制将导致任何能够访问此页面或 API 的用户拥有对 {appName} 的完全控制权限。'
        confirmDisable: "确认关闭吗? 再次点击将关闭访问控制"
        disable: 禁用 Github 访问
    notAuthenticated:
      header: "1. 设置 GitHub 应用"
      ul:
        li1:
          text: '标准 GitHub。<a href="https://github.com/settings/developers" target="_blank">点击此处</a>并在弹出的新窗口中进行应用设置。'
          ul:
            li1: "企业版 GitHub。请登录账号，点击 Settings，然后点击 Applications 进行设置"
        li2:
          text: '点击 "Register new application" 并填写表单内容: '
          ul:
            li1: '<b>应用名称: </b><span class="text-muted">应用名称，例如: My {appName}</span>'
            li2: '应用首页 URL: '
            li3: '<b>应用描述: </b><span class="text-muted">应用描述，可选</span>'
            li4: '授权回调 URL: '
        li3:
          text: '点击 "注册应用程序" '
      form:
        header: '2. 配置 {appName} 以使用 GitHub 进行身份验证'
        subtext: '将新创建的 GitHub 应用 Client ID 和 Secret 复制粘贴到下方的对应输入框中'
        clientId:
          labelText: 客户端 ID
        clientSecret:
          labelText: 客户端秘钥
        ghEnterprise:
          labelText: 使用私有 GitHub 企业版部署
        isGHEnterprise:
          labelText: 使用安全连接
        enterpriseHost:
          labelText: 地址
          placeholder: '例如: github.example.com'
    testAuth:
      header: '3. 测试并启用认证'
      subtext: '测试以确认配置是否正确'
      buttonText:
        pre: 启用 GitHub 认证
        post: 等待 GitHub 返回
      authError: '未获取 Github 访问权限'
      popupError: '请关闭弹出的窗口并点击认证按钮重新认证。'
  googleoauth:
    header:
      disabled:
        label: 'Google 未配置。有关设置身份验证的更详细说明，请访问<a href="https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/google/" target="_blankRancher">文档</a>'
    authenticated:
      header:
        text: 身份验证
        adminEmail:
          text: "管理员邮箱: "
      disableAccess:
        header: "危险警告"
        warning: '<b class="text-danger">Caution: </b>禁用访问控制将为所有能够访问此页面或 API 的人提供对 {appName} 的完全控制。'
        confirmDisable: "确定关闭吗?再次单击将关闭访问控制。"
        disable: 禁用谷歌访问
    notAuthenticated:
      ul:
        li1:
          helpertext: '注意: Rancher URL 必须是正确的 FQDN 格式。'
          ul:
            li1: '登录您的帐户，切换到 "APIs 和服务" 并点击 "凭证"。'
        li2:
          text: '点击 "OAuth 同意屏幕" 并填写以下表单: '
          ul:
            li1: '<b>授权域名: </b> '
            li2: '<b>应用首页: </b> '
            li3: '在谷歌 api 的作用域下，启用 "email"、"profile" 和 "openid"。'
            li4: '授权回调 URL: '
        li3:
          ul:
            li1: '选择 "创建凭据" 下拉框，并选择 "OAuth 客户端 ID"，然后选择 "Web application"。'
            li2: '<b>授权 Javascript 来源: </b> '
            li3: '<b>授权重定向 URLs: </b> '
            li4: '点击 "创建"，然后点击"下载 JSON"按钮。'
            li5: '将下载的 JSON 文件上传到 OAuth 凭据框中。'
        li4:
          ul:
            li1: '<a href="https://cloud.google.com/iam/docs/service-accounts">点击这里</a>了解有关创建和管理服务帐户的信息。'
            li2: '选择您的服务帐户。'
            li3: '选择 JSON 作为键类型并点击"创建".'
      form:
        oauthCredential:
          labelText: OAuth 凭证
          helperText: 复制并粘贴 OAuth 凭证 JSON，该 JSON 可以在您的谷歌 API 开发人员控制台(上面的步骤 3)中找到。
        serviceAccountCredential:
          labelText: 服务帐户凭据
          helperText: 复制并粘贴服务帐户凭证 JSON，可以在谷歌 API 开发人员控制台的服务帐户部分中找到(上面的步骤 4)。
        adminEmail:
          labelText: 管理员邮箱
          helperText: 输入与您的帐户相关联的管理电子邮件。
        hostname:
          labelText: 账户域
          helperText: 输入您的帐户域。
        nestedGroupMembershipEnabled:
          labelText: 嵌套的组成员
    testAuth:
      buttonText:
        pre: 启用 Google 认证
        post: 等待 Google 返回
      authError: '未授权谷歌访问'
      popupError: '请关闭弹出的窗口并点击认证按钮重新认证。'
    warning:
      doc: '有关设置身份验证的更详细说明，请访问<a href="https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/google/" target="_blank">文档</a>'
    stepOne:
      header: '第一步: '
      info: '对于标准谷歌，<a href="https://console.developers.google.com/apis/credentials" target="_blank">点击这里</a>访问谷歌开发者控制台。'
    stepTwo:
      header: '第二步: '
      info: '导航到 "OAuth 同意屏幕" 选项卡并填写表单'
    stepThree:
      header: '第三步: '
      subHeader: '查看<a href="https://rancher.com/docs/rancher/v2.x/en/admin-settings/authentication/google/#creating-service-account-credentials" target="_blank" rel="nofollow noopener noreferrer">操作指南</a>:'
      info: '创建服务帐户凭证'
  azuread:
    header:
      disabled:
        label: 'Azure AD 未配置'
    enabled:
      header: '危险区域&trade;'
      reallyDisable: '确认关闭吗? 再次点击将关闭访问控制'
      promptDisable: 关闭访问控制
      general:
        header: 常规
    configure:
      header: '配置 Azure AD 帐户'
      replyUrl: "在开始设置之前，需要在 Azure AD 为 {appName} 设置一个白名单 URL。请确保 Azure 门户的 Reply URL 部分设置了以下 Reply URL。 请注意，白名单 URL 设置后可能需要 5 分钟生效时间。"
      help: '输入租户 ID、Client ID 和管理用户详细信息，以连接到 Azure AD 验证帐户信息。'
      applicationId:
        label: 应用 ID
        placeholder: UUID 字符串
      applicationSecret:
        label: 应用密文
      serverURL:
        label: Rancher Server Url
      azureADEndpoint:
        label: 'Endpoint(Azure China 地址: https://login.chinacloudapi.cn)'
      azureADGraphEndpoint:
        label: 'Graph Endpoint(Azure China 地址: https://graph.chinacloudapi.cn)'
      azureADTokenEndpoint:
        label: Token Endpoint
      azureADAuthEndpoint:
        label: Auth Endpoint
      endpoints:
        label: Azure AD 访问地址
      regions:
        standard: 标准
        china: China
        custom: 自定义
      tenantId:
        label: 租户 ID
        placeholder: UUID 字符串
        help: 由 Azure AD portal 获取
    test:
      header: '测试并启用认证'
      help: '测试验证以确认配置是否正确: '
      username:
        label: 登录用户名
        placeholder: '例如: jsmith'
      password:
        label: 登录密码
      pre: 启用 Azure 认证
      post: 等待 Azure 返回
      authError: 'Azure 访问未认证授权'
      popupError: '请关闭窗口，然后再次点击认证按钮进行认证'
  localAuth:
    warning: "启用外部身份验证时，{appName} 将外部主体与当前用户的本地身份相关联。关联的主体将继承所有全局权限，以及当前用户的项目和集群角色绑定。"
    header:
      enabled: '本地验证已启用'
      disabled: '本地验证未配置'
    subtext:
      enabled:
        text: '{appName} 已设置本地账户访问'
        alwaysOn: '本地身份验证将始终启用，您可以在本地认证基础之上添加其他认证方案'
        linkText: 管理账号
      disabled: '{appName} 能够被设置为仅允许 {appName} 本地数据库中配置的用户访问。当前系统未进行设置，因此任何可以访问此页面(或 API)的用户都具有系统的完全控制权限。'
    accessEnabled:
      header: '危险区域&trade;'
      warning: '<b class="text-danger">警告: </b>禁用访问控制将导致所有能够访问此页面或 API 的用户拥有对 {appName} 的完全控制权限。'
      buttonText:
        disable: '确认关闭吗? 再次点击将关闭访问控制。'
        prompt: 关闭访问控制
    accessDisabled:
      header: '1. 设置管理员用户'
      helpText: '该账户将成为管理员并拥有对 {appName} 的完全控制权限。'
      form:
        login:
          labelText: 登录用户名
          placeholder: '例如: jsmith'
        name:
          labelText: 全名
          placeholder: '例如: John Smith'
        password:
          labelText: 密码
        confirmPassword:
          labelText: 确认密码
    accessControl:
      header: '2. 启用访问控制'
      helpText: '点击以开启访问控制并登录'
      buttonText:
        pre: 启用本地认证
        post: '启用中...'

backupsPage:
  header: Etcd 备份
  detail: 如果启用 etcd 备份功能，将按预先配置的时间间隔周期获取集群快照，可用于集群灾难恢复。
  table:
    state: 状态
    target:
      label: 目标存储
      s3: S3
      local: Local
    name: 备份名称
    created: 创建时间
    noData: 当前没有 Etcd 快照

balancerPage:
  noMatch: 没有符合当前搜索的负载均衡
  noData: 没有负载均衡
  table:
    target: 目标

catalogPage:
  istio:
    header: 流量规则商店
  index:
    header: 应用列表
    refreshBtn: 刷新
    allCatalogs: 全部应用商店
    allCategories: 所有分类
    windowsWarning: 大多数应用程序应该在 Linux 集群中运行。因此，如果将它们部署在当前集群中，则可能无法工作。
    manage: 管理
    search:
      label: 搜索
    filters:
      label: 应用过滤
    certified:
      rancher:
        rancher: Rancher Labs
        partner: 官方
        experimental: "实验性"
      pl:
        rancher: 核心
        partner: 官方
        experimental: "实验性"
    noData:
      singular: 没有符合的应用模板
      plural: 当前目录下没有符合的应用模板
    action:
      launch: 查看详情
      notCompatible: 不兼容
      alreadyDeployed: 已经部署

cis:
  scan:
    report:
      headers:
        profile: "配置文件: {profile}"
        id: id
        description: 描述
        remediation: 修复
        state: 状态
        node_type: 节点类型
        nodes: nodes
        passed_nodes: 节点密码
        failed_nodes: 失败的节点

    modal:
      chooseAProfile: 选择配置文件
      title: 运行 CIS 扫描
      testsWontRun: 被选择的配置文件，将不会运行测试
      notApplicableTests: 不适用的测试 ({count})
      userSkippedTestsWontRun: 此外，已将以下测试配置为作为扫描的一部分跳过
      skippedTests: 跳过测试 ({count})
      profileDocs: 要了解更多关于配置文件的信息，请访问我们的<a href="https://rancher.com/docs/" target="_blank" rel="nofollow noopener noreferrer">文档</a>。
      testDocs: 要了解为什么这些测试不能运行，请访问我们的<a href="https://rancher.com/docs/" target="_blank" rel="nofollow noopener noreferrer">文档 </a>。
      tableHeaders:
        id: Test Id
        explanation: Explanation
    growl:
      success: 在'{clusterName}' 上运行 CIS 扫描
    header: CIS 扫描
    rkeOnly: CIS 扫描只适用于 RKE 集群
    actions:
      delete: 删除
      download: 下载
      runScan: 运行扫描
      addAlert: 添加告警
      addSchedule: 添加调度
      search:
          placeholder: 搜索
    table:
      state: 状态
      name: 名称
      profile: 配置文件
      passed: 通过
      skipped: 跳过
      failed: 失败
      notApplicable: 不适用
      date: 日期
      empty: 当前没有扫描
    detail:
      error:
        parseConfig: 解析 security-scan-cfg 配置映射时出错。
        createDefault: 创建默认的 security-scan-cfg 配置映射失败。
      actions:
        delete: 删除
        download: 下载
        runScan: 运行扫描
        search:
          placeholder: 搜索
      table:
        state: 状态
        number: 序号
        description: 描述
        empty: 当前没有测试
        skip: 跳过
        unskip: Unskip
        nodesTable:
          title: 节点
          row:
            remediation: "Remediation: {remediation}"

cloudCredentialsPage:
  header: 云凭证
  rightButtons:
    addKey: 添加云凭证
    nodeTemplates: 管理主机模板
  index:
    table:
      noData: 当前没有云凭证
      noMatch: 没有云凭证匹配当前搜索
  numberNodeTemplates: "# 节点模板"

clusterCatalogPage:
  header: 应用商店

clusterIstioPage:
  header: Istio
  enabled: "Istio 已启用。为了利用 Istio，您需要为每个命名空间启用 Istio sidecar 自动注入。如果在现有命名空间上启用它，则需要重新部署现有工作负载，以利用 sidecar 自动注入。"
  disabled: "Istio 尚未启用，请单击 启用 按钮启用。"
  notReady: 在当前集群中安装 Istio…
  confirmDisable: "你确定吗?再次单击将禁用 Istio"
  monitoringNotDeployed: "监控仍在部署中。 在确保集群中有足够的资源启用 Istio 之前，请等待监控部署完成。"
  disable: 禁用
  enableActionLabel: 启用
  version: Istio 版本
  customAnswers:
    title: 自定义应答
    detail: 配置自定义的应答。
  links:
    kiali:
      label: Kiali UI
    jaeger:
      label: Jaeger UI
    grafana:
      label: Grafana UI
    prometheus:
      label: Prometheus UI
  config:
    header:
      grafana: Grafana
      gateway: Ingress 网关
      pilot: Pilot
      prometheus: Prometheus
      mixer: Mixer
      tracing: 跟踪
    tracingEnabled:
      label: 启用跟踪
    grafanaEnabled:
      label: 启用 Grafana
    grafanaPersistenceEnabled:
      label: 为 Grafana 启用持久存储
    mtlsEnabled:
      label: 服务到服务双向 TLS
    gatewayEnabled:
      label: 启用 Ingress 网关
    gatewayType:
      label: Ingress 网关的服务类型
    http2Port:
      label: Http2 端口
    httpsPort:
      label: Https 端口
    loadBalancerIP:
      label: Load Balancer IP
      placeholder: '例如: 192.0.0.1'
    prometheusRetention:
      label: Prometheus 数据保留
      placeholder: '例如: 6h'
    traceSampling:
      label: 跟踪抽样比例
      placeholder: '例如: 1'
    mixerPolicyEnabled:
      label: Enable Mixer Policy
  nodeSelector:
    addSelectorLabel: 添加选择器
    helpText: 选择要运行 {component} 工作负载的节点
  insufficientSize:
    total:
      cpu: 请确保至少有 {minCpu} milli cpu 可供 {action} Istio 使用。
      memory: 请确保您至少有 {minMemory} MiB 的内存可供 {action} Istio 使用。
      all: 请确保至少有 {minCpu} milli cpu 和 {minMemory} MiB 内存可供 {action} Istio 使用。
    workload:
      cpu: 请确保至少有一个具有 {cpu} milli cpu 的节点可用来部署 {component} 工作负载。
      memory: 请确保您至少有一个具有 {memory} MiB 内存的节点可用来部署 {component} 工作负载。
      all: 请确保至少有一个节点具有 {cpu} milli cpu 和 {memory} MiB 内存，可用来部署 {component} 工作负载。
    selectors:
      cpu: 请确保至少有一个节点将节点选择器与 {cpu} milli cpu 匹配，以启用 {component} 工作负载。
      memory: 请确保至少有一个节点将节点选择器与 {memory} MiB 内存匹配，以启用 {component} 工作负载。
      all: 请确保至少有一个节点与 {cpu} milli cpu 和 {memory} MiB 内存匹配，以启用 {component} 工作负载。
      unsupported: '不支持值为"true"、"false"或 number 的节点选择器'
  telemetryAndPolicy: Telemetry And Policy
  existingClaim:
    label: 'Existing Claim for {component}'
  members:
    title: 成员访问
    detail:  控制哪些用户能访问 Kiali 和 Jaeger UI
  pilot:
    title: Pilot
    detail: 配置流量管理
  mixer:
    title: Mixer
    detail: 常规策略和遥测配置。
  tracing:
    title: 跟踪
    detail: 配置跟踪请求。
  ingress:
    title: Ingress 网关
    detail: 监控和路由规则配置。
  allowSystemGroup:
    'true': 允许<b>所有</b>成员访问 Kiali 和 Jaeger UI。
    'false': 允许集群所有者和指定的</b>成员访问 Kiali 和 Jaeger UI。
  goToMonitoring: 'istio 的工作需要监控。 如果您想修改这些值，请转到<a href="/c/{clusterId}/monitoring/cluster-setting">监控</a>页面修改并保存。'
  upgradeMonitoring: '在启用 Istio 之前，您需要首先将集群监视升级到 0.0.4 或更高版本。访问<a href="/c/{clusterId}/monitoring/cluster-setting">这里</a>去升级集群监控。'
  enableMonitoring:
    label: 启用监控

certificatesPage:
  cn: 域名
  expiresDate: 过期时间
  fingerprint: 指纹
  valid: 生效时间
  expires: 过期时间
  algorithm: 算法
  issuer: 发布机构
  serialNumber: 序列号
  domainNames:
    labelText: 域名
    single: '<a href="https://{cn}" target="_blank" rel="nofollow noreferrer noopener">{cn} <i class="icon icon-sm icon-external-link"/></a>'
    withSan: |
      <a href="https://{cn}" target="_blank" rel="nofollow nefererrer noopener">{cn} <i class="icon icon-sm icon-external-link"></i></a> +
      {sans, plural,
      =1 {1 other}
      other {# others}
      }
    wildcardSingle: '{cn}'
    wildcardWithSan: |
      {cn} +
      {sans, plural,
      =1 {1 other}
      other {# others}
      }
  detail:
    header: '证书: {name}'
  index:
    header: 证书列表
    linkTo: 添加证书
    noData: 没有配置证书
    noMatch: 没有证书与当前搜索匹配
  new:
    header: 添加证书
    form:
      name:
        placeholder: '例如: Mydomain.com'
      description:
        placeholder: '例如: Mydomain.com 的 EV 证书'

membersPage:
  title: 成员
  add:
    title: '添加 {type} 成员'
    form:
      member: 成员
      role: 角色
      kind: 类型
  index:
    localLink: '添加成员'
    table:
      name: 名称
      created: 创建时间
      noData: 目前还没有成员
      noMatch: 没有成员与当前搜索匹配
      userId: 用户
      subjectKind: 类型
      template: 角色

namespacesPage:
  header: 命名空间
  addNamespace: 添加命名空间
  noMatch: 没有符合搜索的命名空间。
  noData: 此集群未创建任何命名空间。
  table:
    name:
      label: 命名空间
    description:
      label: 描述
    project:
      label: 项目
    pods:
      label: Pods
    workloads:
      label: 工作负载
    created:
      label: 创建时间

clusterPage:
  edit: 编辑集群
  annotationsDetail: 为集群配置标签和注释。
  removeMemberNote: '注意: 删除成员不会删除其项目权限。'
  internal: '<b>警告:</b>{appName} 集群用作数据存储，只应授予管理员拥有写入权限.<br>对此集群具有写入权限的用户，可以使用它授予自己安装并管理的其他集群的访问权限。'

projectsListNamespacePage:
  header: 命名空间列表
  notIn: 不属于任何项目
  current: 当前项目

projectsPage:
  annotationsDetail: 为项目配置标签和注释。
  header: '项目/命名空间列表'
  headerNS: 命名空间
  addProject: 添加项目
  editProject: 编辑项目
  noMatch: 没有与当前搜索匹配的项目。
  noData: 此集群没有配置任何项目。
  groups:
    none: 命名空间列表
    namespaces: '项目分组/命名空间分组'
  quota:
    label: 资源配额
  ns:
    label: 命名空间
    placeholder: '例如: lab'
  name:
    label: 项目名称
    placeholder: '例如: lab'
  created:
    label: 创建时间
  psp:
    label: Pod 安全策略
  resourceQuota:
    title: 资源配额
    detail: 配置整个项目可以使用多少资源。
  containerDefaultLimit:
    title: 容器默认限制
    detail: 配置默认情况下容器可以消耗多少资源.
  members:
    title: 成员
    detail: 配置可以访问该项目中资源的用户以及用户权限。
    user: 用户
    group: 用户组
    serviceaccount: 服务账号
    labelText: 成员
    addMember: 添加成员
    addUser: 添加用户
    noAddUser: 您是唯一的活动注册用户.
    addGroup: 添加组
    addServiceAccount: 添加服务帐户
    multipleRoles: 多个角色
    customRoles: 自定义角色
    kind:
      label: 类型
    name:
      label: 名称
    role:
      label: 角色
    errors:
      nameReq: 名称(必填)
      nameInExists: 名称已经存在，请使用新的项目名称。
      memberNameReq: 成员名称必须设置。
      memberRoleReq: 成员角色必须设置。

clusterTemplateRevisionUpgradeNotification:
  tooltip: 修订 {revision} 可用于升级。

clustersPage:
  header: 集群列表
  newCluster: 添加集群
  newTemplate: 添加模板
  newClusterName: "添加集群: {name}"
  editClusterName: "升级集群: {name}"
  clusterLaunchDisabled: "没有授予您访问集群模板的权限。"
  launch:
    new: 添加集群
    import: 导入集群
    register: 注册集群
  cluster:
    label: 集群名称
  templateRevision:
    label: '模板/修订'
  provider:
    label: 供应商
  kubernetesVersion:
    label: Kubernetes 版本
  rkeTemplate:
    label: RKE 模板
  nodes:
    label: 主机数
  cpu:
    label: 处理器
  memory:
    label: 内存
  pod:
    label: Pods
  storage:
    label: Disk
  select:
    provider:
      label: "添加集群——选择集群类型"
    template:
      label: "添加集群-选择集群模板"

clusterRibbonNav:
  title: 最近创建的集群

clusterTemplatesPage:
  index:
    header: RKE 集群模板列表
    newTemplate: 添加模板
  new:
    header: 添加模板
  headers:
    defaultRevisionId: 默认修订
    revisionsCount: 修订版本
    created: 创建时间
  newRevision:
    header: 新集群模板修订
  select:
    label: 从模板修订克隆
  table:
    name: 修订版本名称

ingressPage:
  header: 'Ingress: {name}'
  gkeIngressWarning: 'Kubernetes Engine 可能需要几分钟才能分配外部 IP 地址并准备负载均衡器。与此同时，您可能会收到 HTTP 404 和 HTTP 500 等错误，直到负载平衡器准备好为流量提供服务。'
  table:
    targets:
      label: 目标
    noMatch: 没有 ingresses 匹配当前搜索。
    noData: 没有配置 ingress 规则

containerPage:
  header: '容器: {name}'
  initContainer:
    label: 初始化容器
  envTab:
    header: 环境变量
    detail: '在创建容器时配置到容器内的环境变量。'
  portsTab:
    header: 端口
    detail: '容器中进程监听的端口与主机端口的映射关系。'
    hostPrimaryIp: "({ip})"
  linksTab:
    header: 链接
    detail: '这些属性显示了其他容器和当前容器之间的链接。'
    noData: 当前容器没有链接
  volumesTab:
    header: 数据卷
    detail: '这些属性显示了附加到容器的数据卷。'
    table:
      path: 挂载点
      shared: 共享
      writable: 可写
      noData: 该容器未使用数据卷
      noMatch: 没有符合当前搜索的数据卷
      noContainers: 无其他容器
  pod: Pod
podPage:
  header: 'Pod: {name}'
  nodeIp: Node
  podIp: Pod IP
  containerImage: "{container} 的镜像"
  image: 镜像
  displayImage: '{image} + 其他 {sidecar, plural, =1 {1 个 image} other {#个 images}}'
containersPage:
  table:
    sparkPrefixCpu: "CPU: "
    sparkPrefixMemory: "内存: "
    sparkPrefixNetwork: "网络: "
    sparkPrefixStorage: "存储: "
    noData: 没有容器显示
    noMatch: 没有符合当前搜索的容器
  welcome:
    container: 立即开始
    containerLink: 添加容器
    orchestrator: Install another orchestrator
    kubernetesLink: 安装 Kubernetes

clusterDashboard:
  systemProject: "这是包含所有 Kubernetes 和 {appName} 系统命名空间的系统项目，修改当前项目中的资源配置可能会导致系统无法正常运行。"
  notActive: 当前集群<b>{state}</b>中...
  notReady: 当前集群<b>{state}</b>中...，在 API 准备就绪之前，直接与 API 交互的功能将不可用。
  used: 使用值
  title: 仪表盘
  sections:
    cluster: 集群监控
    etcd: Etcd 监控
    k8s: Kubernetes 组件监控
    rancher: '{appName} 日志功能监控'
    node: 节点监控
  noRancherComponents: '{appName} 日志功能未启用或者没有足够的数据绘制图表。'
  cpu: CPU
  memory: Memory
  pods: Pods
  value: 值
  more: 更多
  clusterNotReady: 集群中的图形信息目前不可用。
  subtitle:
    reserved: "已预留 {total} 中的 {used}"
    used: "已使用 {total} 中的 {used}"
  enableMonitoring: 启用监控并查看实时监控指标
  upgradeAvailable: "升级监控组件到 {version} 版本"
  monitoringNotReady: 监控 API 未就绪
  node: Nodes
  etcd: Etcd
  scheduler: Scheduler
  controllerManager: Controller Manager
  etcdUnavailable: Etcd Not Applicable
  schedulerUnavailable: Scheduler Not Applicable
  controllerManagerUnavailable: Controller Manager Not Applicable
  alert:
    node: "警告: 节点 {node} 未激活"
    component: "警告: 组件 {component} 不健康"
    nodeCondition:
      outOfDisk: "警告: 节点 {node} 磁盘空间不足。"
      diskPressure: "警告: 节点 {node} 有磁盘压力。"
      memoryPressure: "警告: 节点 {node} 有内存压力。"
  liveTitle: "已使用 {total} 中的 {used}"
  reserved: 已预留
  k3sInfo:
    title: k3S 相关信息
    detail: 导入的 K3S 集群节点系统信息。
    nodeArgs:
      title: k3S 节点参数
      detail: 当前节点的 K3S 参数的只读列表。
      noArgs: 没有节点参数


ingressResponse:
  host: 主机
  path: 路径
  responseTime: 响应时间
  noData: 没有数据
  noMatch: 没有记录匹配当前搜索
  detail: Upstream 响应时长（排序前十位）
  title: Ingress Upstream 响应时长

etcd:
  hasLeader:
    label: Etcd 是否有 Leader
  leaderChange:
    label: Leader 变更次数
  failedProposals:
    label: 失败提议次数

monitoringPage:
  update: 更新监控配置
  version: 监控组件版本
  upgrade: 升级监控组件到最新版本 {version}。
  upgradeAvailable: "(最新版本 {version})"
  confirmDisable: "你确定吗？再次点击将会禁用监控。"
  disable: 禁用监控
  enableActionLabel: 启用监控
  systemProject: "如果您想为系统项目中的 Pod 收集自定义指标，请直接启用集群级别监控。"
  noPermission: "您没有权限配置 {level} 级别监控。"
  toUpdate:
    cluster: 集群级别监控已启用。
    project: 项目级别监控已启用。
  insufficientSize:
    prometheus:
      cpu: 请确保你至少有一个节点有 {cpu} milli CPUs 可用来激活 Prometheus 工作负载。
      memory: 请确保你至少有一个节点有 {memory} MiB 内存可用来激活 Prometheus 工作负载。
      all: 请确保你至少有一个节点有 {cpu} milli CPUs 和 {memory} MiB 内存可用来激活 Prometheus 工作负载。
    selectors:
      cpu: 请确保你至少有一个匹配节点选择器的节点有 {cpu} milli CPUs 可用来激活 Prometheus 工作负载。
      memory: 请确保你至少有一个匹配节点选择器的节点有 {memory} MiB 内存可用来激活 Prometheus 工作负载。
      all: 请确保你至少有一个匹配节点选择器的节点有 {cpu} milli CPUs 和 {memory} MiB 内存可用来激活 Prometheus 工作负载。
    total:
      cpu: 请确保你至少有 {cpu} milli CPUs 可用来激活监控。
      memory: 请确保你至少有 {memory} MiB 内存可用来激活监控。
      all: 请确保你至少有 {cpu} milli CPUs 和 {memory} MiB 内存可用来激活监控。
  clusterNotEnabled: 集群级别监控未启用。将只采集自定义指标。
  prometheus: 监控尚未启用，点击下面的保存按钮去启用监控。
  resourceLimitsHelp: '启用集群监视时，需要确保工作节点和 Prometheus pod 具有足够的资源。请访问<a href="https://rancher.com/docs/rancher/v2.x/en/cluster-admin/tools/monitoring/#resource-consumption" target="_blank" rel="nofollow noreferrer">Rancher docs</a>了解建议的资源限制。'
  config:
    types:
      none: 无
      prometheus: Prometheus
    header: Prometheus 配置
    prometheus:
      cpuLimit:
        label: Prometheus CPU 限制
        placeholder: '例如: 1000'
        unit: milli CPUs
      cpuRequest:
        label: Prometheus CPU 预留
        placeholder: '例如: 1000'
        unit: milli CPUs
      memoryLimit:
        label: Prometheus 内存限制
        placeholder: '例如: 1000'
      memoryRequest:
        label: Prometheus 内存预留
        placeholder: '例如: 1000'
      enablePersistence:
        label: 为 Prometheus 启用持久化存储
      size:
        label: Prometheus 持久化存储大小
        placeholder: '例如: 50Gi'
      storageClass:
        label: Prometheus 默认存储类
    grafana:
      enablePersistence:
        label: 为 Grafana 启用持久化存储
      size:
        label: Grafana 持久化存储大小
        placeholder: '例如: 10Gi'
      storageClass:
        label: Grafana 默认存储类
    retention:
      label: 数据保存时间
    storageClass:
      label: 存储类
    operator:
      memoryLimit:
        label: Prometheus Operator 内存限制
        placeholder: '例如: 500'
    nodeexporter:
      label: Node Exporter 主机端口
      enable: 启用 Node Exporter
      cpuLimit:
        label: Node Exporter CPU 限制
        placeholder: '例如: 200'
        unit: milli CPUs
      memoryLimit:
        label: Node Exporter 内存限制
        placeholder: '例如: 200'
  nodeSelector:
    addSelectorLabel: 添加选择器
    helpText: 选择部署监控相关的工作负载所运行的节点。
  cluster:
    title: 集群监控配置
    disabled: 当前集群监控尚未启用。
    toDisable: 监控已启用。点击下面的保存按钮来禁用当前集群的监控。
  project:
    title: 项目监控配置
    disabled: 当前项目监控尚未启用。
    toDisable: 监控已启用。点击下面的保存按钮来禁用当前项目的监控。
  errors:
    disableIstioFirst: '在禁用集群监控之前，需要先禁用 Istio。'

metricsAction:
  description: 实时查看工作负载监控数据。
  noData: 没有足够的数据绘制图表
  sections:
    workload: 工作负载监控
    pod: Pod 监控
    container: Container 监控
  grafana:
    label: Grafana
  summary:
    label: 聚合模式
  detail:
    label: 详情模式
  from:
    label: 起始时间
  to:
    label: 结束时间
  periods:
    custom: 自定义时间段
    5m: 5 分钟
    1h: 1 小时
    6h: 6 小时
    24h: 24 小时
    7d: 7 天
    30d: 30 天

metrics:
  apiserver-request-count: API Server 请求速率
  apiserver-request-latency: API Server 请求延迟
  cluster-cpu-load: 集群负载
  cluster-cpu-usage: CPU 使用率
  cluster-disk-io: 磁盘 I/O
  cluster-fs-usage-percent: 磁盘使用率
  cluster-memory-usage: 内存使用率
  cluster-network-io: 网络 I/O
  cluster-network-packet: 网络数据包
  container-cpu-usage: CPU
  container-disk-io: '磁盘 I/O'
  container-memory-usage-bytes-sum: 内存
  controllermanager-queue-depth: 控制器队列深度
  etcd-db-bytes-sum: 数据库大小
  etcd-disk-operate: 磁盘操作
  etcd-grpc-client: GRPC 客户端流量
  etcd-leader-change: Leader 变更
  etcd-peer-traffic: 传输流量
  etcd-raft-proposals: Raft 提议
  etcd-rpc-rate: RPC 速率
  etcd-stream: 活动流
  etcd-sync-duration: 磁盘同步周期
  fluentd-buffer-queue-length: Fluentd 缓存区队列长度
  fluentd-input-record-number: Fluentd 输入速率
  fluentd-output-errors: Fluentd 输出错误速率
  fluentd-output-record-number: Fluentd 输出速率
  ingresscontroller-nginx-connection: Ingress 控制器连接数
  ingresscontroller-request-process-time: Ingress 控制器请求处理时长
  istio-4xxs-top10: 服务 4xx 错误代码计数
  istio-4xxs: 项目 4xx 错误代码计数
  istio-5xxs-top10: 服务 5xx 错误代码计数
  istio-5xxs: 项目 5xx 错误代码计数
  istio-global-request-volume-top10: Request Volume by Service
  istio-global-request-volume: Project Request Volume
  istio-global-success-rate: 项目成功率
  istio-request-duration-p99-top10: P99 Request Latency by Service
  istio-request-duration-p90-top10: P90 Request Latency by Service
  istio-request-duration-p50-top10: P50 Request Latency by Service
  node-cpu-load: 节点负载
  node-cpu-usage: CPU 使用率
  node-disk-io: 磁盘 I/O
  node-fs-usage-percent: 磁盘使用率
  node-memory-usage: 内存使用率
  node-network-io: 网络 I/O
  node-network-packet: 网络数据包
  pod-cpu-usage: CPU
  pod-disk-io: '磁盘 I/O'
  pod-memory-usage-bytes-sum: 内存
  pod-network-io: 网络 I/O
  pod-network-packet: 网络数据包
  scheduler-e-2-e-scheduling-latency-seconds-quantile: 调度器 e2e 调度延迟
  scheduler-pod-unscheduler: 调度失败的 Pod
  scheduler-total-preemption-attempts: 调度器尝试调度次数
  workload-cpu-usage: CPU
  workload-disk-io: '磁盘 I/O'
  workload-memory-usage-bytes-sum: 内存
  workload-network-io: '网络 I/O'
  workload-network-packet: 网络数据包

dnsPage:
  noMatch: 没有匹配当前搜索的记录。
  noData: 没有可以显示的 DNS 记录。
  type:
    arecord: 外部 IP
    cname: 主机名
    alias: 别名
    workload: 工作负载
    selector: 选择器
    clusterIp: Cluster IP
    unknown: 未知
  table:
    target: 目标
    clusterIpDetail: '集群 IP: {ip}'

cruHpa:
  title:
    new: 添加 Pod 水平自动伸缩
    edit: 编辑 Pod 水平自动伸缩
    view: "Pod 水平伸缩: {name}"
  status:
    label: 当前状态
  target:
    label: 工作负载
  name:
    placeholder: '例如: myscaler'
  description:
    placeholder: '例如: My scaler'
  prompt:
    deployment: 选择工作负载...
  minReplicas:
    label: 最小副本
    placeholder: '例如: 1'
  maxReplicas:
    label: 最大副本
    placeholder: '例如: 10'
  metrics:
    label: 指标
    noMetrics: 没有指标
    addMetricLabel: 添加指标
    removeMetricLabel: 删除指标
    selector:
      labels:
        addSelectorLabel: 添加标签
        label: 指标匹配标签
      expressions:
        addSelectorLabel: 添加表达式
        label: 指标匹配表达式
    describedObject:
      label: 描述对象
      apiVersion:
        label: 描述对象 API 版本
        placeholder: '例如: extensions/v1beta1'
      kind:
        label: 描述对象类型
        placeholder: '例如: Ingress'
      name:
        label: 描述对象名称
        placeholder: '例如: main-route'
    types:
      label: 指标类型
      object: 对象
      pods: Pods
      resource: 资源
      external: 扩展
      warning:
        resource: "为了在 HPA 中使用资源指标，您需要部署 metrics 服务器。"
        custom: "为了在 HPA 中使用自定义指标，您需要部署自定义 metrics 服务器，比如 Prometheus Adapter。"
        external: "为了使用 HPA 的扩展指标，您需要部署扩展指标服务器，比如 Prometheus Adapter。"
        cpu: "未在选定的 deployment 中设置 CPU 预留，HPA 将不能基于 CPU 使用率计算副本数。"
        memory: "未在选定的 deployment 中设置内存预留，HPA 将不能基于内存使用率计算副本数。"
    name:
      label: 指标名称
      placeholder: '例如: packets-per-second'
      resources:
        cpu: CPU
        memory: Memory
    target:
      label: 目标类型
      options:
        value: 值
        averageValue: 平均值
        averageUtilization: 平均利用率
    value:
      label: 数值
      placeholder: '例如: 200'
      cpuPlaceholder: '例如: 200m'
      utilizationPlaceholder: '例如: 50'
editDns:
  title:
    new: 添加 DNS 记录
    edit: 编辑 DNS 记录
    view: "记录: {name}"
  name:
    placeholder: '例如: Myapp'
  sessionAffinity:
    title: 会话保持
    detail: 根据源 IP 将连接映射到一致的目标
    label: 启用会话保持
  externalIPs:
    addActionLabel: 添加外部 IP
    placeholder: '例如: 80.11.12.10'
    value: 外部 IP
  loadBalancerIP:
    label: Load Balancer IP
    placeholder: '例如: 78.11.24.19'
  loadBalancerSourceRanges:
    addActionLabel: 添加 ip 源范围
    placeholder: '例如: 143.231.0.0/16'
    value: 负载均衡器 ip 源范围
  healthCheckNodePort:
    label: 健康检查节点端口
    placeholder: '例如: 8080'
  externalTrafficPolicy:
    label: 外部流量策略
    local: Local
    cluster: Cluster
  publishNotReadyAddresses:
    label: 对外发布的地址
    readyOnly: 仅就绪接入点
    all: 所有接入点
  sessionAffinityConfig:
    label: Session 保持时间
    placeholder: '例如: 10800'
  kind:
    label: 类型
    clusterIP: Cluster IP(仅集群内部通信)
    loadBalancer: L4 负载均衡器
    nodePort: NodePort(所有主机端口均可访问)
    externalName: ExternalName
    headless: Headless Service
  description:
    placeholder: '例如: 当前 MyApp 版本'
  selector:
    label: 容器选择器
    keyLabel: 标签
    addActionLabel: 添加标签选择器
  recordType:
    label: "解析到"
    arecord: 外部 IP 地址
    cname: 外部域名
    alias: 服务别名
    workload: 工作负载
    selector: Pod
    clusterIp: "Cluster IP"
  target:
    arecord: 目标 IP 地址
    cname: 目标域名
    alias: 目标 DNS 记录
    workload: 目标工作负载
    selector: 目标 Pod 选择器
  add:
    arecord: 添加 IP
    alias: 添加服务
    workload: 添加工作负载
    selector: 添加选择器
  placeholder:
    arecord: '例如: 19.82.2.24'
    cname: '例如: example.com'
  prompt:
    alias: 选择服务...
    workload: 选择工作负载...
  errors:
    targetRequired: '必须配置一个或多个"目标服务/工作负载/主机名/域名"'
    selectorRequired: '必须配置一个或多个"目标标签选择器"'
    mixedAlias: 别名不能以 CNAME 和其他记录的组合为目标。
    multipleCname: 别名不能指向多个 CNAME 记录

cruPersistentVolumeClaim:
  title:
    define: 配置 PVC
    new: 添加 PVC
    edit: '编辑 PVC: {name}'
    view: 'PVC: {name}'
  define:
    addActionLabel: 配置
  capacity:
    label: 容量
    unit: GiB
  name:
    placeholder: '例如: myvol'
  source:
    label: 来源
    pv: 使用现有的持久卷(PV)
    storageClass: 使用存储类创建新的持久卷(PV)
  pv:
    label: 持久卷(PV)
    prompt: 选择持久卷(PV)…
  storageClass:
    label: 存储类(Storage Class)
    prompt: 使用默认 storage class
  secretRequired:
    name: 密文名称
    namespace: 密文命名空间
  volumeHandleRequired:
    label: Volume Handle

cruVolumeClaimTemplate:
  title:
    define: 配置 PVC 模板
    new: 添加 PVC 模板
    edit: "编辑 PVC 模板: {name}"
    view: "PVC 模板: {name}"
  define:
    addActionLabel: 确定
  capacity:
    label: 容量
    unit: GiB
  name:
    placeholder: '例如: Myvol'
  source:
    label: 来源
    pv: 使用已有的持久卷(PV)
    storageClass: 使用存储类创建新的持久卷(PV)
  pv:
    label: 持久卷(PV)
    prompt: 选择持久卷(PV)...
  storageClass:
    label: 存储类(Storage Class)
    prompt: 使用默认(Storage Class)
  customize:
    title: 自定义
    detail: 自定义高级设置

cruPrivateRegistry:
  title:
    label: 私有镜像仓库
    detail: 给集群配置私有镜像仓库，当开始构建集群时会通过此镜像仓库拉取所需的全部镜像。
  noData: 当前集群没有配置私有镜像仓库
  defaultError: 您必须指定默认的私有镜像仓库。
  add:
    label: 添加私有镜像仓库
  registry:
    user:
      label: 用户名
    password:
      label: 密码
    url:
      label: 仓库地址
    default:
      label: 默认仓库

cruVolume:
  sourcePrompt: 需要先选择卷插件...
  title:
    new: 配置临时卷
  define:
    addActionLabel: 确定
  name:
    placeholder: '例如: Myvol'
  source:
    label: 存储源
    title: 源配置
    detail: 配置选定存储源的选项
    prompt: 选择存储源...

destinationRulePage:
  noMatch: 没有与当前搜索匹配的目标规则
  noData: 没有定义目标规则。
  notSupported: '集群 networking.istio.io/v1alpha3 API 不可用。'
  table:
    host:
      label: Host
    subsets:
      label: Subsets

globalRegistryPage:
  header: 全局镜像库
  enabled: 镜像库已启用。点击<a href="{url}/registry" target="_blank" rel="nofollow noopener noreferrer">这里</a>在新页面中打开 Harbor UI。
  disabled: 镜像库尚未启用。
  notReady: 在 LOCAL 集群的系统项目中安装镜像库…
  confirmDisable: '再次单击将禁用全局镜像库'
  disable: 禁用镜像库
  enableActionLabel: 启用
  command:
    title: Docker 命令
    detail: 用于镜像库的 Docker 命令
    dockerLogin: 登录到镜像库
    dockerPull: 从镜像库中提取图像
    dockerTag: 重命名镜像库镜像
    dockerPush: 推送镜像到镜像库
  setting:
    adminPassword:
      label: 管理员密码
      placeholder: Harbor 管理员密码
      helpText: '如果您使用具有初始化端口数据的现有 PVC，密码将不会生效。'
  config:
    header:
      postgresql: PostgreSQL Database
      redis: Redis
      registryPersistence: Registry
      notary: Notary
      clair: Clair
    persistenceStorageclass:
      label: Storage Class
    clairEnabled:
      label: Enable Clair
    notaryEnabled:
      label: Enable Notary
    secretKey:
      label: Encryption Key For Harbor
      description: 用于加密的密钥，必须是 16 位字符串。
      error: '"Harbor 加密密钥" 必须是 16 位字符串。'
    storageType:
      label: 存储后端类型
    databaseType:
      label: 配置数据库类型
    redisType:
      label: 配置 Redis 类型
    registryExistingClaim:
      label: 现有 PVC
      prompt: 选择现有 PVC...
    registryPVSize:
      label: 持久卷大小
    source:
      pvc: 使用现有的 PVC
    storageClass:
      emptyError: '在 LOCAL 集群中至少需要一个默认存储类'
      sizeRequired: '"{component} 持久卷大小需要设置'
    databaseRequestCpu:
      label: Database CPU 预留
      placeholder: '例如: 1000'
    databaseLimitCpu:
      label: Database CPU 限制
      placeholder: '例如: 1000'
    databaseRequestMemory:
      label: Database Memory 预留
      placeholder: '例如: 1000'
    databaseLimitMemory:
      label: Database Memory 限制
      placeholder: '例如: 1000'
    redisRequestCpu:
      label: Redis CPU 预留
      placeholder: '例如: 1000'
    redisLimitCpu:
      label: Redis CPU 限制
      placeholder: '例如: 1000'
    redisRequestMemory:
      label: Redis Memory 预留
      placeholder: '例如: 1000'
    redisLimitMemory:
      label: Redis Memory 限制
      placeholder: '例如: 1000'
    redis:
      external:
        host:
          label: Redis 主机
          placeholder: '例如: 192.168.0.2'
        port:
          label: Redis 端口
          placeholder: '例如: 6379'
        coreDatabaseIndex:
          label: Core Database Index
          placeholder: '例如: 0'
        jobserviceDatabaseIndex:
          label: Jobservice Database Index
          placeholder: '例如: 1'
        registryDatabaseIndex:
          label: Registry Database Index
          placeholder: '例如: 2'
        password:
          label: Redis 密码
          placeholder: redis 密码
    s3:
      region:
        label: S3 Region
        placeholder: '例如: us-west-2'
      bucket:
        label: S3 Bucket Name
        placeholder: Your Bucket Name
      accesskey:
        label: S3 Access Key
        placeholder: Your S3 Access Key
      secretkey:
        label: S3 Secret Key
        placeholder: Your S3 Secret Key
      regionendpoint:
        label: S3 Region Endpoint
        placeholder: '例如: s3.us-west-2.amazonaws.com'
    database:
      external:
        host:
          label: PostgreSQL 地址
          placeholder: '例如: 192.168.0.1'
        port:
          label: PostgreSQL 端口
          placeholder: '例如: 5432'
        username:
          label: PostgreSQL 用户名
          placeholder: '例如: user'
        password:
          label: PostgreSQL 密码
          placeholder: '例如: password'
        coreDatabase:
          label: Core Database
          placeholder: '例如: registry'
        clairDatabase:
          label: Clair Database
          placeholder: '例如: clair'
        notaryServerDatabase:
          label: Notary Server Database
          placeholder: '例如: notary_server'
        notarySignerDatabase:
          label: Notary Signer Database
          placeholder: '例如: notary_signer'
        sslmode:
          label: SSL Mode for PostgreSQL
      existingClaim:
        label: Existing Claim for PostgreSQL
    exposeIngressHost:
      error: '"{hostName}" 是一个主机名，需要使用 expose.ingress.host 这样的域名。'
  globalRegistryEnabled:
    error: 保存 global-registry-enabled 错误
  insufficientSize:
    total:
      cpu: 请确保至少有 {minCpu} milli cpu 供 {action} registry 使用。
      memory: 请确保至少有 {minMemory} MiB 的内存供 {action} registry 使用。
      all: 请确保至少有 {minCpu} milli cpu 和 {minMemory} MiB 内存可供 {action} registry 使用。
    workload:
      cpu: 请确保至少有一个具有 {cpu} milli cpu 的节点来启用 {component} 工作负载。
      memory: 请确保至少有一个具有 {memory} MiB 内存的节点来启用 {component} 工作负载。
      all: 请确保至少有一个节点具有 {cpu} milli cpu 和 {memory} MiB 内存用来启用 {component} 工作负载。
    selectors:
      cpu: 请确保至少有一个节点将节点选择器与 {cpu} milli cpu 匹配，以启用 {component} 工作负载。
      memory: 请确保至少有一个节点将节点选择器与 {memory} MiB 内存匹配，以启用 {component} 工作负载。
      all: 请确保至少有一个节点与 {cpu} milli cpu 和 {memory} MiB 内存匹配，以启用 {component} 工作负载。
  nodeSelector:
    addSelectorLabel: 添加选择器
    helpText: 选择要运行 {component} 工作负载的节点。
  notaryAndSigner: Notary server and Notary signer。

globalDnsPage:
  header: 全局 DNS 记录列表
  newDns: 添加 DNS 记录
  noDnsMatch: 没有 DNS 条目匹配当前搜索。
  noDnsData: 当前没有全局 DNS 条目。
  newProvider: 添加 DNS 提供商
  noDnsProviderMatch: 没有 DNS 提供商匹配当前搜索。
  noDnsProviderData: 当前没有全局 DNS 提供商。
  noProjects: 没有要选择的项目
  noApps: 没有可访问的多集群应用
  noProviders: 没有选择 DNS 提供商
  entriesPage:
    header:
      new: 添加全局 DNS 记录
      edit: 编辑全局 DNS 记录
    options:
      title: 配置选项
      detail: 自定义 DNS 记录选项
    access:
      noAccessMulti: 您无法访问目标应用程序
      noAccessProvider: 您没有权限访问此供应商
      noAccessProject: 您无法访问目标项目
    projectHelp: "要完成项目的全局 DNS 记录设置，必须在应用或项目的 ingress 规则中添加注释(<code>rancher.io/globalDNS.hostname='hostname'</code>)，其中<code>'hostname'</code>是路由规则中使用的主机名，这个<code>'hostname'</code>也必须匹配这个全局 DNS 条目的 FQDN。"
    istioHelp: "要使模板在流量规则商店中可见，必须在应用商店模板<code>questions.yaml</code>文件中添加标签( <code>io.rancher.istio=true</code> )"
    table:
      name: 名称
      fqdn: FQDN (域名)
      target: 目标
      provider: 提供商 ID
    config:
      title: 配置 DNS 条目
      detail: 提供配置细节以添加新的全局 DNS 条目
      configType: 解析到
      multi: 多集群应用
      project: 项目
      fqdn:
        label: FQDN (域名)
        placeholder: '例如: dev.example.com'
      multiCluster:
        label: 目标应用
        placeholder: 没有选择多集群应用
        add:
          label: 添加目标
      provider:
        label: 提供商
        placeholder: 选择提供商
      projects:
        label: 目标项目
      ttl:
        label: 'DNS TTL(DNS 解析记录缓存有效期)'
  providersPage:
    title: 全局 DNS 提供商列表
    header:
      new: 添加全局 DNS 提供商
      edit: 编辑全局 DNS 提供商
    options:
      title: DNS 提供商设置
      detail: 自定义 DNS 提供商设置
    members:
      title: 成员访问
      detail: 控制谁有权访问资源
    table:
      name: 名称
      provider: 提供商名称
      rootDomain: 根域名
    config:
      root:
        label: 根域名
        placeholder: 根域名
      accessKey:
        label: Access Key
        placeholder: Your access key
      secretKey:
        label: Secret Key
        placeholder: Your secret key
        info: 密钥已经提供, 只有在更新密钥本身时才需要它。
      apiEmail:
        label: API Email
        placeholder: Your API Email
      apiKey:
        label: API Key
        placeholder: Your API Key
      credentialsPath:
        label: SSH 证书路径
        placeholder: "/.aws"
      proxySetting:
        label: 代理设置
      roleArn:
        label: Role ARN
        placeholder: "arn:partition:service:region:account-id:resource"
      region:
        label: Region
        placeholder: us-west-2
      zone:
        label: Zone
        placeholder: public

multiClusterAppsPage:
  header: 应用列表
  noData: 没有启动多集群应用程序
  noMatch: 没有多集群应用程序匹配当前搜索
  error:
    appData: 加载全局应用程序数据出错

# If you change translations here also change the translation in app/utils/constants.js under the FALLBACK_TRANSLATIONS key
# those are present in case we have an error in the app and can not load the translations file
# the error page will at least make a little sense
failWhalePage:
  header: 错误
  reloadButton: |
    <a href="#" onclick="window.location.href = window.location.href; return false;">重新加载</a>以重试或
  logoutButton: 注销

time:
  now: 现在
  mins: |
    {mins, plural,
    =1{#分钟 }
    other{#分钟 }
    }
  minsAgo: |
    {mins, plural,
    =1{#分钟前 }
    other{#分钟前 }
    }
  secsAgo: |
    {secs, plural,
    =1{#秒前 }
    other{#秒前 }
    }

haPage:
  header: 高可用性(HA)
  setup:
    prefix: "可以在不同主机上部署多个服务器容器，以便 {appName} 一直保持运行，即使其中一个主机失败。"
    link: 请参阅文档
    suffix: ' 有关安装和使用信息'
  table:
    address: 主机地址
    port: 端口
    heartbeat: 上次在线
    clustered: 集群

nodesPage:
  header: 主机列表
  editCluster: 编辑集群
  nodePoolGroup: "主机池: {name}"
  table:
    clusterName: 集群
    role: 角色
    cpu: 处理器
    memory: 内存
    disk: 磁盘
    pod: Pods
    version: 版本
    docker: Docker
    unschedulable: 不可调度
    instanceState: 容器状态
    instanceStateWithIcon: 状态
    noData: 此集群没有配置任何主机
    noMatch: 没有符合当前搜索的主机

hostsPage:
  cloudHostsPage:
    addPage:
      launch: 启动
      header: 添加主机
      name:
        label: 主机名称
        placeholder: '例如: node01'
      transferUnit: TB
      instance: '类型:'
      storage: '存储:'
      transfer: '流量限制:'
      zone: '区域:'
      env: '环境'
      size: '大小: '
      os: '操作系统: '
      driver: '驱动: '
      template: '模板名称: '
  addContainer: 添加容器
  new:
    header:
      customText: 添加自定义主机
      text: 添加主机
    manageLink: 管理 Docker-machine 驱动
    custom: 添加自定义主机
    name:
      placeholder: '例如: node01'
    addCluster:
      label: "集群选项"
      description: 将此新主机附加到集群，委派角色等
      cluster:
        label: 集群
      roles:
        label: 角色
      table:
        label:
          etcd: 用于 etcd
          control: 用于管理
          worker: 作为 worker 节点使用

  hostPage:
    header:
      title: '主机: {name}'
    hostname: 主机名
    ipAddress: IP 地址
    version: 版本
    kubeletVersion: Kubelet 版本
    kubeProxyVersion: Kube-Proxy 版本
    dockerVersion: Docker 版本
    containerDVersion: Containerd 版本
    kernelVersion: 内核版本
    operatingSystem: 操作系统
    conditions:
      diskSpace: 磁盘空间
      diskPressure: 磁盘负载
      memoryPressure: 内存负载
      ready: Kubelet
    limits:
      cpu: 'CPU 限制: '
      memory: '内存限制: '
      storage: '本地卷限制: '
    infoMultiStats:
      ip: 'IP 地址'
      cpu: 'CPU'
      memory: '内存'
      storage: '数据卷'
      provider:
        labelText: '供应商: '
        noHost: 自定义
      kernel: '内核'
      docker: 'Docker:'
      os: '操作系统'
      milliCpu:
        labelText: mCPU
    containersTab:
      header: 容器
      detail: 在此主机上运行的容器列表
    portsTab:
      header: 端口
      detail: '这些属性显示哪些端口已被映射到哪里'
      table:
        header:
          ip: IP 地址
          port: 端口
          service: 服务
          container: 容器
        body:
          noData: 主机当前未映射任何端口
    storageTab:
      header: 卷
      detail: '这些属性显示主机卷细节'
      table:
        header:
          state: 状态
          hostPath: 主机路径
          mounts: 挂载
        body:
          noData: 主机未使用任何数据卷

istio:
  refreshGraph: 刷新视图
  noData: 没有足够的数据来绘制图表
  period: Period
  table:
    template: 模板
    host: Host
  kiali: 由 Kiali 提供支持
  trafficMonitoring:
    duration: Last {time}
  nav:
    graph: 流量图
    metrics: 流量指标
    rules: 流量规则
    destinationRules:
      label: 目标规则
      add: 添加目标规则
    virtualServices:
      label: 虚拟服务
      add: 添加虚拟服务
    gateways:
      label: 网关
      add: 添加网关

k8sImport:
  header: 导入现有的 Kubernetes
  name:
    label: 集群名称
    placeholder: '例如: My-imported-cluster'
  kubeConfig:
    label: 要导入的 Kubeconfig 文件
    placeholder: 导入或粘贴集群的 Kubeconfig 文件以供使用。
  actionLabel: 导入

k8sPage:
  header: Kubernets
  dashboard:
    title: 控制面板
    detail: 访问本地 Kubernetes 仪表盘。
    button: 打开仪表盘
  shell:
    title: 命令行
    detail: 在浏览器中执行 Kubernetes 的<code>kubectl</code>命令行。
    button: 执行 kubectl 命令行
  configFile:
    title: 配置文件
    detail: 生成在本机可以使用的<code>kubectl</code>配置文件。
    button: Kubeconfig 文件
    generating: 生成中...
    usage:
      helpText: |
        将配置保存到<code>~/.kube/config</code>
      downloadText: |
        然后下载<a href="https://www.cnrancher.com/docs/rancher/v2.x/cn/install-prepare/download/kubernetes/" target="_blank"><code>kubectl</code></a>(如有需要)安装并运行。

loginPage:
  greeting: "您好！<br>欢迎使用 {appName}"
  insecure: "{appName} 仅支持<code>https://</code>连接，您必须:<br><br>使用服务器内置的 TLS 支持<br><br>，或者在容器前面提供自己的 TLS 终止服务。"
  githubMessage: "{appName} 使用 GitHub 管理账号和团队。点击以下按钮以登录，我们将仅使用基本的 GitHub 账号信息。"
  shibbolethMessage: "{appName} 使用 Shibboleth 管理账号。点击以下按钮以登录到设置的 Shibboleth IDP。"
  shibbolethError:
    401: "未授权"
    500: "内部服务器错误"
    generic: "尝试登录时发生错误({errorCode})，请重试"
  error:
    authFailedCreds: "登录失败: 检查凭据，或者帐户可能无权登录"
    authFailed: "登录失败: 帐户可能无权登录"
    unknown: "尝试登录时发生未知错误，请与系统管理员联系。"
    invalidSamlAttrs: "无效的 saml 属性"
    noResponse: "没有响应"
  readableProviders:
    ad: Active Directory
    azureAd: Azure AD
    local: 本地用户
    openldap: OpenLDAP
    freeipa: FreeIPA

machinePage:
  header: 主机驱动
  inactive: 未激活
  subtext: "另外<code>Docker-machine</code>驱动可在此加载并在添加主机界面使用。"
  add: 添加主机驱动
  builtin: 内置
  url: 位置

# If you change translations here also change the translation in app/utils/constants.js under the FALLBACK_TRANSLATIONS key
# those are present in case we have an error in the app and can not load the translations file
# the error page will at least make a little sense
notFoundPage:
  header: "当前页面不存在！"
  linkTo: 回到首页

projectIstioPage:
  info:
    notEnabled: 'Istio 尚未启用。访问<a href="/c/{clusterId}/istio/cluster-setting">这里</a>启用它。'
    notOwner: "Istio 尚未启用。请与集群管理员联系。"
    noPermission: "您没有配置 Istio 的权限。"

registriesPage:
  index:
    header: 镜像库凭证列表
    linkTo: 添加凭证
    noData: "没有镜像库凭证"
    noMatch: 没有镜像库凭据匹配当前搜索
    table:
      header:
        state: 状态
        address: 地址
        username: 用户名
        created: 创建时间

  new:
    header: 添加镜像库凭证
    form:
      custom:
        labelText: 地址
        placeholder: '例如: registry.example.com'
        help: "仅添加主机名或 IP 地址，不要包含协议头(https://)。"
      username:
        labelText: 用户名
        placeholder: '例如: username'
      password:
        labelText: 密码
        placeholder: '例如: password'

rulesPage:
  new: 添加流量规则
  noMatch: 没有流量规则匹配当前搜索
  noData: 当前没有流量规则
ruleDetailPage:
  header: "流量规则: {appName}"
  rules:
    virtualservices: 虚拟服务
    serviceentries: 服务条目
    destinationrules: 目标规则
    gateways: 网关
    envoyfilters: Envoy Filters
  answers:
    title: 应答
    detail: 自定义流量规则应答
    variable: 变量

secretsPage:
  index:
    header: 密文列表
    linkTo: 添加密文
    noData: 未配置任何密文
    noMatch: 没有符合搜索条件的密文
  table:
    keys: 键

settingsPage:
  tabs:
    settings: 高级设置
    feature: 功能选项

configMapsPage:
  index:
    header: 配置映射
    linkTo: 添加配置映射
    noData: 没有配置配置映射
    noMatch: 没有配置映射与当前搜索匹配
  table:
    keys: 键

servicePage:
  header: '工作负载: {name}'
  globalScale: '每个主机 {scale}'
  endpoints: '访问端口'
  multistat:
    type: '类型'
    fqdn: 'FQDN'
    scale: 'Pod 配置副本数'
    image: '镜像名'
    namespace: '命名空间'
    cronSchedule: 定时调度
    created: '创建时间'
    daemonSetScale: '每主机 1 个 Pod'
    currentScale: 'Pod 可用副本数: {count}'
  serviceType:
    deployment: Deployment (无状态)
    replicaSet: Replica Set
    statefulSet: Stateful Set (有状态)
    daemonSet: Daemon Set (每个主机一个 Pod)
    replicationController: Replication Controller
    job: job (一次性运行 Pod)
    cronJob: Cron Job (定时运行 Pod)
    pod: 独立 Pod
  external:
    externalIp: |
      {count, plural,
      =1{ 个外部 IP }
      other{ 个外部 IP }
      }
    externalHostname: '外部主机名: '
  selector:
    label: '选择器: '
  containersTab:
    title: '容器'
    detail: '组成该服务的容器列表'
  linksTab:
    header: 链接
    detail: '这些属性显示当前服务中容器之间的链接'
    noData: 当前服务没有链接
  certsTab:
    title: 证书
    detail: 'TLS 请求所使用的证书'
    default: 默认证书
    additional: 其他 SNI 证书
  new:
    form:
      name:
        placeholder: '例如: Myapp'
      description:
        placeholder: '例如: 我的应用'
  newBalancer:
    upgradeImage: "负载均衡器镜像版本将由<code>{from}</code>升级到<code>{to}</code>。"
    form:
      name:
        placeholder: '例如: website'
      description:
        placeholder: '例如: Mycompany.com 的负载均衡'
  newIngress:
    form:
      name:
        placeholder: '例如: website'
      description:
        placeholder: '例如: Mycompany.com 的 Ingress'
  portsTab:
    title: 端口
    detail: '从主机 IP 映射到容器监听的端口'
    notActive: 端口仅当服务处于活动状态时可见
  logTab:
    title: 服务日志
    detail: '这项服务最近发生的编排事件'
  type:
    service: 服务
    selectorservice: 选择器
    loadbalancerservice: 负载均衡
    dnsservice: 服务别名
    externalservice-ip: 外部 IP
    externalservice-host: 外部名称
    kubernetesservice: K8s 服务
    composeservice: Compose 服务
    networkdriverservice: 网络服务
    storagedriverservice: 存储服务
  sidekick:
    tabHeader: Sidecars
    header: 工作负载与 Sidecar
    helpBlock: 选择主容器或其中一个 sidecar 容器

signupPage:
  header: '注册 {appName}'
  form:
    button: 注册
    labels:
      loginUsername: 用户名
      email: 电子邮箱
  emailSuccess:
    header: '欢迎使用 {appName}'
    confirm:
      subtext: 已经发送邮件到邮箱，请点击邮件中的验证链接以确认邮件地址。
      resend: 重新发送邮件

stackPage:
  header:
    singleBanner: 查看单个应用
    backLink: 返回所有应用
  basics:
    tagsCopy: 复制用逗号分隔的标签
  containers:
    header: 容器
    detail: 应用中所包含的独立容器和服务。
    status: |
      {count, plural,
      =0{ 无容器 }
      =1{#个容器 }
      other{#个容器 }
      }
  loadBalancers:
    header: 负载均衡
    detail: '属于该应用的负载均衡容器'
    status: |
      {count, plural,
      =0{ 无负载均衡 }
      =1{#条负载均衡 }
      other{#条负载均衡 }
      }
  dnsServices:
    header: DNS 记录
    detail: '属于该应用的 DNS 记录'
    status: |
      {count, plural,
      =0{ 无记录 }
      =1{#条记录 }
      other{#条记录 }
      }
  scalingGroups:
    header: 扩容组
    detail: '属于该扩容组的容器'
    status: |
      {count, plural,
      =0{ 无容器 }
      =1{#个容器 }
      other{#个容器 }
      }
  volumesTab:
    header: 卷
    detail: '该应用挂载到容器中的卷'
    table:
      path: 挂载点
      shared: 共享
      writable: 可写
      noData: 这个应用没有挂载任何卷
      noMatch: 没有匹配当前搜索的卷

newStack:
  header: 导入 YAML
  name:
    placeholder: '例如: Myapp'
  description:
    placeholder: '例如: MyApp Stack'
  files:
    label: 额外的 Compose 文件
    addActionLabel: 添加文件
    uploadActionLabel: 从磁盘读取
    namePlaceholder: 文件名
    valuePlaceholder: 文件内容
    protipLabel: "支持 {appName}<code>compose.yml</code>，<code>docker-compose.yml</code>和 Kubernetes 清单文件。"
  answers:
    label: 应答(变量替换)
    addActionLabel: 添加应答

nodeTemplatesPage:
  header: 主机模板列表
  rightButtons:
    actionButton: 添加模板
    cloudCredentials: 管理云凭证
  detail: 主机模板用于在基础设施提供商上部署组成集群的主机。
  table:
    state: 状态
    name: 名称
    provider: 提供者
    location: 位置
    size: 大小
    usedBy: 使用者
    noData: 没有配置主机模板
    usedByNone: 没有集群
    unknown: 未知
    owner: 所有者

storageClassPage:
  header: 存储类列表
  addActionLabel: 添加类
  noData: 没有配置存储类
  noMatch: 没有存储类别与当前搜索匹配
  provisioner:
    label: 提供者
  default:
    label: 默认

persistentVolumePage:
  header: 持久卷(PV)列表
  addActionLabel: 添加 PV
  noData: 没有配置持久卷
  noMatch: 没有符合当前搜索的持久卷
  source:
    label: 存储源

userPreferencesPage:
  header: 设置
  theme:
    header: 主题
    light: 明亮
    auto: 自动
    autoDetail: 自动设置会在晚 6 点到早 6 点间自动切换主题到黑色
    dark: 黑色
  generalInfo:
    header: 账号
    name:
      label: 显示名称
    username:
      label: 用户名
    email:
      label: 邮件地址
    password:
      text: 修改密码

verifyPage:
  header: "您已经成功验证了邮件地址!"
  subtext: 在完成账号设置前，我们还需要一些信息。
  account:
    header: 账号创建完成
    subtext: 点击下面的链接进入登录页面。
    linkText: Login

virtualServicePage:
  noMatch: 没有虚拟服务匹配当前搜索
  noData: 没有定义虚拟服务
  notSupported: 'networking.istio.io/v1alpha3 API 在集群中不可用。'
  table:
    hosts:
      label: 主机

verifyResetPasswordPage:
  header: 重置密码
  button: 更新密码
  success:
    header: 密码已重置!
    subtext: 点击以下链接返回登录页面
    linkText: 登录


waitingPage:
  hosts:
    setup:
      kubernetes: 设置 Kubernetes

notifierPage:
  notifiers: 通知
  testedBtnLabel: OK
  testingBtnLabel: 测试
  deleteErrorMessage: '通知程序 {displayName} 正在由 {alertNames} 使用'
  notifierTypes:
    slack: Slack
    email: 电子邮箱
    pagerduty: PagerDuty
    webhook: Webhook
    wechat: 企业微信
    dingtalk: 钉钉
    msteams: Microsoft Teams
  slack:
    url: 访问 URL
    urlPlaceholder: '例如: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX'
    defaultRecipient:
      label: 默认频道
      helpText: 可选。默认情况下，通知被发送到默认频道。在配置告警时，可以覆盖该频道。
    defaultRecipientPlaceholder: '例如: #example'
    helpText: |
      以下是<a href="https://slack.com/apps/A0F7XDUAZ-incoming-webhooks" target="_blank" rel="nofollow noopener noreferrer">创建传入 WebHooks</a>的方法。
  smtp:
    server: Smtp 服务器配置
    host: Smtp 服务器地址
    hostPlaceholder: '例如: 192.168.1.121'
    port: 端口
    portPlaceholder: '例如: 465'
    sender: 默认发件箱
    userName: 用户名
    userNamePlaceholder: '例如: John'
    password: 密码
    passwordPlaceholder: 账号的密码
    defaultRecipient:
      label: 默认收件人地址
      helpText: 在配置告警时，可以覆盖收件人。
    defaultRecipientPlaceholder: '例如: you@example.com'
    tls: 使用 TLS
  pagerduty:
    serviceKey:
      label: 默认服务密匙
      helpText: 在配置告警时，可以覆盖服务密匙。
    serviceKeyPlaceholder: 您的 PagerDuty 服务密匙。
    helpText: |
      以下是<a href="https://www.pagerduty.com/docs/guides/prometheus-integration-guide">为 PagerDuty 创建 integration key</a>的方法。
  wechat:
    recipientType:
      label: 接收者类型
      tag: 标签
      party: 部门
      user: 用户
    secret:
      label: 自建应用密钥
      helpText: 您可以在<a href="https://work.weixin.qq.com/wework_admin/frame#apps" target="_blank" rel="nofollow noopener noreferrer">自建应用详情页</a>找到密文。
    agent:
      label: 自建应用代理 ID
      helpText: 您可以在<a href="https://work.weixin.qq.com/wework_admin/frame#apps" target="_blank" rel="nofollow noopener noreferrer">自建应用详情页</a>找到 Agent Id。
    corp:
      label: 企业 ID
      helpText: |
        点击<a href="https://work.weixin.qq.com/wework_admin/frame#profile" target="_blank" rel="nofollow noopener noreferrer">这里</a>查看企业 ID。
    defaultRecipient:
      label: 默认接收者
    secretPlaceholder: 您的自建应用密钥
    agentPlaceholder: '例如: 1000003'
    corpPlaceholder: '例如: wwc0cc3d58f9b021b6'
    defaultRecipientPlaceholder: '例如: 2'
  dingtalk:
    url: Webhook 地址
    urlPlaceholder: Webhook 地址
    secret: 密钥
    secretPlaceholder: 仅在选择“加签”时需要填写
  msteams:
    url: Webhook 地址
    urlPlaceholder: Webhook 地址
  proxyUrl:
    label: Proxy URL
    placeholder: '例如: http://my-proxy/'
  sendResolved:
    label: 发送已解决告警

  webhook:
    url: URL
    urlPlaceholder: webhook URL
  testAction:
    testing: 测试
    testOk: 设置已验证
    testFailed: 出了点问题，请检查输入的信息。
    test: 测试
  clone: 克隆
  index:
    addActionLabel: 添加通知
    table:
      created: 创建时间
      noData: 没有配置通知
      noMatch: 不匹配
##############################
# Partials
##############################
ldap:
  providerName:
    openldap: OpenLDAP
    ad: Active Directory
    freeipa: FreeIPA
    saveLabels:
      openldap: 启用 OpenLDAP 认证
      ad: 启用 Active Directory 认证
      freeipa: 启用 FreeIPA 认证
  header:
    disabled:
      label: "{providerName} 未配置"
  accessEnabled:
    header: 验证
    subtext: "如需修改服务器配置，请在下方关闭访问控制后重新设置"
    serviceAccountDistinguishedName:
      labelText: "服务帐户专有名称:"
    connectionTimeout:
      labelText: "服务连接超时:"
    general:
      header: 常规
      server: "服务器: "
      tls: "TLS:"
      serviceAccount: "服务账号: "
      searchBase: "搜索起点:"
      defaultDomain: "缺省域:"
    users:
      header: 用户
      objectClass: "对象分类:"
      login: "登录字段:"
      name: "名称字段:"
      search: "搜索字段:"
      searchFilter: "搜索过滤器:"
      enabled: "启用字段:"
      disabledBitMask: "禁用位掩码:"
    group:
      header: 用户组
      objectClass: "对象分类:"
      name: "名称字段:"
      search: "搜索字段:"
      searchFilter: "搜索过滤器:"
    disable:
      confirmDisable:
        pre: 关闭访问控制
  accessConfig:
    header: "1. 配置 {providerName} 服务器"
    subtext1: "请输入地址、端口及协议以连接 {providerName} 服务器。<code>389</code>是标准端口(未加密)，<code>636</code>是加密连接(TLS)端口。"
    subtext2: "{appName} 需要对所有登录域有只读权限的服务账号。"
    port:
      labelText: 端口
      checkbox: TLS
    groupSearchBase:
      labelText: '用户组搜索起点:'
      placeholder: "例如: ou=Groups,dc=Mycompany,dc=com"
      helpText: "设置后，会在此搜索起点下搜索用户组，而不会在用户搜索起点下搜索用户组。"
    userSearchBase:
      labelText: 用户搜索起点
      placeholder: "例如: ou=Users,dc=Mycompany,dc=com"
    defaultDomain:
      helpText: "当用户未指定登录域时使用该域"
      labelText: 默认登录域
      placeholder: "例如: Mycompany"
    serviceAccountDistinguishedName:
      labelText: 服务帐户专有名称
    connectionTimeout:
      labelText: 服务连接超时
  customizeSchema:
    header: "2. 自定义架构"
    helpText: "如果活动目录架构(Schema)不是标准格式，可以在这里进行自定义设置。"
    cert:
      labelText: CA 证书
      helpText: 如果需要，请输入 CA 证书
      placeholder: "粘贴或导入证书，以-----BEGIN CERTIFICATE-----开头。"
    users:
      header: 用户
      objectClass:
        labelText: 对象类型
      login:
        labelText: 登录属性
      name:
        labelText: 用户名属性
      search:
        labelText: 搜索属性
      searchFilter:
        labelText: 搜索过滤器
      searchBase:
        labelText: '用户搜索起点:'
      enabledAttribute:
        labelText: 用户启用的属性
      disabledBitMask:
        labelText: 禁用状态位掩码
      userMemberAttribute:
        labelText: 用户成员属性
    groups:
      header: 用户组
      objectClass:
        labelText: 对象分类
      name:
        labelText: 名称属性
      search:
        labelText: 搜索属性
      searchFilter:
        labelText: 搜索过滤器
      groupMemberUser:
        labelText: 组成员用户属性
        placeholder: uid
      groupMemberMapping:
        labelText: 组成员映射属性
      groupDN:
        labelText: 组 DN 属性
        placeholder: 专有名称
      nestedGroup:
        title: 嵌套的组成员
        enabled:
          labelText: 搜索直接和嵌套的组成员关系
          helpText: 嵌套搜索在大目录中可能会比较慢
        disabled:
          labelText: 只搜索直接的组成员关系
  testAuth:
    header: "3. 测试并启用认证"
    helpText: "通过 {providerName} 账号进行验证测试以确认配置是否正确:"
    userName:
      labelText: 用户名
    password:
      labelText: 密码
    authenticate:
      pre: 验证
      post: "测试中..."

servicePartial:
  noContainers:
    label: 没有容器
    inactive:
      start: 启动

##############################
# Components
##############################
accordionRow:
  status:
    none: 无
    incomplete: 未完成
    error: 错误
    notConfigured: 未配置
    configured: 已配置
    countConfigured: "{count} 条规则已配置"
    standard: 默认
    custom: 自定义
    specific: 具体
    any: 任何
    rule: "{count, plural,=1{#条规则 } other {#条规则 }}"

advancedSection:
  showText: 显示高级选项
  hideText: 隐藏高级选项

annotationsSection:
  title: 注释
  detail: 'Key/value 元数据'
  key: 键
  value: 值
  noData: 没有注释
  noMatch: 没有符合当前搜索的注释

authorizedEndpoint:
  enabled:
    label: '此地址必须是能够访问 k8s api-server 的域名或者 IP。在 Rancher Server 不可用时，可使用包含此地址的 kubecfg 文件，通过命令 "kubectl --context" 直接访问 k8s 集群。'
  fqdn:
    label: FQDN(域名和后面的 CA 证书可不用填写。 )

taintsSection:
  title: Taints
  detail: 当前主机的 Taints
  key: 键
  value: 值
  effect: 影响
  noData: 没有 Taints
  noMatch: 没有符合当前搜索的 Taints

billingInfo:
  header: 账单信息
  addNew: 添加支付方式
  card: "{brand}: ...{last}"
  noSub: 您尚无可用的付款方式
  table:
    title:
      cardType: "信用卡类型: {brand}"
      last4: "卡号末 4 位: {last}"
      exp: "有效期: {exp}"
      name: "持卡人姓名: {name}"
      actions: 操作

cloudProvider:
  title: 云提供商
  amazon: Amazon
  azure: Azure
  external:
    label: 扩展
    helpText: '请编辑 YAML 以指定云控制管理器所需的插件。'
  name: 云提供商名称
  custom:
    notInList: '如果云提供商没有列出，请使用<b>自定义</b>选项。'
    helpText: '请通过编辑 YAML 来添加其他<a href="http://rancher.com/docs/rke/v0.1.x/en/config-options/cloud-providers/" target="_blank" rel="nofollow noopener noreferrer">云提供商</a>'

  helpText: |
    详细了解<a href="https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/" target="_blank" rel="nofollow noopener noreferrer">云提供商</a>
  warning:
    使用云提供程序而不传递云提供程序配置可能会导致集群无法正确配置，推荐您在创建集群之前添加云提供程序配置，文档中可以找到支持的云提供商所需的先决条件。
  azureCloudConfig:
    cloudProviderBackoff:
      description: "Enable exponential backoff to manage resource request retries"
    cloudProviderBackoffDuration:
      description: "Backoff duration"
    cloudProviderBackoffExponent:
      description: "Backoff exponent"
    cloudProviderBackoffJitter:
      description: "Backoff jitter"
    cloudProviderBackoffRetries:
      description: "Backoff retry limit"
    cloudProviderRateLimit:
      description: "启用速率限制"
    cloudProviderRateLimitBucket:
      description: "Rate limit Bucket Size"
    cloudProviderRateLimitQPS:
      description: "Rate limit QPS (Read)"
    maximumLoadBalancerRuleCount:
      description: "允许最大的负载均衡器规则计数是 Azure 负载均衡器执行的限制"
    useInstanceMetadata:
      description: "尽可能使用实例元数据服务"
    useManagedIdentityExtension:
      description: "为虚拟机使用托管服务标识来访问 Azure ARM API"
    aadClientCertPassword:
      description: "具有 RBAC 访问权限的 AAD 应用程序的客户端证书密码，用来与 Azure RM API 通信"
    aadClientCertPath:
      description: "具有 RBAC 访问权限的 AAD 应用程序的客户端证书路径，用来与 Azure RM API 进行通信"
    aadClientId:
      description: "具有 RBAC 访问权限的 AAD 应用程序的 Client ID，用于与 Azure RM API 通信"
    aadClientSecret:
      description: "具有 RBAC 访问权限的 AAD 应用程序的 Client Secret key,用于与 Azure RM API 通信"
    cloud:
      description: "云环境标识符，请参阅此处了解有效参数"
    location:
      description: "部署集群的资源组位置"
    primaryAvailabilitySetName:
      description: "应用作负载均衡器后端的可用性集的名称"
    primaryScaleSetName:
      description: "应该用作负载均衡器后端的缩放集的名称"
    resourceGroup:
      description: "部署集群的资源组名称"
    routeTableName:
      description: "附加到部署集群的子网的路由表名称"
    securityGroupName:
      description: "附加到集群子网的安全组名称"
    subnetName:
      description: "部署集群的子网名称"
    subscriptionId:
      description: "部署集群的 Azure 订阅的 ID"
    tenantId:
      description: "部署集群订阅的 AAD 租户 ID"
    vmType:
      description: "azure 节点类型，可选值为: vmss 和 standard"
    vnetName:
      description: "集群部署在 VNet 中的名称"
    vnetResourceGroup:
      description: "部署 Vnet 的资源组的名称"
    loadBalancerSku:
      description: "Sku of Load Balancer and Public IP. Candidate values are: basic and standard"

catalogSettings:
  header: 商店设置
  notAvailable: "不可用: 这是名为<code>{name}</code>的自定义商店"
  helpText: 目前只支持 Helm 目录
  currentCluster: 当前集群
  currentProject: 当前项目
  globalCatalog: 全局
  library:
    label: 官方认证
    detail: 由 {appName} 官方维护的模板仓库。
  helm:
    stable:
      label: Helm Stable
      detail: 由 Kubernetes 社区维护的模板仓库。
    incubator:
      label:  Helm Incubator
      detail: 未经测试验证的应用模板仓库。
  certified:
    header:
      rancher: "{appName} 认证库"
      pl: 认证的库
    detail:
      rancher: 'Rancher 核心功能所依赖的模板，例如: Kubernetes/Mesos/Swarm 编排支持，由 Rancher 官方维护并提供支持。'
      pl: '由官方维护的核心功能所需要的模板，例如: Kubernetes/Mesos/Swarm 等。'
  community:
    header:
      rancher: 社区贡献
      pl: 社区贡献
    detail:
      rancher: 由社区成员创建并维护的模板，未经 Rancher Labs 认证。
      pl: 由社区成员创建并维护的模板
  more:
    header: 自定义
    helpText:
      header: "您可以自定义应用商店，每个自定义商店需满足以下要求: "
      help-name: 唯一的名称
      help-repo: '仓库地址: '
      help-git: "基于 Git 的商店地址，例如: https://github.com/{appName}/charts.git。"
      help-chart: 'Helm Charts server URL，例如: https://kubernetes-charts.storage.googleapis.com/，详细信息可查看<a href="https://docs.helm.sh/developing_charts/#hosting-chart-repositories" target="_blank" rel="nofollow noopener noreferrer">Chart 托管仓库</a>。'
    addActionLabel: 添加应用商店
    noMatch: 没有与当前搜索匹配的应用商店
    noData: 没有自定义应用商店
    addHeader: 添加应用商店
    editHeader: 编辑应用商店
    name:
      label: 名称
      placeholder: '例如: Mycatalog'
    url:
      label: 商店 URL 地址
    kind:
      label: 类型
      native: 原生
      helm: Helm
    branch:
      label: 分支
      placeholder: '例如: master'
    private:
      label: 使用私有应用商店
    username:
      label: 用户名
      required: '用户名必须填写'
      placeholder: "比如: admin"
    password:
      label: 密码
      required: '密码必须填写'
      placeholder:  password
    helmVersion:
      label: Helm 版本
  errors:
    nameInExists: '在启用 {key} 之前，请移除名称为 {key} 的应用商店。'

clusterRow:
  noMatch: 没有匹配当前搜索的环境。
  noData: 集群中还没有任何环境。
  noHosts: 外部集群没有任何主机
  noClusterMatch: 没有匹配当前搜索的集群。
  noClusterData: 没有集群模板
  addHost: 添加主机...
  importCluster: 使用已有的 Kubernetes
  loginDefault: 登录

clusterTemplateRow:
  label: '集群模板'
  noData: '当前没有配置集群模板。'
  noMatch: 没有集群模板匹配当前搜索。

clusterNew:
  header: 选择集群类型
  advanced:
    helpText: 不要使用 Tabs，Tabs 字符在 yaml 中不能解析。
    cancel: 表单输入
    viewCancel: 表单查看
    yaml: 编辑 YAML
    viewYaml: YAML 查看
  name:
    label: 集群名称
    placeholder: '例如: Sandbox'
    required: 集群名称必须填写
  description:
    placeholder: '例如: 用于开发和测试工作负载的集群'
  driverLabels:
    cloud: Kubernetes 托管服务商
    custom: 添加主机自建 Kubernetes 集群
    import: 导入现有的 Kubernetes 集群
    infra: 来自云服务商提供的主机
    noCloud: 没有启用集群驱动程序。
    noInfra: 没有启用主机驱动程序。
  externalError: '无法加载组件，检查 URL。'
  members:
    label: 成员角色
    detail: 控制哪些用户可以访问集群，以及他们拥有的对其进行更改的权限。
  config:
    label: 供应商
    detail: 选择集群主机的来源
  nodes:
    title: 主机
    detail: 自定义将要创建的主机
  customize:
    title: 集群选项
  kubernetesOptions:
    title: Kubernetes 选项
    detail: 自定义集群功能
  security:
    title: 安全
    detail: 自定义 GKE 服务账号和访问权限
  psp:
    label: 默认的 Pod 安全策略
    prompt: 选择 Pod 安全策略...
    none: 没有配置策略
    required: 启用时需要设置默认 Pod 安全策略
  amazoneks:
    label: AWS 的基于 Kubernetes 的弹性容器服务
    shortLabel: Amazon EKS
    ingressWarning: '注意: 目前 Amazon EKS 不会在启动新的集群时创建传入控制器。如果需要此功能，则必须在集群创建后手动创建一个传入控制器。'
    access:
      title: 账户访问
      detail: 选择将用于启动 Amazon EKS 的区域和 API 密钥
      region: 区域
      next: "下一步: 配置集群"
    clusterOption:
      title: 集群配置选项
      detail: Customize the cluster that will be used to launch EKS Instances
    kubernetesVersion:
      label: Kubernetes 版本
      placeholder: 选择要安装的 Kubernetes 版本
    secretsEncryption:
      label: Secrets Encryption
      disabled: None
      kms: "KMS Key: Select or Enter KMS Key that will be used to encrypt secrets"
      kmsHelpLabel: KMS Key ARN
    tags:
      label: 标签
      addActionLabel: 添加标签
    nodeGroups:
      title: 管理节点组
      detail: 自定义管理节点组
      addLabel: 添加节点组
      noNodes: 没有节点组
    role:
      label: 服务角色
      noneSelected: "Rancher 创建的角色"
      help: "您可以选择不选择服务角色，然后 rancher 将自动为您创建一个服务角色。"
      radio:
        default: "标准: 自动创建服务角色"
        custom: "自定义: 从现有的服务角色中进行选择"
      next: "下一步: 选择 VPC 和子网"
      loading: "从 Amazon 加载vpc..."
    vpc:
      title: VPC & Subnet
      detail: 选择将用于 EKS 实例的 VPC
      next: "下一步: 选择子网"
      loading: "从 Amazon 加载子网…..."
      nextRancherDefault: "下一步: 选择实例选项"
      loadingRancherDefault: "加载实例选项……"
      noneSelected: "Rancher 创建 VPC 和子网"
      radio:
        default: "标准: VPC 和子网自动创建"
        custom: "自定义: 从现有的VPC和子网中选择"
      access:
        public:
          label: 公共访问
        private:
          label: 私有访问
        endpoints:
          label: 公共访问地址
          valueLabel: Endpoints
          addActionLabel: Add Endpoint
          helpBlock: （可选）配置 CIDR IP 对公共访问地址的访问权限。如果您限制对特定 CIDR 段的访问，那么建议您还启用私有访问，以避免失去对集群的网络通信。
    logging:
      title: 日志记录
      detail: "Configure control plane logs to send to Amazon CloudWatch. You are charged the standard CloudWatch Logs data ingestion and storage costs for any logs sent to CloudWatch Logs from your clusters."
      audit:
        label: 审计
        tooltip: "Kubernetes 审计日志记录了影响集群的单个用户、管理员或系统组件的操作事件。"
      api:
        label: API
        tooltip: "集群的 API 服务器是公开 Kubernetes API 控制平面组件。"
      scheduler:
        label: Scheduler
        tooltip: "Scheduler 组件管理任何在集群中运行 Pods。"
      controllerManager:
        label: Controller Manager
        tooltip: "The controller manager manages the core control loops that are shipped with Kubernetes."
      authenticator:
        label: 身份验证
        tooltip: "Authenticator logs are unique to Amazon EKS. These logs represent the control plane component that Amazon EKS uses for Kubernetes Role Based Access Control (RBAC) authentication using IAM credentials."
    subnet:
      title: 子网
      help: EKS requires at least 2 subnets. Subnets should span at least 2 availability zones.
      next: "下一步: 选择安全组"
      loading: "从 Amazon 加载安全组…..."
      noneSelected: "Rancher 创建 VPC、子网和安全组"
    associateWorkerNodePublicIp:
      title: Worker 节点的公共IP
      radio:
        default: Yes
        off: 'No: 只有私有 ip'
    securityGroup:
      title: 安全组
      detail: 选择将应用于EKS实例的安全组
      choose:  选择一个或多个现有组
      defaultExisting: "标准: 使用现有的 <code>{groupName}</code> 组"
      defaultCreate: "标准: 自动创建新的安全组"
      next: "下一步: 设置实例选项"
      loading: 加载实例选项...
    ami:
      label: Custom AMI Override
      help: "您可以根据您的区域重写默认 AMI"
    max:
      label: Maximum ASG Size
    min:
      label: Minimum ASG Size
    desired:
      label: Desired ASG Size
    userData:
      label: User Data
      help: 将用户数据传递给节点以执行自动配置任务
      placeholder: 粘贴脚本
    nodeVolumeSize:
      label: Node Volume Size
      placeholder: e.g. 20
    accessKey:
      label: Access Key
      placeholder: Your AWS access key
    secretKey:
      label: Secret Key
      placeholder: Your AWS secret key
      provided: Provided
    sessionToken:
      label: "Session Token  <em class='text-muted'>Optional</em>"
      placeholder: Your AWS session token
      provided: Provided
    region:
      label: 区域
    import:
      clusterSelect:
        title: 选择集群
        detail: 选择要注册的EKS集群
        select:
          label: 集群注册
        input:
          label: 要注册的集群名
        createLabel: 注册集群
  tencenttke:
    label: 腾讯云 Kubernetes 服务
    shortLabel: Tencent TKE
    access:
      next: '下一步: 配置集群'
      loading: '从腾讯云获取 VPC 信息'
      title: 账户认证
      detail: 选择腾讯云 Kubernetes 服务所使用的区域
    cluster:
      title: 集群配置
      detail: 选择腾讯云 Kubernetes 服务中使用的 VPC 和版本
      next: '下一步: 选择主机类型'
      loading: '从腾讯云获取可用区信息'
    node:
      title: 主机类型
      detail: 选择腾讯云 Kubernetes 服务中使用的主机类型
      next: '下一步: 配置节点'
      loading: '从腾讯云获取节点配置信息'
    instance:
      title: 节点配置
      detail: 配置腾讯云 Kubernetes 服务中的节点
    subnet:
      label: 子网
      required: 请选择子网
    os:
      label: 操作系统
    disk:
      LOCAL_BASIC: Local Basic
      LOCAL_SSD: Local SSD
      CLOUD_BASIC: Cloud Basic
      CLOUD_PREMIUM: Cloud Premium
      CLOUD_SSD: Cloud SSD
    rootSize:
      label: 系统盘大小
      placeholder: '例如: 25'
    rootType:
      label: 系统盘类型
    storageType:
      label: 数据盘类型
    storageSize:
      label: 数据盘大小
      placeholder: '例如: 10'
    bandwidth:
      label: 带宽
      placeholder: '例如: 10'
    nodeCount:
      label: 节点数量
      placeholder: '例如: 3'
      required: 请输入节点数量
      help: 将要创建的腾讯云 Kubernetes 服务中所含有的节点数量
    bandwidthType:
      label: 带宽类型
      hour: 按带宽使用时长计费
      traffic: 按流量计费
    keyPair:
      label: 密钥
      required: 请选择密钥
    region:
      label: 区域
    secretId:
      label: 密钥 ID
      placeholder: 您的腾讯云 API 密钥 ID
      required: 请输入密钥 ID
    secretKey:
      label: 密钥
      placeholder: 您的腾讯云 API 密钥
      provided: 已提供
      required: 请输入密钥
    securityGroup:
      label: 安全组
      required: 请选择安全组
    vpc:
      label: VPC
      required: 请选择 VPC
    version:
      label: Kubernetes 版本
    cidr:
      label: 容器网络 CIDR
      placeholder: '例如: 172.16.0.0/16'
      required: 请输入容器网络的 CIDR
    zone:
      label: 可用区
      required: 请选择可用区
    instanceType:
      label: 实例类型
      required: 请选择实例类型
  azureaks:
    label: Azure 容器服务
    shortLabel: Azure AKS
    ingressWarning: '注意: 目前 Azure AKS 在启动新集群时不会创建一个传入控制器。如果需要此功能，则必须在集群创建后手动创建一个传入控制器。'
    authenticate:
      next: '下一步: 认证 & 配置主机'
    access:
      title: 账户访问
      detail: 配置用于与 Azure 通讯的凭据
      help: '参考<a href="https://docs.microsoft.com/en-us/azure/aks/kubernetes-service-principal" target="_blank">链接文档</a>创建客户端 ID 和秘钥。'
    placement:
      label: 位置
    count:
      label: 主机数量
      placeholder: "例如: 1"
    location:
      label: 位置
      prompt: 选择位置...
    accountAccessSection:
      label: 账户访问
    subscriptionId:
      label: 订阅 ID
      placeholder: Azure 订阅 ID
    machineType:
      label: VM 规格
      prompt: 选择规格...
    diskSizeGb:
      label: OS 磁盘大小
      placeholder: '例如: 100'
    dns:
      label: DNS 前缀
      placeholder: '例如: example'
    ssh:
      label: 公共密钥
      placeholder: "粘贴 SSH 公钥"
    security:
      label: 安全
    members:
      label: 成员角色
    pod:
      label: Pod 安全策略
    kubernetesVersion:
      label: Kubernetes 版本
      prompt: 选择版本...
    admin:
      label: 管理员名称
      placeholder: user-1
    tenant:
      label: 租户 ID
      placeholder: Azure 租户 ID
    image:
      label: 镜像
      placeholder: '推荐: Ubuntu Server:18.04-LTS:latest'
    size:
      label: 规格
    dockerPort:
      label: Docker 端口
      placeholder: '2376'
    publishSettingsFile:
      label: 发布配置
      placeholder: 发布配置文件
    environment:
      label: 环境
    resourceGroup:
      label: 资源组
      placeholder: 'docker-machine'
      helpText: '使用已有的资源组或者输入新的资源组名称。注意: 如果使用的资源组内已经存有 AKS 集群的话，将会创建新的资源组，Azure AKS 只允许一个资源组有一个 AKS 集群。'
    networking:
      label: 网络
      default: 默认
      advanced: 高级
      networkPlugin:
        label: 网络插件
        prompt: 选择网络插件
      vnet:
        label: '虚拟网络-子网(子网 CIDR)'
        prompt: '选择虚拟网络/子网'
      vnetresourcegroup:
        label: 虚拟网络资源组
        prompt: 请选择虚拟网络
        help:  The Resource Group if your Virtual Network does not exist in the same Resource Group as your cluster.
      subnet:
        label: 子网
      serviceCidr:
        label: Kubernetes Service IP 范围
        help: 'CIDR 表示用于分配给 service cluster 的 IP 范围，它不得与任何子网 IP 范围相同。例如: 10.0.0.0/16.'
        prompt: '10.43.0.0/16'
      dnsServiceIp:
        label: Kubernetes DNS 服务 IP 地址
        help: "分配给 Kubernetes DNS 服务的 IP 地址，它必须在 Kubernetes 服务地址范围内。例如: 10.0.0.10."
        placeholder: "例如: 10.0.0.10"
      dockerBridgeCidr:
        label: Docker bridge 地址
        help: '分配给 Docker Bridge 的 IP 地址和网络掩码，它不能位于任何子网 IP 范围或 Kubernetes 服务地址范围内。例如: 172.17.0.1/16.'
        placeholder: '例如: 172.17.0.1/16'
      podCidr:
        label: Kubernetes pod 地址范围
        help: '一个 IP 范围，用于分配 Pod IP。例如: 172.244.0.0/16'
        placeholder: '例如: 172.244.0.0/16'

    sshUser:
      label: SSH 用户
      placeholder: usr1
    storageType:
      label: 存储类型
    vnet:
      label: VNet
      placeholder: '[resourcegroup: ]名称'
    subnet:
      label: 子网
      placeholder: 示例-子网名称
    subnetPrefix:
      label: 子网前缀
      placeholder: '128.42.0.0/21'
    availabilitySet:
      label: 可用性集
      placeholder: 可用集名称
    openPort:
      label: 开放端口
      placeholder: '逗号分隔，例如: 80,443'
    privateIpAddress:
      label: 私有 IP
      placeholder: '127.0.0.1'
    usePrivateIp:
      label: 使用私有 IP 连接
    staticPublicIp:
      label: 公网 IP
    noPublicIp:
      label: 无公网 IP
    clientId:
      label: 客户端 ID
      placeholder: 客户端 ID
    clientSecret:
      label: 客户端秘钥
      placeholder: 客户端秘钥
    region:
      label: 区域
    enableHttpApplicationRouting:
      label: HTTP 应用程序路由
    enableMonitoring:
      label: 监控
    networkPolicy:
      label: 网络策略
      placeholder: 选择网络策略
    tags:
      label: 标签
      addActionLabel: 添加标签
    errors:
      included:
        serviceCidr: 'Kubernetes 服务地址范围必须是有效的 CIDR 格式。'
        dnsServiceIp: 'Kubernetes DNS 服务 IP 地址必须是有效的 IP 地址。'
        dockerBridgeCidr: 'Docker bridge 地址必须是有效的 CIDR 格式。'
        parsedServiceCidr: 'Kubernetes 服务地址范围必须在选定的虚拟网络范围内。'
        parsedDnsServiceIp: 'Kubernetes DNS 服务 IP 地址必须在 Kubernetes 服务地址范围内。'
        parsedDockerBridgeCidr: 'Docker bridge 地址不能与选定的虚拟网络或 Kubernetes 服务地址相同'
  aliyunack:
    shortLabel: Alibaba ACK
  googlegke:
    label: Google Kubernetes 引擎
    shortLabel: Google GKE
    checkServiceAccount: '下一步: 配置主机'
    checkingServiceAccount: 认证
    credential:
      label: 服务账号
      placeholder: 服务帐号私钥 JSON 文件
      configured: 为 {project} 项目配置
      helpText: |
        "创建拥有 JSON 私钥的<a href="https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts" target="_blank" rel="nofollow noopener noreferrer">Service Account</a>，并在此处提供 JSON。有关创建服务帐户的更多信息，请参阅<a href="https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances" target="_blank" rel="nofollow noopener noreferrer">Google Cloud 文档</a> 。需要四个 IAM 角色: Compute Viewer (<code>roles/compute.viewer</code>)，(Project) Viewer (<code>roles/viewer</code>)，Kubernetes Engine Admin (<code>roles/container.admin</code>)和 Service Account User (<code>roles/iam.serviceAccountUser</code>)，更多关于角色的信息可在<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/iam-integration" target="_blank" rel="nofollow noopener noreferrer">此处</a>找到。<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/iam-integration" target="_blank" rel="nofollow noopener noreferrer">"
    zone:
      label: 区域
      prompt: 选择区域...
    project:
      label: 项目
      placeholder: '例如: My-project'
    locationType:
      label: 位置类型
      zone: Zonal
      region: 区域
    region:
      label: 区域
      prompt: 选择区域...
    machineType:
      label: 虚拟机类型
      prompt: 选择类型...
    nodeCount:
      label: 主机数量
      prompt: 选择类型...
      required: 需要节点计数
      outsideError: '节点池中指定的节点数超出了指定的自动伸缩限制'
    diskSizeGb:
      label: 根磁盘大小
    masterVersion:
      label: Kubernetes 版本
      prompt: 选择版本...
      warning: 当您用 GKE 升级 Kubernetes 版本时，只有主 master 节点会被升级。如果您也想升级 worker 节点，则需要通过谷歌云平台手动升级。
    clusterIpv4Cidr:
      label: 容器地址范围
      placeholder: '例如: 10.42.0.0/16'
    alphaFeatures:
      label: Alpha 功能
    legacyAuth:
      label: 废弃的认证
    stackDriverLogging:
      label: Stackdriver 日志
    stackdriverMonitor:
      label: Stackdriver 监控
    dashboard:
      label: Kubernetes 仪表盘
    httpLB:
      label: Http 负载均衡
    maintenanceWindow:
      label: 维护窗口
    enableHorizontalPodAutoscaling:
      label: Pod 自动横向伸缩
    enableNodepoolAutoscaling:
      label: 节点池自动横向伸缩
    minNodeCount:
      label: 最小节点数
      required: 最小节点数必须填写
    maxNodeCount:
      label: 最大节点数
      minError: 最大节点数应大于最小节点数
      required: 最大节点数必须填写
    masterAuthUsername:
      label: 主节点认证用户名
      placeholder: 主节点认证用户名
      required: 主节点认证用户名必须填写
    masterAuthPassword:
      label: 主节点认证密码
      placeholder: 主节点认证密码
      required: 主节点认证密码必须填写
    issueClientCertificate:
      label: 主节点认证
    enableMasterAuthorizedNetwork:
      label: 主节点认证网络
    enablePrivateEndpoint:
      label: 使用内部 IP 地址访问主节点
    enablePrivateNodes:
      label: 专用集群
    masterIpv4CidrBlock:
      label: Master IP 范围
      placeholder: '例如: 10.42.0.0/28'
    useIpAliases:
      label: 使用 Ip 别名
    ipPolicySubnetworkName:
      label: 子网名称
      placeholder: 子网名称
    ipPolicyCreateSubnetwork:
      label: 创建子网
      autoLabel: 自动创建子网
    ipPolicyClusterSecondaryRangeName:
      label: Cluster Secondary Range Name
      placeholder: Your Cluster Secondary Range Name
    ipPolicyServicesSecondaryRangeName:
      label: Services Secondary Range Name
      placeholder: Your Services Secondary Range Name
    ipPolicyClusterIpv4CidrBlock:
      label: Pod 地址范围
      placeholder: '例如: 10.96.0.0/11'
    ipPolicyNodeIpv4CidrBlock:
      label: 节点 Ipv4 CIDR 地址
      placeholder: 节点 Ipv4 CIDR 地址
    masterAuthorizedNetworkCidrBlocks:
      label: Master 授权网络 CIDR 地址
      placeholder: Master 授权网络 CIDR 地址
      addActionLabel: 添加 CIDR 地址
    ipPolicyServicesIpv4CidrBlock:
      label: 服务地址范围
      placeholder: '例如: 10.94.0.0/18'
    header:
      iPAllocationPolicy: IP 分配策略
      privateCluster: 私有集群
      masteAuth: Master Auth
      nodePoolAutoscaling: 主机池自动伸缩
      masterAuthorizedNetwork: Master 授权网络
    locations:
      label: 附加区域
    imageType:
      label: Image 类型
      UBUNTU: Ubuntu
      COS: Container-Optimized OS
    network:
      label: 网络
    subNetwork:
      label: 主机子网
    nodeLabels:
      label: 主机标签
      addAction: 添加标签
    clusterLabels:
      label: 集群标签
    localSsdCount:
      label: 本地 SSD 磁盘数量
    diskType:
      label: 根磁盘类型
      pd-standard: 标准持久磁盘
      pd-ssd: SSD 持久磁盘
    preemptible:
      label: 可抢占的节点（测试版）
    enableAutoUpgrade:
      label: 自动升级
    enableAutoRepair:
      label: 自动修复
    serviceAccount:
      label: 服务帐号
    oauthScopes:
      label: 访问权限范围
      default: 允许默认访问权限
      full: 允许所有 Cloud API 的全面访问权限
      custom: 针对每个 API 设置访问权限
    userInfo:
      label: 用户信息
    computeEngine:
      label: 计算引擎
    storage:
      label: 存储
    taskQueue:
      label: 任务队列
    bigQuery:
      label: BigQuery
    cloudSQL:
      label: Cloud SQL
    cloudDatastore:
      label: Cloud Datastore
    stackdriverLoggingAPI:
      label: Stackdriver Logging API
    stackdriverMonitoringAPI:
      label: Stackdriver Monitoring API
    cloudPlatform:
      label: 云平台
    bigtableData:
      label: Bigtable 数据
    bigtableAdmin:
      label: Bigtable 管理员
    cloudPub:
      label: 'Cloud Pub/Sub'
    serviceControl:
      label: 服务控制
    serviceManagement:
      label: 服务管理
    stackdriverTrace:
      label: Stackdriver Trace
    cloudSourceRepositories:
      label: Cloud Source Repositories
    cloudDebugger:
      label: 云调试器
    taints:
      label: 污点
      addAction: 添加污点
      effect:
        label: 影响
      key:
        label: 键
        placeholder: Key
      value:
        label: 值
        placeholder: Value
      required: '污点的 "key"和"value"必须设置.'
    tablesOnly: Tables Only
  rke2:
    label: Rancher RKE Federal
    shortLabel: RKE Federal
  k3simport:
    label: Rancher K3S
    shortLabel: K3S
    errors:
      concurrency:
        negative: 只有非负和非零的并发值是有效的。
  huaweicce:
    label: 华为云容器引擎
    shortLabel: Huawei CCE
    name:
      label: 集群名称
      required: 集群名称必须填写
    access:
      title: 帐户访问
      detail: 选择用于启动华为云容器引擎的区域和 API KEY。
    accessKey:
      label: 访问密钥 ID
      placeholder: CCE 访问密钥 ID
      help: 创建访问密钥 ID 参考<a href="https://support.huaweicloud.com/usermanual-ca/zh-cn_topic_0046606340.html" target="_blank">这里</a>。
    secretKey:
      label: 访问密钥
      placeholder: CCE 访问密钥
      help: 获取访问密钥参考<a href="https://support.huaweicloud.com/usermanual-ca/zh-cn_topic_0046606340.html" target="_blank">这里</a>。
    projectId:
      label: 项目 ID
      placeholder: CCE 项目 ID
      help: 获取项目 ID 参考<a href="https://support.huaweicloud.com/usermanual-ca/zh-cn_topic_0046606344.html" target="_blank">这里</a>。
      required: 项目 ID 必须填写
    region:
      label: 区域
      helpText: 获取区域参考<a href="https://developer.huaweicloud.com/endpoint" target="_blank">这里</a>。
      required: 区域必须填写
    business:
      label: 业务
    checkAccount: '下一步: 配置集群'
    checkingAccount: 用户校验中...
    configureNode: '下一步: 配置节点'
    configuringNode: 配置中...
    clusterOption:
      title: 集群选项
      detail: 为集群自定义 Kubernetes 选项
    clusterType:
      label: 集群类型
    clusterFlavor:
      label: Cluster Flavor
    masterVersion:
      label: 版本
    vpcId:
      label: 虚拟私有云
    subnetId:
      label: 所在子网
      none: 无可用子网
    highwaySubnet:
      label: 高速网卡
      placeholder: 高速子网
      none: 没有高速子网被使用
    nodeOption:
      title: 节点选项
      detail: 为节点自定义选项
    dataVolumeType:
      label: 数据盘类型
    dataVolumeSize:
      label: 数据盘大小
    description:
      label: 描述
      placeholder: '例如: 华为 CCE 集群'
    eipBandwidthSize:
      label: 带宽
    eipChargeMode:
      label: 计费模式
    eipCount:
      label: 数量
    availableZone:
      label: 当前区域
    billingMode:
      label: 计费模式
      payPerUse: 按需计费
      yearly: '包年/包月'
    containerNetworkCidr:
      label: 容器网段
      placeholder: '例如: 172.16.0.0/16'
    containerNetworkMode:
      label: 网络模型
      none: 无配置
    rootVolumeType:
      label: 系统盘类型
    rootVolumeSize:
      label: 系统盘大小
    nodeCount:
      label: 节点个数
    nodeFlavor:
      label: 节点规格
    ssh:
      label: 密钥对
    eip:
      label: 弹性 IP
    eipSelection:
      none: 暂不使用
      new: 创建新的
      exist: 使用已有
    eipIds:
      label: 弹性 IP
      none: 无可用弹性 IP
    eipType:
      label: Eip 类型
    clusterLabels:
      label: 集群标签
      none: 无标签
    nodeLabels:
      label: 主机标签
    clusterEipId:
      label: Cluster Eip
      prompt: 选择 Eip...
    externalServerEnabled:
      label: 外部服务器
      enabled: 启用 - 只支持内网
      disabled: 禁用 - CCE 集群将部署在 Rancher 所在的 VPC
    highAvailability:
      label: 高可用
    managementScale:
      label: 集群管理规模
    nodeOperationSystem:
      label: 操作系统
    authenticatingProxyCa:
      label: CA 根证书
    validityPeriod:
      label: 有效期
    bmsIsAutoRenew:
      label: 自动更新
    loginMode:
      label: 登录方式
      password: 密码
      keyPair: 密钥对
    password:
      label: 密码
      placeholder: 请输入密码
    userName:
      label: 用户名
    authentiactionMode:
      label: 认证模式
      rbac: RBAC
      authenticating_proxy: 认证代理
    eipShareType:
      label: EIP Share Type
  oracleoke:
    label: Oracle Container Engine long
    shortLabel: Oracle OKE
    access:
      next: "Next: Authenticate & Configure Cluster"
      loading: Loading values from Oracle Cloud Infrastructure
      title: Choose the region and API Key that will be used to authenticate and configure Oracle Container Engine.
      detail: Choose the region and API Key that will be used to authenticate and configure Oracle Container Engine.
    region:
      label: Region
    tenancyOCID:
      label: Tenancy OCID
      placeholder: The OCID of the tenancy in which to create resources
      required: Tenancy OCID is required
    compartmentOCID:
      label: Compartment OCID
      placeholder: The OCID of the compartment in which to create the resources
      required: Compartment OCID is required
    userOcid:
      label: User OCID
      placeholder: The OCID of a user who has access to the specified tenancy/compartment
      required: Tenancy OCID is required
    userFingerprint:
      label: User fingerprint
      placeholder: The fingerprint corresponding to the specified user's private API Key
      required: User private key fingerprint is required
    secretKey:
      label: User Private Key
      placeholder: The private API key contents for the specified OCI user, in PEM format
      provided: Provided
      required: User Private API Key is required
    secretKeyPassphrase:
      label: User Private Key Passphrase
      placeholder: The passphrase (if any) that protects private key file the specified OCI user
      provided: Provided
    cluster:
      title: Cluster Configuration
      detail: Choose the Kubernetes version and the number of nodes per availability-domain for the cluster.
      next: "Next: Configure Virtual Cloud Network"
      loading: Loading VCNs from Oracle Cloud Infrastructure
    vcn:
      title: Virtual Cloud Network
      detail: Configure the virtual cloud network that will be used for your Kubernetes cluster.
      label: Virtual Cloud Network
      required: VCN is required
    version:
      label: Kubernetes Version
      required: Kubernetes Version is required
    cidr:
      label: Virtual Cloud Network CIDR
      placeholder: e.g. 172.16.0.0/16
      required: Virtual Cloud Network CIDR is required
      error: Virtual Cloud CIDR format error
    existingVCNDetails:
      compartmentOCID: OCID of the VCN's compartment
      compartmentOCIDPlaceholder: e.g. ocid1.compartment.oc1..aaaaaaaa...
      compartmentOCIDHelp: leave blank if it's the cluster compartment
      vcnName: Name of the pre-existing VCN
      vcnNamePlaceholder: e.g. my-vcn
      lbSubnetName1: Name of first pre-existing LB subnet
      lbSubnetName1Placeholder: e.g. my-lb-sub-1
      lbSubnetName2: Name of second pre-existing LB subnet (if applicable)
      lbSubnetName2Placeholder: e.g. my-lb-sub-2
    quantityPerSubnet:
      label: Nodes Per AD Count
      placeholder: e.g. 1
      required: Nodes per availability-domain is required
      help: The quantity of nodes nodes to run in each availability domain in the region
      error: The count of nodes should not be greater than {max}
    nodeShape:
      label: Instance Shape'
      required: Instance Shape is required
    nodeSSHKey:
      label: SSH public key for nodes
      placeholder: Optional SSH public key for the nodes
    instanceConfig:
      label: Instance Configuration(CPU/Memory)
      gpuLabel: Instance Configuration(CPU/Memory/GPU Type/GPU Count)
      required: Instance Configuration is required
    subnet:
      label: Subnet Access
      required: Subnet access is required
    node:
      title: Node Type
      detail: Choose the node type that will be used for this Kubernetes cluster
      next: "Next: Configure Node Instances"
      loading: Loading configuration from Oracle Cloud Infrastructure
    instance:
      title: Node Instance Configuration
      detail: Configure the instance that will be used as nodes in the cluster.
    os:
      label: Operating System
    storageType:
      label: Default Persistent Volume Disk Type
    storageSize:
      label: Default Persistent Volume Disk Size
      placeholder: e.g. 10
      error: Default Persistent Volume Disk Size should be greater than 0
    localDisk:
      label: Local Disk
      placeholder: size GB
    subnetAccessOptions:
      quick: Quick Create
      custom: Custom Create
      existing: Existing

  rke:
    upgradeStrategy:
      maximumWorkersDown:
        view:
          count: "{value}"
          percentage: "{value}%"
        label: 最大不可用 Worker 节点数
        placeholder: '例如: 6'
        mode:
          percentage: 百分比
          count: 台数
      drainNodes:
        label: 节点驱逐（升级节点之前，是否先驱散节点 Pod）
    clustersSelectTemplate:
      label: "使用现有的集群模板和修订"
      select:
        label: 集群模板
        prompt: 选择集群模板
    clustersSelectTemplateRevision:
      select:
        prompt: 选择一个集群模板修订
        default: '{name} - Default (Created {ago})'
        other: '{name} (Created {ago})'
    cisScan:
      scheduled:
        enabled:
          label: 启用 CIS 扫描
        interval:
          label: CIS 定时扫描间隔
          placeholder: '例如: 0 0 * * *'
        retention:
          label: CIS 扫描报告保留副本数
        profile:
          label: CIS 扫描配置文件

    etcd:
      enabled:
        label: Etcd 备份轮换
      backupConfig:
        legacy: "当前集群配置了废弃的 ectd 快照设置。新的设置将创建时间和保留持续时间替换为更简单的创建时间(以小时和保留计数为单位)。系统已自动迁移了您的创建周期，保留计数已配置为默认的 6 个备份(当前保留时间:{duration})，如果您不介意这个设置，那不需要进一步的操作，您也可以在高级设置中更改此设置。"
        retention:
          label: 备份副本
          placeholder: "12"
          prefix: 份数
        interval:
          label: 备份周期
          placeholder: "6"
        bucketName:
          label: S3 Bucket Name
          placeholder: "backups"
        region:
          label: S3 Region
          placeholder: "us-west-2"
        endpoint:
          label: S3 Region Endpoint
          placeholder: "例如: s3.us-west-2.amazonaws.com"
        folder:
          label: S3 Folder
          placeholder: "例如: cluster-backup"
        accessKey:
          label: Access Key
          placeholder: Your AWS access key
        secretKey:
          label: Secret Key
          placeholder: Your AWS secret key
          provided: Provided
        customCa:
          label: 自定义 CA 证书
          placeholder: "粘贴证书和必要的链证书, 以-----BEGIN CERTIFICATE-----开始"
      location:
        label: Etcd 备份存储
        s3:
          label: s3
          help: 'Etcd 将在本地生成备份，随后将备份拷贝到 s3 存储。'
        local:
          label: local
          help: Etcd 备份只保存在本地，不执行外部存储
      heartbeat:
        label: Etcd 心跳间隔时间
        placeholder: 心跳间隔时间
      election:
        label: Etcd 选举超时时间
        placeholder: 选举超时时间
      snapshot:
        label: Etcd 快照轮换
      retention:
        label: Etcd 快照有效期
        placeholder: "12h"
        help: "可用的时间单位: h, m, s"
      creation:
        label: 快照创建周期
        placeholder: "6h"
      error: "快照 {type} 周期错误: 必须指定一个时间值和时间单位(s、m、h)，当前输入 {entry}"
    nodeName:
      title: 节点名称
      detail: (可选)自定义节点显示的名称，不显示实际的主机名
      placeholder: '例如: My-worker-node'
    address:
      title: 主机地址
      detail: 为主机配置公网地址和内网地址, 如果为 VPC 网络的云服务器，如果不指定公网地址节点将无法获取到对应公网 IP。
      warning: 这似乎不是有效的 IP 地址
      public:
        label: 公网地址
        placeholder: '例如: 1.2.3.4'
      private:
        label: 内网地址
        placeholder: '例如: 1.2.3.4'
    label: '{appName}Kubernetes 引擎'
    shortLabel: 自定义
    customize:
      label: 集群选项
      detail: '自定义 Kubernetes 集群选项'
    labels:
      title: 主机标签
      detail: （可选）添加到节点的标签
    taints:
      title: 节点污点（Taints）
      detail: （可选）添加到节点的污点（taints）
    nodes:
      title: 主机池
      detail: 配置集群需要的主机节点
      add: 添加主机池
      addTemplate: 添加主机模板
      templatePrompt: '选择模板...'
      myTemplatesGroup: "我的模板"
      othersTemplatesGroup: "其他模板"
      hostnamePrefix: 主机池名称前缀
      count: 数量
      template: 主机模板
      deleteNotReadyAfterSecs: 自动替换
      deleteNotReadyAfterSecsTooltip: '如果大于 0，那么长时间无法访问的节点将被自动删除和替换。'
      taints: Taints
    detected: |
      {count, plural,
      =1{#台新主机注册成功 }
      other{#台新主机注册成功 }
      }
    clusterTempalteMissing: Cluster Template Enforcement is enabled, and you do not have access to the template required to edit this cluster. Please speak to your admin.
    done: 完成
    info:
      text: 编辑主机选项将更新主机注册命令
    command:
      instructions: '复制以下命令在主机的 SSH 终端运行。'
      winInstructions: '在一台或者多台运行了受支持的 Docker 版本的主机上运行<code>CMD</code>命令，并且 windows server 版本大于<code class="code-version">{version}</code>.'
    auth:
      label: 认证提供者
      x509: x509
    serviceNodePortRange:
      label: NodePort 范围
      placeholder: '例如: 30000-32767'
    network:
      title: 网络驱动
      detail: 为集群配置网络驱动
      label: 网络驱动
      flannel: Flannel
      flannelCustom: Flannel
      calico: Calico
      canal: Canal (支持网络隔离)
      weave: Weave
      flannelBackends:
        label: Flannel Backend
        hostgw: Host Gateway (L2bridge)
        vxlan: VXLAN (Overlay)
      options:
        flannel:
          iface:
            label: 接口
        canal:
          iface:
            label: 接口
        calico:
          cloudProvider:
            label: 云提供商
      type:
        info: '仅支持 host-gw 后端'
    ingress:
      label: Nginx Ingress
    monitoring:
      label: 监控指标
    networkPolicy:
      label: 项目网络隔离
    networkMTU:
      label: 容器网卡 MTU
      help: "自定义容器网卡 MTU 值。默认网络传输的 MTU 为 1500，对于有些网络驱动(比如 canal)，由于使用 vxlan 后端，会有 50bit 用于传输 vxlan 的 tag，所以在主机上创建的网桥 flannel.1 的 MTU 值是 1450。而默认创建的容器网卡 MTU 值是 1500，为了对应网桥 flannel.1 的 MTU 值，可通过这个参数来自定义容器网卡的 MTU 值。"
      detail: '例如: 1500'
    version:
      label: Kubernetes 版本
    registry:
      label: 从以下仓库拉取 Kubernetes 镜像
      default: 默认的镜像仓库（DockerHub）
      custom: "自定义镜像仓库"
      url:
        label: URL
        placeholder: '例如: quay.io'
      user:
        label: 用户名
      password:
        label: 密码
    ignoreDockerVersion:
      label: 主机 Docker 版本
      enabled: 允许不受支持的版本
      disabled: 需要支持的版本
    podSecurityPolicy:
      label: Pod 安全策略(需先在全局下创建 Pod 策略)
    role:
      pageheader: 添加主机命令
      sectionheader: 主机选项
      title: '角色选择（每台主机可以运行多个角色。每个集群至少需要一个 Etcd 角色、一个 Control 角色、一个 Worker 角色）'
      detail: '选择主机角色,端口放行请参考: https://rancher.com/docs/rancher/v2.x/en/installation/references/'
      header:
        etcd: Etcd
        controlplane: Control
        worker: Worker
      requirements:
        label: "所需主机个数: "
        etcd: '1,3 或 5'
        controlplane: '1 或更多'
        worker: '1 或更多'
    helptext: 更改的主机模板只会影响新创建的节点。
    kubeApi:
      label: Kube API
      ipRange: 服务集群 IP 范围
      podSecurityPolicy: Pod 安全策略
    kubeController:
      label: Kube 控制器
      cidr: 集群 CIDR
      ipRange: 服务集群 IP 范围
    kubelet:
      label: Kubelet
      domain: 集群域
      dns: 集群 DNS 服务器
    warning:
      etcd:
        even: '设置 {count} 个 etcd 主机是对硬件的浪费，因为它不会增加仲裁，除非它是奇数。'
        noEtcd: 至少需要一个 etcd 主机。
      aws:
        iam: '使用 Amazon Cloud Provider 时，应在节点模板中配置 IAM 角色名称'
    errors:
      etcd: 请选择 1 个，3 个或 5 个主机用于 etcd。
      controlPlane: 请至少选择一个用于 management 角色的主机。
      worker: 请至少选择一个用于 worker 角色的主机。
    dockerRootDir:
      placeholder: "{dir} 是默认目录"
    system:
      title: 主机操作系统
      detail: 将添加到集群的主机的操作系统
      linux: Linux
      windows: Windows
    windowsSupport:
      label: Windows 支持
      help: 适用于 Kubernetes 1.14 与 Flannel 网络提供商。
      disabled: 不支持 {plugin} 网络提供商。
    advanced:
      label: 高级集群选项
      detail: 自定义集群参数。
    authorizedEndpoint:
      title: 授权集群访问地址
      detail: '授权集群访问地址可用于直接访问 Kubernetes API SERVER，绕过 Rancher API 代理。'
      label: 授权集群访问地址
  register:
    title: 使用现有的 Kubernetes 集群
    label: 注册
    shortLabel: 已注册
    helpBlock: 注册现在的 Rancher、<a href='https://k3s.io/' target='_blank' rel='nofollow noreferrer'>K3s</a> 或者 EKS 集群。
  custom:
    title: 创建新的 Kubernetes 集群
    subtitle: 使用 RKE 和现有节点
    label: 从现有节点(自定义)
    shortLabel: 自定义
    helpBlock: 使用 RKE 从现有的裸金属服务器或虚拟机中创建一个新的 Kubernetes 集群。
  import:
    label: 导入
    shortLabel: 导入
    helpBlock: 导入现有的 Kubernetes 集群。Kubernetes 集群的管理和配置继续由原提供商负责。
    command:
      instructionsAdminRole: "<b>注意: </b> 如果想要导入 Google Kubernetes Engine(GKE) 集群（或一些不提供绑定集群管理角色<b>cluster-admin</b>的 kubectl 配置文件的集群）, 需要通过以下命令来绑定集群管理角色<b>cluster-admin</b>。 用您的谷歌帐户地址替换<b>[USER_ACCOUNT]</b>（您可以使用<b>gcloud config get-value account</b>检索这个地址）。如果您不是导入谷歌 Kubernetes 集群，那么用 kubectl 配置文件中配置的执行用户替换<b>[USER_ACCOUNT]</b>。"
      instructions: '在现有的受支持的 Kubernetes 集群上运行下面的 kubectl 命令，将其导入 {appName}: '
      instructionsInsecure: "如果由于您的 {appName} 安装使用不受信任/自签名的 SSL 证书而出现 由未知权限签名的证书 错误，请运行下面的命令以绕过证书检查: "
    select:
      other:
        title: Rancher or K3s
        helpBlock: "注册现在的 Rancher or <a id='k3s-info-external-link' href='https://k3s.io/' target='_blank' rel='nofollow noreferrer'>K3s</a> 支持的集群。"
      eks:
        title: Amazon EKS
        helpBlock: "注册现有的 Amazon EKS 集群。"
  importEks:
    label: 注册现有的Amazon EKS集群
    shortLabel: 已注册
    helpBlock: "注册一个现有的 Amazon EKS Kubernetes 集群。"

clusterTemplateNew:
  members:
    label: 成员角色
    detail: 控制谁有权访问集群模板，以及他们有什么权限来更改它。

cruClusterTemplate:
  infoBanner: 模板只允许为 RKE 集群保存和重用配置选项。
  name:
    label: '模板名称'
  revisionName:
    label: '模板修订名称'
    help: '不是必须，但建议使用描述性名称，以帮助轻松定位正确的修订。'
  source:
    label: 'Source Revision'
  default:
    label: '默认修订版本'
  members:
    label: '共享模板'
    detail: '与单个成员共享此集群模板，或将其公开给组织。这将影响此集群模板中的所有模板修订。'
  edit:
    label: '编辑集群模板'
  selectRevision:
    label: '选择默认修订'

cruDestinationRule:
  title:
    new: 添加目标规则
    edit: 编辑目标规则
    view: "目标规则: {name}"
  port:
    label: Port
    placeholder: '例如: 8080 or myport'
  host:
    error: 主机是必需的。
  name:
    placeholder: '例如: myrule'
  loadBalancer:
    label: Load Balancer
    detail: 配置负载平衡器算法
    simple:
      label: 使用标准的负载平衡算法
      roundRobin:
        label: 轮询
      leastConn:
        label: 最小请求
      random:
        label: 随机
      passthrough:
        label: 透传
    consistentHash:
      label: 使用一致的基于散列的负载平衡实现软会话关联
      httpHeaderName:
        label: HTTP Header 名称
        placeholder: '例如: end-user'
        error: 必须设置 HTTP Header 名称。
      minimumRingSize:
        label: Minimum Ring Size
        placeholder: '例如: 1024'
      httpCookie:
        name:
          label: Cookie 名称
          placeholder: '例如: username'
          error: 需要 Cookie 名称。
        path:
          label: Cookie 路径
          placeholder: '例如: /'
        ttl:
          label: TTL
          placeholder: '例如: 0s'
          error: TTL 是必需的。
      mode:
        label: Hash 模式
        header:
          label: 基于特定 HTTP 头的哈希
        cookie:
          label: 基于 HTTP cookie 的 Hash
        sourceIp:
          label: 基于源 IP 地址的哈希
  connectionPool:
    label: 连接池
    detail: 配置到上游服务的连接量
    http1MaxPendingRequests:
      label: HTTP1 最大等待请求
      placeholder: '例如: 1024'
      help: 到目标端的最大请求等待数
    http2MaxRequests:
      label: HTTP2 最大等待请求
      placeholder: '例如: 1024'
      help: 到后端请求的最大数量。
    maxRequestsPerConnection:
      label: 每个连接的 HTTP 最大请求
      placeholder: '例如: 10'
      help: 到后端连接的每个连接的最大请求数。将此参数设置为 1 将禁用 keep alive。
    maxRetries:
      label: HTTP 最大重试
      placeholder: '例如: 1024'
      help: 在给定时间内，集群中所有主机都可以执行的最大重试次数。
    connectTimeout:
      label: TCP 连接超时
      placeholder: '例如: 30ms'
      help: TCP 连接超时。
    maxConnections:
      label: TCP 最大连接数
      placeholder: '例如: 1024'
      help: '到目标主机的 HTTP1/TCP 连接的最大数量。'
  outlierDetection:
    label: 异常值检测
    detail: 配置从负载平衡池中移除不健康主机
    baseEjectionTime:
      label: 基本驱逐时间
      placeholder: '例如: 30s'
      help: 最小驱逐时间. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected.
    consecutiveErrors:
      label: 连续错误
      placeholder: '例如: 5'
      help: 从连接池中弹出主机之前的错误数。
    interval:
      label: 时间间隔
      placeholder: '例如: 10s'
      help: Time interval between ejection sweep analysis.
    maxEjectionPercent:
      label: 最大驱逐百分比
      placeholder: '例如: 10'
      help: Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
  subsets:
    label: Subsets
    noSubsets: No Subsets
    addSubsetLabel: Add Subset
    removeSubsetLabel: Remove Subset
    name:
      label: Name
      placeholder: '例如: v1'
      error: 子网名称需要设置.
    labels:
      error: 请为子集至少设置一个标签。
  tls:
    label: TLS
    detail: 为连接到上游服务配置 TLS 相关设置
    mode:
      label: TLS 模式
      none:
        label: 无
      istio:
        label: Istio Mutual - 通过 Istio 实现与上游的双向安全连接
      disable:
        label: 禁用-不要设置到上游端点的 TLS 连接
      simple:
        label: 简单-创建到上游端点的 TLS 连接
      mutual:
        label: Mutual - 通过提供客户端证书进行身份验证，使用双向 TLS 安全连接到上游
    clientCertificate:
      label: 客户端证书(Client certificate)
      placeholder: '例如: /etc/certs/myclientcert.pem'
      error: 必须设置客户端证书。
    privateKey:
      label: 私钥(private key)
      placeholder: '例如: /etc/certs/client_private_key.pem'
      error: 必须设置私钥。
    caCertificates:
      label: CA 证书(CA certificate)
      placeholder: '例如: /etc/certs/rootcacerts.pem'
    sni:
      label: SNI
      placeholder: '例如: nginx.example.com'
    subjectAltNames:
      label: Subject Alternative Names
      placeholder: '例如: example.com'
      add: Add Subject Alternative Name

clusterTemplateQuestions:
  label: '集群默认应答参数'
  detail: '希望为最终用户提供的默认应答参数和默认值。'
  table:
    question: '参数'
    answer: '默认值'
    type: '类型'
    required: '必须'
    noMatch: '没有默认参数匹配当前搜索'
    noData: '没有默认参数'
  schemaLabels:
    defaultClusterRoleForProjectMembers: '项目成员的默认集群角色'
    defaultPodSecurityPolicyTemplateId: '默认 Pod 安全策略模板 Id'
    desiredAgentImage: '需要的 Agent 镜像'
    desiredAuthImage: '需要的 Auth 镜像'
    dockerRootDir: 'Docker 根目录'
    enableClusterAlerting: '启用集群告警'
    enableClusterMonitoring: '启用集群监控'
    enableNetworkPolicy: '启用网络策略'
    localClusterAuthEndpoint: '启用本地集群 Auth 端点'
    caCerts: 'CA 证书'
    fqdn: 'FQDN'
    addonJobTimeout: '附加组件安装超时'
    addons: '附加组件'
    addonsInclude: 'Addons Include'
    authentication: '身份验证'
    authorization: '授权'
    bastionHost: '堡垒主机'
    cloudProvider: '云供应商'
    dns: 'DNS 配置'
    ignoreDockerVersion: '忽略 Docker 版本'
    ingress: 'Ingress'
    kubernetesVersion: 'Kubernetes 版本'
    monitoring: '监控配置'
    network: '网络配置'
    prefixPath: 'Prefix Path'
    privateRegistries: '私有镜像库配置'
    restore: '集群恢复'
    rotateCertificates: '轮换证书'
    services: 'Services'
    sshAgentAuth: '启用 SSH 代理认证'
    sshCertPath: 'SSH 证书路径'
    sshKeyPath: 'SH 密钥路径'


conditionSections:
  title: 状态
  detail: '当前 {resourceType} 运行状态 '
  table:
    type: 类型
    status: 状态
    lastUpdate: 最后更新
    reason: 状态原因
    message: 消息
  noData: 没有条件
  noMatch: 没有条件与当前搜索匹配

resourceEventList:
  title: 事件
  detail: '当前 {resourceType} 的事件'
  table:
    type: 类型
    lastUpdate: 最后更新
    reason: 事件原因
    message: 事件信息
    namespace: 命名空间
    object: 对象
  noData: 没有事件
  noMatch: 没有事件匹配当前搜索

confirmDelete:
  titleWithoutResourceType: '您确定要删除吗？'
  titleWithResourceType: '您确定要删除<b>{resourceType}</b>吗？'
  resourceType:
    namespace: '命名空间'
    project: '项目'
    cluster: '集群'
  environmentNote: '注意: 该项目中的所有资源都将被永久删除，包括通过 {appName} 创建的所有命名空间。'
  clusterNote: '注意: 通过云提供商驱动创建的相关资源(如卷、负载均衡器和网络)不会自动删除。'
  clusterRoleTemplateBindingNote: '注意: 不会删除用户的项目权限。'
  systemProjectNamespaceNote: '注意: 您正在删除系统项目下的命名空间。如果将其移除，可能会导致集群不能正常运行。'
  systemProjectNote: '注意: 您正在删除系统项目。如果将其移除，可能会导致集群不能正常运行'
  protip: '提示: 按住 {key} 键，同时点击 Delete 以绕过此确认。'
  confirmAction: 删除
  cancelAction: 取消
  largeDeleteText: '{key} and {othersCount} others'
  systemChartNote: '您正在删除一个系统应用程序。如果删除该应用程序，可能会导致集群出现问题。'
  globalRoleNote: |
    {count, plural,
    =0 {No users are assigned this role.}
    =1 {# user is assigned this role.}
    other {# users are assigned this role.}
    }
  forceDelete:
    label: 强制删除
    warning: '强制删除 Pod 并不等待确认 Pod 中的进程是否终止，这可能导致这些进程一直运行，直到节点检测到并完成优雅的删除。如果您的进程使用共享存储或与远程 API 通信，并且依赖于 pod 的名称来标识自己，那么强制删除这些 pod 可能导致多个进程使用相同的标识运行在不同的机器上，这可能导致数据损坏或不一致。只有在确定 Pod 已终止，或者应用程序可以同时运行同一 pod 的多个副本时，才强制删除 pod。此外，如果强制删除 Pod，调度器可能会在节点释放这些资源之前在这些节点上运行新的 Pod，并导致这些 Pod 立即被驱逐。'

containerLogs:
  download: 下载日志
  title: '日志查看: '
  onlyCombined: "<b>注意: </b>此容器运行时带有 TTY(-t)参数，仅有合并的标准输出和标准错误日志可见。"
  combined: 合并日志
  stdout: 标准输出
  stderr: 标准错误
  protip: '高级技巧: 点击查看日志时按住 {key} 键在新窗口中打开'
  scrollTop: 回到顶部
  scrollBottom: 回到底部
  clear: 清除屏幕
  wrapLines: 自动换行
  previous: 以前的容器
  status:
    initializing: 初始化...
    connecting: 连接中...
    connected: 已连接
    disconnected: 已断开
    closed: 已关闭

containerShell:
  protip: "高级技巧: 点击运行命令行时按住 {key} 键在新窗口中打开"
  status:
    initializing: '初始化...'
    error: "错误: {error}"
    connecting: '连接中...'
    connected: 已连接
    disconnected: 已断开
    closed: 已关闭
    code: " 状态码: {code}"

copyToClipboard:
  tooltip: 复制到剪贴板
  copied: 已复制

cruRegistry:
  title:
    new: 添加镜像库凭证
    edit: '编辑镜像库凭证: {name}'
    view: '镜像库凭证: {name}'
  address:
    label: 地址
    dockerhub: DockerHub
    quay: 'Quay.io'
    custom: 自定义
    globalRegistry: 全局镜像库
    placeholder: '例如: registry.example.com'
    artifactory: Artifactory
  multiple: 多个
  auth:
    label: 认证 Token
    saved: 已保存
  username:
    label: 用户名
  password:
    label: 密码
    saved: 已保存

cruPersistentVolume:
  name:
    placeholder: '例如: Myvolume'
  description:
    placeholder: '例如: 生产数据库的卷'
  title:
    new: '添加持久卷(PV)'
    edit: '编辑持久卷(PV): {name}'
    view: '持久卷(PV): {name}'
  storageClass:
    label: 分配给存储类
    prompt: 无
  pvc: PVC
  reclaimPolicy: 回收策略
  capacity:
    label: 容量
    unit: GiB
  source:
    label: 卷插件
    title: 插件配置
    detail: 配置选定卷插件的选项
    prompt: '选择卷插件...'
  nodeAffinity:
    label: 节点亲和性
  customize:
    title: 自定义
    detail: 自定义高级选项
  mountOptions:
    label: 挂载选项
    addActionLabel: 添加
    noData: 没有挂载选项
  awsElasticBlockStore:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    readOnly:
      label: 只读
    partition:
      label: 分区
      placeholder: "例如: 1，0 表示整块硬盘。"
    volumeID:
      label: 卷 ID
      placeholder: "例如: volume1"
  azureDisk:
    cachingMode:
      label: 缓存模式
      none: 无
      readOnly: 只读
      readWrite: 读写
    diskName:
      label: 磁盘名称
      placeholder: "例如: kubernetes-pvc"
    diskURI:
      label: 磁盘 URI
      placeholder: "例如: https://example.com/disk"
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    kind:
      label: 类型
      dedicated: 专用
      managed: 托管
      shared: 共享
    readOnly:
      label: 只读
  secret:
    defaultMode:
      label: 默认模式
      placeholder: "例如: 256"
    optional:
      label: 可选
    secretName:
      label: 密文
    certificateName:
      label: 证书
    items:
      label: 项目
  configMap:
    defaultMode:
      label: 默认模式
      placeholder: "例如: 256"
    optional:
      label: 可选
    name:
      label: 配置映射名
    items:
      label: 项目
  emptyDir:
    medium:
      label: 存储介质
      default: 主机的默认存储
      memory: 内存
    sizeLimit:
      label: 大小限制
      placeholder: "例如: 300Mi"
  azureFile:
    secretName:
      label: 密文名称
      placeholder: "例如: secret"
    secretNamespace:
      label: 密文命名空间
      placeholder: "例如: default"
    shareName:
      label: 共享名
      placeholder: "例如: abc"
    readOnly:
      label: 只读
  cephfs:
    monitors:
      label: 监控
      addActionLabel: 添加
    path:
      label: 路径
      placeholder: '例如: /var'
    readOnly:
      label: 只读
    secretFile:
      label: 密文文件
      placeholder: "例如: secret"
    secretRef:
      name:
        label: 名称
        placeholder: "例如: lab"
      namespace:
        label: 命名空间
        placeholder: "例如: default"
      label: 密文
    user:
      label: 用户
      placeholder: "例如: root"
  rbd:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    image:
      label: 镜像
      placeholder: "例如: 镜像"
    keyring:
      label: 密钥文件
      placeholder: '例如: /etc/ceph/keyring'
    monitors:
      label: 监控
      addActionLabel: 添加
    pool:
      label: 池
      placeholder: "例如: rbd"
    readOnly:
      label: 只读
    secretRef:
      label: 密文
      placeholder: "例如: secret"
    user:
      label: 用户
      placeholder: "例如: root"
  fc:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    lun:
      label: Lun
      placeholder: "例如: 2"
    readOnly:
      label: 只读
    targetWWNs:
      label: 目标的 WWNs
      addActionLabel: 添加
    wwids:
      label: Wwids
      addActionLabel: 添加
  csi:
    driver:
      label: 驱动
      placeholder: '例如: driver.longhorn.io'
    fsType:
      label: 文件系统
      placeholder: '例如: ext4'
    readOnly:
      label: 只读
    volumeHandle:
      label: Volume Handle
      placeholder: "e.g. pvc-xxxx"
    volumeAttributes:
      label: 卷属性
      addActionLabel: 添加卷属性
    controllerExpandSecretRef:
      name:
        label: Controller Expand Secret Name
        placeholder: "e.g. secret"
      namespace:
        label: Controller Expand Secret Namespace
        placeholder: "e.g. default"
    controllerPublishSecretRef:
      name:
        label: Controller Publish Secret Name
        placeholder: "e.g. secret"
      namespace:
        label: Controller Publish Secret Namespace
        placeholder: "e.g. default"
    nodePublishSecretRef:
      name:
        label: Node Publish Secret Name
        placeholder: "e.g. secret"
      namespace:
        label: Node Publish Secret Namespace
        placeholder: "e.g. default"
    nodeStageSecretRef:
      name:
        label: Node Stage Secret Name
        placeholder: "e.g. secret"
      namespace:
        label: Node Stage Secret Namespace
        placeholder: "e.g. default"
  flexVolume:
    driver:
      label: 驱动
      placeholder: "例如: driver"
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    options:
      label: 选项
      addActionLabel: 添加
    readOnly:
      label: 只读
    secretRef:
      label: 密文
      placeholder: "例如: secret"
  flocker:
    datasetName:
      label: 数据集名称
      placeholder: "例如: database"
    datasetUUID:
      label: 数据集 UUID
      placeholder: "例如: uuid"
  glusterfs:
    endpoints:
      label: 终端
      placeholder: "例如: glusterfs-cluster"
    path:
      label: 路径
      placeholder: "例如: kube_vol"
    readOnly:
      label: 只读
  gcePersistentDisk:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    partition:
      label: 分区
      placeholder: "例如: 1，0 表示整块硬盘"
    pdName:
      label: 持久化磁盘名称
      placeholder: "例如: abc"
    readOnly:
      label: 只读
  iscsi:
    chapAuthDiscovery:
      label: Chap 验证发现
    chapAuthSession:
      label: Chap 验证会话
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    initiatorName:
      label: 启动器名称
      placeholder: "例如: abc"
    iqn:
      label: IQN
      placeholder: "例如: 2"
    iscsiInterface:
      label: iSCSI 接口
      placeholder: "例如: interface"
    lun:
      label: Lun
      placeholder: "例如: 2"
    portals:
      label: 门户
      addActionLabel: 添加
    readOnly:
      label: 只读
    secretRef:
      label: 密文
      placeholder: "例如: secret"
    targetPortal:
      label: 目标门户
      placeholder: "例如: portal"
  local:
    path:
      label: 路径
      placeholder: '例如: /mnt/disks/ssd1'
  nfs:
    path:
      label: 路径
      placeholder: '例如: /var'
    readOnly:
      label: 只读
    server:
      label: 服务器
      placeholder: "例如: 10.244.1.4"
  cinder:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    readOnly:
      label: 只读
    volumeID:
      label: 卷 ID
      placeholder: "例如: vol"
    secretRef:
      name:
        label: 密文名称
        placeholder: "例如: abc"
      namespace:
        label: 密文命名空间
        placeholder: "例如: default"
      label: 密文名称
  photonPersistentDisk:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    pdID:
      label: PD ID
      placeholder: "例如: abc"
  portworxVolume:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    readOnly:
      label: 只读
    volumeID:
      label: 卷 ID
      placeholder: "例如: abc"
  quobyte:
    group:
      label: 组
      placeholder: "例如: abc"
    readOnly:
      label: 只读
    registry:
      label: 镜像库
      placeholder: "例如: abc"
    user:
      label: 用户
      placeholder: "例如: root"
    volume:
      label: 卷
      placeholder: "例如: vol"
  scaleIO:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    gateway:
      label: 网关
      placeholder: '例如: https://localhost:443/api'
    protectionDomain:
      label: 保护域
      placeholder: "例如: pd01"
    readOnly:
      label: 只读
    secretRef:
      name:
        label: 名称
        placeholder: "例如: secret"
      namespace:
        label: 命名空间
        placeholder: "例如: default"
      label: 密文
    sslEnabled:
      label: SSL 已启用
    storageMode:
      label: 存储模式
      placeholder: "例如: ThinProvisioned"
    storagePool:
      label: 存储池
      placeholder: "例如: sp01"
    system:
      label: 系统
      placeholder: "例如: scaleio"
    volumeName:
      label: 卷名
      placeholder: "例如: vol-0"
  storageos:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    readOnly:
      label: 只读
    secretRef:
      name:
        label: 名称
        placeholder: "例如: secret"
      namespace:
        label: 命名空间
        placeholder: "例如: default"
      label: 密文
    volumeName:
      label: 卷名
      placeholder: "例如: vol"
    volumeNamespace:
      label: 卷命名空间
      placeholder: "例如: default"
  vsphereVolume:
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    storagePolicyID:
      label: 存储策略 ID
      placeholder: "例如: sp1"
    storagePolicyName:
      label: 存储策略名称
      placeholder: "例如: sp"
    volumePath:
      label: 卷路径
      placeholder: '例如: /'

cruStorageClass:
  name:
    placeholder: '例如: 储存'
  description:
    placeholder: '例如: AWS EBS 存储'
  title:
    new: 添加存储类
    edit: '编辑存储类: {name}'
    view: '存储类: {name}'
  allowVolumeExpansion:
    label: 允许用户扩展卷
  pv:
    title: '持久卷(PV)'
    detail: '当前存储类提供的持久卷(PV)。'
  mountOptions:
    label: 挂载选项
    addActionLabel: 添加
    noData: 没有挂载选项
  parameters:
    title: 参数
    detail: 为存储类配置特定的参数
    addActionLabel: 添加参数
  customize:
    title: 自定义
    detail: 自定义高级选项
  provisioner:
    label: 提供者
  reclaimPolicy:
    label: 回收策略
    Delete: 在工作负载释放后删除卷和底层设备
    Retain: 保留卷以进行手动清理
    Recycle: '回收: 清空内容，然后为以后的工作负载保留卷'
  volumeBindingMode:
    label: 卷绑定模式
    immediate: 创建 PersistentVolumeClaim 后，绑定并提供一个持久卷
    waitForFirstConsumer: 使用 PersistentVolumeClaim 创建一个 Pod 后，绑定并提供一个持久卷
  aws-ebs:
    fsType:
      label: 文件系统
      placeholder: '例如: ext4'
    type:
      label: 卷类型
      gp2: 'GP2 - 通用 SSD'
      io1: 'IO1 - Provisioned IOPS SSD'
      st1: 'ST1 - Throughput-Optimized HDD'
      sc1: 'SC1 - Cold-Storage HDD'
    zone:
      label: 可用区
      automatic: "自动: 集群中有主机的区域"
      manual: "手动: 选择特定区域"
      placeholder: "us-east-1d，us-east-1c"
    iopsPerGB:
      label: 预置 IOPS
      unit: 'GB/s'
    encrypted:
      label: 加密
    kmsKeyId:
      label: 用于加密的 KMS Key ID
      automatic: "自动: 生成密钥"
      manual: "手动: 使用特定的秘钥(完整的 ARN)"
  gce-pd:
    type:
      label: 卷类型
      pd-standard: '标准'
      pd-ssd: 'SSD'
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    replicationType:
      label: Replication Type
      none: Zonal
      regionalPd: Regional
    zone:
      label: 可用区
      automatic: "自动: 集群中有主机的区域"
      manual: "手动: 选择特定区域"
      placeholder: "us-central1-a，us-central1-b"
  cinder:
    type:
      label: 卷类型
      placeholder: "例如: fast"
    availability:
      label: 可用区
      automatic: "自动: 集群中有主机的区域"
      manual: "手动: 选择特定区域"
      placeholder: "例如: nova"
  vsphere-volume:
    diskformat:
      label: 磁盘格式
      thin: 精简
      zeroedthick: 厚置备延迟置零
      eagerzeroedthick: 厚置备置零
    storagePolicyName:
      label: 存储策略名称
      placeholder: "例如: gold"
    datastore:
      label: 数据存储
      placeholder: "例如: VSANDatastore"
    fstype:
      label: 文件系统类型
      placeholder: "例如: ext3"
    hostFailuresToTolerate:
      label: 主机失败容忍
      placeholder: "例如: 2"
    cachereservation:
      label: 缓存预留
      placeholder: "例如: 20"
  azure-disk:
    new: 新建 Azure 磁盘
    skuName:
      label: Sku 名称
      placeholder: "例如: Standard_LRS"
    location:
      label: 区域
      placeholder: "例如: eastus"
    storageAccount:
      label: 存储帐户
      placeholder: "例如: azure_storage_account_name"
    storageaccounttype:
      label: 存储帐户类型
      placeholder: "例如: Standard_LRS"
    kind:
      label: 类型
      shared: 共享
      dedicated: 专用
      managed: 托管
      placeholder: "例如: 共享"
  azure-file:
    skuName:
      label: Sku 名称
      placeholder: "例如: Standard_LRS"
    location:
      label: 区域
      placeholder: "例如: eastus"
    storageAccount:
      label: 存储帐户
      placeholder: "例如: azure_storage_account_name"
  portworx-volume:
    fs:
      label: 文件系统
      placeholder: "例如: ext4"
    block_size:
      label: 块大小
      placeholder: "例如: 32"
    repl:
      label: Repl
      placeholder: "例如: 1; 0 为整个设备"
    io_priority:
      label: 'I/O 优先级'
      placeholder: "例如: low"
    snap_interval:
      label: 快照间隔
      placeholder: "例如: 70"
    aggregation_level:
      label: 聚合级别
      placeholder: "例如: 0"
    ephemeral:
      label: 临时卷
      placeholder: "是否是临时卷，true 或者 false，默认 false"
  scaleio:
    gateway:
      label: 网关
      placeholder: '例如: https://192.168.99.200:443/api'
    system:
      label: 系统
      placeholder: "例如: scaleio"
    protectionDomain:
      label: 保护域
      placeholder: "例如: pd0"
    storagePool:
      label: 存储池
      placeholder: "例如: sp1"
    storageMode:
      label: 存储模式
      ThinProvisioned: 精简配置
      ThickProvisioned: 精简置备
    secretRef:
      label: 密文
      placeholder: "例如: sio-secret"
    readOnly:
      label: 只读
      placeholder: "例如: false"
    fsType:
      label: 文件系统类型
      placeholder: "例如: xfs"
  storageos:
    pool:
      label: 池
      placeholder: "例如: default"
    description:
      label: 描述
      placeholder: "例如: Kubernetes 卷"
    adminSecretNamespace:
      label: 管理密文命名空间
      placeholder: "例如: default"
    adminSecretName:
      label: 管理密文名
      placeholder: "例如: storageos-secret"
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
  longhorn:
    numberOfReplicas:
      label: 副本数量
      placeholder: "例如: 3"
    staleReplicaTimeout:
      label: 陈旧副本超时
      placeholder: "例如: 30"
    fromBackup:
      label: 从备份
      placeholder: ""
  quobyte:
    quobyteAPIServer:
      label: Quobyte API 服务器
      placeholder: '例如: https://138.68.74.142:7860'
    registry:
      label: 镜像库
      placeholder: "例如: 138.68.74.142"
    adminSecretNamespace:
      label: 管理密文命名空间
      placeholder: "例如: kube-system"
    adminSecretName:
      label: 管理密文名称
      placeholder: "例如: quobyte-admin-secret"
    user:
      label: 用户
      placeholder: "例如: root"
    group:
      label: 组
      placeholder: "例如: root"
    quobyteConfig:
      label: Quobyte 配置
      placeholder: "例如: BASE"
    quobyteTenant:
      label: Quobyte 租户
      placeholder: "例如: DEFAULT"
  rbd:
    monitors:
      label: "Ceph-Monitor 地址"
      placeholder: "例如: 10.16.153.105:6789"
    adminId:
      label: "管理员账号(ID)"
      placeholder: "例如: kube"
    adminSecretNamespace:
      label: 管理密文所在命名空间
      placeholder: "例如: kube-system"
    adminSecretName:
      label: 管理密文
      placeholder: "例如: secret"
    pool:
      label: 池
      placeholder: "例如: kube"
    userId:
      label: 用户 ID
      placeholder: "例如: kube"
    userSecretName:
      label: 用户密文名称
      placeholder: "例如: ceph-secret-user"
    userSecretNamespace:
      label: 用户密文命名空间
      placeholder: "例如: default"
    fsType:
      label: 文件系统类型
      placeholder: "例如: ext4"
    imageFormat:
      label: 镜像格式
      placeholder: "例如: 2"
    imageFeatures:
      label: 镜像功能
      placeholder: "例如: layering"
  glusterfs:
    resturl:
      label: REST URL
      placeholder: '例如: https://127.0.0.1:8081'
    restuser:
      label: REST 用户
      placeholder: "例如: admin"
    restuserkey:
      label: REST 用户密钥
      placeholder: "例如: password"
    secretNamespace:
      label: 密文命名空间
      placeholder: "例如: default"
    secretName:
      label: 密文名称
      placeholder: "例如: heketi-secret"
    clusterid:
      label: 集群 ID
      placeholder: "例如: 630372ccdc720a92c681fb928f27b53f"
    gidMin:
      label: GID MIN
      placeholder: "例如: 40000"
    gidMax:
      label: GID MAX
      placeholder: "例如: 50000"
    volumetype:
      label: '卷类型'
      placeholder: '例如: replicate:3'

gatewayPage:
  noMatch: 没有网关匹配当前搜索
  noData: 没有配置网关
  notSupported: 集群 networking.istio.io/v1alpha3 API 不可用。
  table:
    hosts:
      label: Hosts

cruGateway:
  title:
    new: 添加网关
    edit: 编辑网关
    view: "网关: {name}"
  name:
    placeholder: '例如：mygateway'
  selector:
    label: 选择器
    add: Add Key Value
    error: '"选择器必需设置.'
  tls:
    mode:
      label: 运行模式
      prompt: '选择模式...'
    httpsRedirect:
      label: HTTPS 重定向
      enabled: 'Yes'
      disabled: 'No'
    serverCertificate:
      label: 服务证书
      placeholder: '例如：/etc/istio/ingressgateway-certs/tls.crt'
    privateKey:
      label: 服务私钥
      placeholder: '例如: /etc/istio/ingressgateway-certs/tls.key'
    caCertificates:
      label: CA 证书
      placeholder: '例如: /etc/istio/ingressgateway-ca-certs/ca-chain.cert.pem'
    credentialName:
      label: 凭据名称
      placeholder: '例如: myssl'
  port:
    number:
      label: 端口号
      placeholder: '例如: 80'
      error: '端口号必须设置'
    name:
      label: 端口名称
      placeholder: '例如: http'
      error: '端口名称必须设置'
    protocol:
      label: 端口协议
  hosts:
    label: Hosts
    add: Add Host
    placeholder: '例如: *'
    error: '"Hosts" is required.'
  servers:
    label: Servers
    add: 添加 Server
    error: 请输入至少一个 server
    noServers: 没有 Servers
    removeServerLabel: 移除 server

cruVirtualService:
  title:
    new: 添加虚拟服务
    edit: 编辑虚拟服务
    view: "虚拟服务: {name}"
  name:
    placeholder: '例如: myservice'
  hosts:
    label: 主机
    add: 添加主机
    error: 请选择或输入至少一个主机
  gateways:
    label: 网关
    add: 添加网关
    placeholder: '例如: mygateway'
    prompt: 选择网关...
  http:
    routes:
      label: HTTP 路由
      noRoutes: 没有 http 路由
      addRouteLabel: 添加 http 路由
      removeRouteLabel: 删除 http 路由
      moveUp: 向上移动
      moveDown: 向下移动
      timeout:
        label: 超时
        placeholder: '例如: 5s'
      faultInjection:
        abort:
          label: 故障注入中止
          httpStatus:
            label: HTTP 状态码
            placeholder: '例如: 400'
          percent:
            label: 百分比
            placeholder: '例如: 8'
        delay:
          label: 故障注入延迟
          fixedDelay:
            label: 固定延迟
            placeholder: '例如: 5s'
          percent:
            label: 百分比
            placeholder: '例如: 8'
      mirror:
        label: 监控
        host:
          label: Host
        subset:
          label: Subset
          placeholder: '例如: v2'
        port:
          label: Port
          placeholder: '例如: 8080 or myport'
      retries:
        label: 重试
        attempts:
          label: 重试次数
          placeholder: '例如: 3'
        perTryTimeout:
          label: 每次重试超时
          placeholder: '例如: 2s'
      redirect:
        label: 重定向
        uri:
          label: URI
          placeholder: '例如: /v1/bookRatings'
        authority:
          label: Authority
          placeholder: '例如: newratings.default.svc.cluster.local'
        error: 请不要同时配置目标地址和重定向。
      rewrite:
        label: 地址重写
        uri:
          label: URI
          placeholder: '例如: /v1/bookRatings'
        authority:
          label: Authority
          placeholder: '例如: newratings.default.svc.cluster.local'
      destination:
        addDestinationLabel: 增加目标地址
        noDestinations: 没有目标地址
        port:
          label: Port
          placeholder: '例如: 8080 or myport'
        weight:
          label: 权重
          placeholder: '例如: 50'
          error: 必须设置权重。
        subset:
          label: Subset
          placeholder: '例如: v1'
        host:
          label: Host
          error: 必须设置 Host。
      matches:
        error: 请为匹配条件输入至少一个键值对
        showMatch: 指定此路由的匹配规则
        addLabel: 添加其他匹配规则
        removeLabel: 删除匹配规则
        noData: 没有匹配规则
        addMatchLabel: 添加匹配条件
        noMatches: 没有匹配条件
        port:
          label: Port
          placeholder: '例如: 8080'
        sourceLabels:
          label: 源标签
          addActionLabel: 添加源标签
        type:
          label: 匹配类型
          uri: URI
          authority: Authority
          method: Method
          scheme: Scheme
          headers: Headers
        key:
          label: 键
          placeholder: '例如: end-user'
        condition:
          label: 条件
          exact: 精确匹配
          prefix: 前缀匹配
          regex: 正则表达式匹配
        value:
          label: 值
          uri:
            exact: '例如: /ratings/v2/'
            prefix: '例如: /ratings'
            regex: '例如: /ratings.*'
          authority:
            exact: '例如: eu.bookinfo.com'
            prefix: '例如: eu'
            regex: '例如: ".*?[.]eu[.]bookinfo[.]com"'
          method:
            exact: '例如: GET'
            prefix: '例如: GET'
            regex: '例如: ^.*(GET|POST).*$'
          scheme:
            exact: '例如: http'
            prefix: '例如: http'
            regex: '例如: h.*'
          headers:
            exact: '例如: jason'
            prefix: '例如: jason'
            regex: '例如: ja.*'


validationsList:
  title: 验证检查
  detail: 当前 {resourceType} 的验证检查
  noPermission: 您没有权限查看验证。请联系您的集群所有者，让 Kiali 访问您。
  table:
    path: 路径
    severity: 严重程度
    message: 消息
  noData: 没有发现问题
  noMatch: 没有问题匹配当前搜索


dangerZone:
  header: 高级设置
  subtext: "通常情况下用户不需要修改以下设置。请谨慎操作，不正确的值可能导致 {appName} 无法正常运行。修改默认设置后将以<b>粗体</b>显示配置名。"
  showLabel: 我已确认修改高级设置可能导致 {appName} 出问题。
  show: 显示
  hide: 隐藏
  description:
    'cacerts': '验证 ssl 证书所需的 CA 证书，此 CA 证书仅适用于自签名 SSL 证书。若 SSL 证书是权威 CA 机构所颁发，则要求删除此 CA 证书。'
    'cluster-defaults': '在创建新集群时覆盖 RKE 默认值。'
    'engine-install-url': '默认的 Docker 引擎安装 URL(用于大多数 Machine Drivers)。'
    'engine-iso-url': '默认 OS 安装 URL(用于 Machine vSphere Drivers)。'
    'engine-newest-version': '当前 Rancher Server 支持的最新 Docker 版本，不支持的版本或比此 Docker 版本新的将被标记为未测试。'
    'engine-supported-range': '当前 Rancher Server 支持的 Docker 版本范围，不满足此范围的 Docker 版本将在 UI 中标记为不受支持。'
    'ingress-ip-domain': '用于自动生成 Ingress 主机名的通配域名。<入口名>.<命名空间名>.<入口控制器的 IP 地址>将被添加到域名中。'
    'server-url': '默认的 {appName} Server 访问地址，必须是 HTTPS。集群中的所有主机都必须能够访问此地址。'
    'system-default-registry': '用于 RKE 部署系统服务时镜像的拉取，其他服务拉取镜像不生效。'
    'ui-index': 'UI HTML 索引位置。'
    'ui-pl': '企业名称专用标签'
    'ui-issues': "使用一个 url 地址发送新的 'File an Issue' 报告，而不是将用户发送到 Github Issue 页面。"
    'telemetry-opt': '遥感报告设置。'
    'auth-user-info-resync-cron': '用于重新同步身份验证提供者组成员关系的默认 cron 调度。'
    'auth-user-info-max-age-seconds': '在执行身份验证提供者组成员同步之前，用户身份验证令牌的最大有效期。'
    'cluster-template-enforcement': '非管理员只能通过预先批准的集群模板启动集群。'
    'auth-user-session-ttl-minutes': '用户验证会话上的自定义 TTL(以分钟为单位)。'
    'rke-metadata-config': '配置 RKE 元数据刷新参数。'
    'ui-banners': 'Classification banner is used to display a custom fixed banner in the header, footer, or both. The setting takes JSON object containing 3 root parameters; <code>banner</code>, <code>showHeader</code>, <code>showFooter</code>. <code>banner</code> is an object containing; <code>textColor</code>, <code>background</code>, and <code>text</code>, where <code>textColor</code> and <code>background</code> are any valid CSS color value.'

deleteEksCluster:
  title: "确定删除集群 {clusterName} 吗?"
  help: 此集群是通过临时令牌创建的，请提供新的令牌来删除它。
  updateKeys: 更新 Keys
  updatingKeys: Keys 更新中
  deleteCluster: 删除集群
  deletingCluster: 集群删除中...
  accessKey:
    label: Access Key
    placeholder: Your AWS access key
  secretKey:
    label: Secret Key
    placeholder: Your AWS secret key
    provided: Provided
  sessionToken:
    label: "Session Token <em class='text-muted'>可选</em>"
    deleteLabel: Session Token
    placeholder: Your AWS session token
    provided: Provided
  error:
    accessKey: 必须设置 Access key。
    secretKey: 必须设置 Secret key。
    sessionToken: 必须设置 Session token。

hpaPage:
  noMatch: 没有匹配当前搜索的 HPA
  noData: 没有配置 HPA 规则
  notSupported: '集群中 autoscaling/v2beta2 API 不可用。'
  table:
    replicas:
      range: 副本范围
      current: 副本
      desired: 期望
    lastScaleTime:
      label: 上次扩缩容时间
    target:
      label: 目标应用

editAccount:
  title: 编辑账号
  form:
    name:
      label: 显示名称
      placeholder: '例如: John Smith'
    kind:
      label: 账号类型
      user: 普通用户
      admin: '管理员: 完全访问管理所有集群中的所有内容'
    description:
      label: 描述
      placeholder: '例如: John Smith 的账号'
    publicValue:
      label: 用户名
    oldPassword:
      label: 当前密码
    newPassword:
      label: 新密码
    confirmPassword:
      label: 确认密码
    identity:
      label: 标识

editApiKey:
  title:
    justCreated: API Key 已创建
    editing: 编辑 API Key
    new: 添加 API Key
  accessKey: Access Key(用户名)
  secretKey: Secret Key(密码)
  basicAuth: "Access Key 和 Secret Key 可以作为 HTTP 基本身份验证的用户名和密码发送，以授权请求。您也可以将它们组合为 Bearer Token: "
  token: Bearer Token
  scope: 作用范围
  scopeSelect:
    prompt: 不指定作用范围(作用于所有集群)
    helpText: '集群范围的令牌可用于直接与<a href="https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#authorized-cluster-endpoint" target="_blank" rel="nofollow noreferrer"授权集群端点</a>配置的集群 API 交互。'
  ttl:
    label: 自动失效时间
    never: 永不过期
    day: 从现在开始，有效期 1 天
    month: 从现在开始，有效期 1 个月
    year: 从现在开始，有效期 1 年
  description:
    placeholder: "可选: 例如: 此密钥由应用服务器使用，用于容器部署。"
  saveWarning1: 请保存上面的信息！这些信息仅显示一次。
  saveWarning2: 如果忘记了 Secret Key，您需要重新创建新的 API Key。
  noteOptional: 说明是可选项，以帮助您记住此密钥将用于何种用途。

editCertificate:
  title: 编辑证书
  name:
    placeholder: '例如: Mydomain.com'
  description:
    placeholder: '例如: Mydomain.com 的 EV 证书。'
  noteKeyWriteOnly: '注意: Private Key 部分为只写(write only)因而显示为空白。更新证书时您需要重新上传 Private Key，即便 Private Key 未发生变化。'

editCluster:
  title:
    new: 添加集群
    edit: 编辑集群
  name:
    label: 名称
    placeholder: '例如: Sandbox'
  description:
    label: 描述
    placeholder: '例如: 开发人员所共享的集群。'
  systemStacks:
    hr: 集群选项
    title: 系统应用
    detail: 这些应用将会被自动部署到该集群的 System 环境中。
    noData: 没有应用将会被部署到系统环境中。
    add: 添加应用
    cancel: 取消添加系统应用
  modal:
    onCluster: "注意: 您正在尝试删除当前环境所在的集群。请在删除该集群之前，先选择其他集群的环境。"

editContainer:
  title:
    vm: 编辑虚拟机
    container: 编辑容器
  name:
    placeholder: '例如: Myapp'
  description:
    placeholder: '例如: 我的应用'

editNodePool:
  title: '节点池污点（Taints）'

editHost:
  title: 编辑主机
  hostname:
    label: 主机名
    help: 由主机操作系统获取
  customName:
    label: 自定义名称
    placeholder: '例如: dev1'
    help: 如果此处未配置，名称将显示为主机名。
  description:
    label: 描述
    placeholder: '例如: 我的开发主机'
  labels:
    label: 标签
  ips:
    label: 调度 IP
    valueLabel: IP 地址
    valuePlaceholder: '例如: 1.2.3.4'
    addActionLabel: 添加 IP
    help: 如果设置，调度器将从中选择一个 IP 地址并将发布的端口绑定到该地址。
  requireAny:
    label: 容器标签需求
    help: 如果设置，容器必须具备设置的一个或者多个标签才能够被调度到该主机。如果仅设置 Key 而 Value 留空，具备相应 Key 的容器可以被调度到该主机而忽略 Value 的值。<code>io.rancher.container.system</code>标签是运行系统容器所必须的。
    addActionLabel: 添加标签需求

editService:
  title: 编辑服务

editStack:
  title: 编辑命名空间
  name:
    label: 名称
    error: 命名空间名称已被使用，请设置新的命名空间名称。
    placeholder: '例如: Myapp'
  project:
    label: 项目
    prompt: '选择项目:'
  description:
    label: 描述
    placeholder: '例如: MyApp 命名空间'
  resourceQuota:
    title: 资源配额
    detail: 配置命名空间整体可以使用的资源量。
  group:
    label: 标签
    placeholder: '例如: frontend，production'
    help: 逗号分隔的标签列表，负载列表可以根据相应的标签进行过滤。
  autoInject:
    label: Istio sidecar 自动注入。
    warning: 命名空间中的现有工作负载都需要重新部署，以利用 sidecar 自动注入。

editUser:
  title: 编辑用户
  form:
    name:
      label: 显示名称
      placeholder: '例如: John Smith'
    username:
      label: 用户名
    otherRoles:
      label: 移除角色
    password:
      label: 修改密码
      new: 新密码
      confirm: 确认密码
      error: 密码必须相同
      mustChangePassword:
        new: 要求用户在首次登录时更改密码
        edit: 要求用户在下次登录时更改密码

envCatalog:
  header: 管理应用商店
  subtext: '可以在这里配置自定义的应用商店源，该应用商店仅对当前环境的用户可见。全局应用商店对所有环境可见，仅能由管理员在管理设置中修改。应用商店需要一个唯一的名称并且支持<code>git clone</code>的 URL 地址(参考 <a href="https://git-scm.com/docs/git-clone#_git_urls_a_id_urls_a" target="_blank" rel="nofollow noopener noreferrer">文档</a>以获取更多信息)。'
  addActionLabel: 添加应用商店

moveNamespace:
  title: |
    移动 {count, plural,
    =1 { 命名空间: {name}}
    other{#个命名空间: }}
  to: "到目标项目: "
  actionLabel: 移动

stackHeader:
  title: '命名空间: {name}'
  outputs: 输出

stacksPage:
  table:
    standalone: 独立容器
    endpoints: 终端
    scale: Pod 副本数
    instanceState: 容器状态
    instanceStateWithIcon: 状态

featureFlags:
  warningHeader: '您应该谨慎地启用这些功能，它们应该被视为可能会给您的系统带来问题的 beta 功能'
  features:
   istioVirtualServiceUi: "启用此功能将为 Istio 公开额外的 UI 页面"
   unsupportedStorageDrivers: "启用此功能将为持久卷和存储类公开不受支持的存储驱动程序选项。"
  table:
    description: 描述
    name: 名称
    noData: There are no features
    noMatch: 没有与当前搜索匹配的功能
    restart: 重启
    state: 状态

formatIp:
  noIp: 无

formBalancerConfig:
  title: 自定义配置文件
  detail: 提供自定义配置文件，这个配置将会被应用到 {appName} 自动生产的配置上方。
  custom: |
    请参考<a href="https://cbonte.github.io/haproxy-dconv/1.6/configuration.html" target="_blank" rel="nofollow noopener noreferrer">haproxy 文档</a>了解更多关于该配置文件的参数。当重写<code>backend</code>或包括目标容器 IP 的某行时，请使用<code>$IP</code>来代替 IP 地址，{appName} 将会自动转换成相应的配置。
  config:
    prompt: 自定义 haproxy.cfg 内容

formNodeAffinity:
  addRuleLabel: 添加节点选择规则
  noRules: 没有节点选择器
  removeRuleLabel: 删除节点选择规则

formMembersGlobalAccess:
  title: 成员
  detail: 选择可以查看此应用程序的成员
  table:
    name: 名称
    type: 成员类型
    accessType: 访问类型
    noData: 当前没有成员
    noMatch: 没有成员匹配当前搜索
    prompt: 选择值...


formNodeRequirement:
  label: 规则
  addRuleLabel: 添加规则
  noRules: 没有规则
  key:
    label: 键
    placeholder: '例如: hostname'
  operator:
    label: 操作符
  values:
    label: 值
    placeholder: '用逗号分割，例如: node1,node2'

formIngress:
  hostMode:
    automatic: 自动生成<code>.{domain}</code>后缀域名
    existing: 继续使用当前主机名<code>{domain}</code>
    manual: 自定义域名
    default: 默认后端
    defaultDisabled: Ingress 控制器不支持默认后端。
  defaultBackend:
    label: 将此规则设置为默认后端
    mark: 默认后端
  label: 规则
  addRuleLabel: 添加规则
  removeRuleLabel: 移除此规则
  noRules: 没有规则
  host:
    label: 访问域名
    placeholder: "例如: example.com"
  backendType:
    label: 后端类型
  mode:
    workload: 工作负载
    service: DNS 记录

formIngressBackends:
  label: 目标后端
  noRules: 没有后端
  warning: 如果目标后端是一个服务，您只可以使用该服务所暴露的端口。您可以在服务发现页找到该服务，然后通过编辑 YAML 的方式添加所需要的端口。
  addServiceLabel: 服务
  addWorkloadLabel: 工作负载
  service:
    label: 服务
  workload:
    label: 工作负载
  targetPort:
    label: 容器端口
    placeholder: '例如: 80'
    prompt: 选择端口 ...
  path:
    label: '访问路径(如需使用后端重写功能,请查看下方标签/注释)。'
    placeholder: '例如: /foo'
  target: '服务/工作负载'

formBalancerListeners:
  label: 监听器与目标规则
  detail: 配置负载均衡，使其将请求转发到目标地址。
  status: |
    {count, plural,
    =0{ 无规则 }
    =1{#条规则 }
    other{#条规则 }
    }
  noRules: 没有端口
  addPortLabel: 添加监听端口
  removePortLabel: 删除这个监听端口
  showBackendLabel: "自定义 backend 名称"
  access:
    label: 访问
    public: 公开
    internal: 内部
  protocol:
    label: 协议
  sourceIp:
    label: 主机 IP
    placeholder: "例如: 1.2.3.4; Default: All"
  sourcePort:
    label: 监听端口
    placeholder: '例如: 80'
  help: "主机及路径规则将根据显示的顺序自上而下进行匹配，后端默认将随机命名。要自定义生成的后端，提供一个名称并在您自定义的 haproxy.cfg 文件中引用该名称。"

formBalancerRules:
  label: 目标规则
  detail: 根据主机、 端口、 路径或 IP 地址映射请求到不同的目标。
  status: |
    {count, plural,
    =0{ 无规则 }
    =1{#条规则 }
    other{#条规则 }
    }
  noRules: 无规则
  addServiceLabel: 添加服务
  addInstanceLabel: 添加容器
  addSelectorLabel: 添加选择器
  addTargetLabel: 添加规则
  access:
    label: 访问
    public: 公开
    internal: 内部
  protocol:
    label: 协议
  sourceIp:
    label: 主机 IP
    placeholder: "例如: 1.2.3.4， 默认: 所有"
  sourcePort:
    label: 监听端口
    placeholder: '例如: 80'
  path:
    label: 路径
    placeholder: '例如: /foo'
  hostname:
    label: 请求头信息
    placeholder: '例如: example.com'
  backendName:
    label: 后端
    placeholder: '例如: webapp'
  targetPort:
    label: 端口
    placeholder: '例如: 80'
  priority:
    label: 优先级
  target: 目标
  selector:
    label: 选择器
    placeholder: '例如: foo=bar'

formCommand:
  title: 命令
  detail: 配置容器启动时将运行的可执行文件。
  command:
    label: 命令(CMD)
    placeholder: '例如: /usr/sbin/httpd -f httpd.conf'
  entryPoint:
    label: 入口(Entrypoint)
    placeholder: '例如: /bin/sh'
  environment:
    label: 环境标签
  workingDir:
    label: 工作目录
    placeholder: '例如: /myapp'
  uid:
    label: '用户 UID'
    placeholder: '例如: 501'
  console:
    label: 控制台
    both: '交互&amp;TTY 终端<span class="text-muted">(-i -t)</span>'
    interactive: '交互<span class="text-muted">(-i)</span>'
    terminal: 'TTY 终端<span class="text-muted">(-t)</span>'
    none: 无
  autoRestart:
    label: 自动重启
    no: 从不
    onFailure: '失败时<span class="text-muted">(非 0 退出代码)</span>总是'
    onFailureCondPrefix: 失败时，最多
    onFailureCondSuffix: |
      {limit, plural,
      =1{ 次 }
      other{ 次 }
      }
    always: 总是
  terminationGracePeriodSeconds:
    label: 停止超时
    helpText: 容器将在强制终止之前自行停止。
  fsgid:
    label: 文件系统组
    placeholder: '例如: 501'


formContainerLinks:
  title: 链接
  detail: 配置此容器和其他容器的关联关系
  addActionLabel: 添加链接
  name:
    label: 目标容器
  alias:
    label: 名称
    placeholder: '例如: database'
  noData: 没有容器链接
  noMatch: 没有匹配当前搜索的链接

formCount:
  label: 数量

formDisks:
  addDiskLabel: 添加磁盘
  addRootDiskLabel: 添加根磁盘
  name:
    rootDisk: 根磁盘
    label: 名称
    placeholder: '例如: data'
  size:
    label: 磁盘大小
    rootDisk: 由系统镜像决定
  readIops:
    label: 读取 IOPS
    placeholder: '例如: 1000'
  writeIops:
    label: 写入 IOPS
    placeholder: '例如: 1000'
  driver:
    label: 驱动

formEngineOpts:
  title: 引擎选项
  detail: 自定义 Docker 守护进程的配置
  engineInstallUrl:
    label: Docker 安装 URL
    placeholder: '例如: http://get.docker.com'
    recommended: 推荐
    latest: 最新
  engineStorageDriver:
    label: 存储驱动
    placeholder: '例如: overlay'
  engineOpts:
    label: 引擎参数
    addActionLabel: 添加引擎参数
    keyPlaceholder: '例如: log-driver'
    valuePlaceholder: '例如: syslog'
  engineLabels:
    label: 引擎标签
    addActionLabel: 添加引擎标签
    keyLabel: 标签
  engineEnv:
    label: 引擎变量
    addActionLabel: 添加环境变量
    keyLabel: 变量
    keyPlaceholder: '例如: HTTP_PROXY'
    valuePlaceholder: '例如: http://your-proxy:8080'
  engineInsecureRegistry:
    label: 非安全镜像仓库
    addActionLabel: 添加非安全镜像仓库
    valueLabel: 镜像库域名
    valuePlaceholder: '例如: registry.example.com'
  engineRegistryMirror:
    label: 镜像加速
    addActionLabel: 添加加速地址
    valueLabel: 镜像加速地址
    valuePlaceholder: '例如: https://my-mirror.example.com:5000'

formResourceQuota:
  addQuotaLabel: 添加配额
  table:
    type:
      label: 资源类型
    value:
      label: 限制
      placeholder: '例如: 10'
      milliCpuPlaceholder: '例如: 500'
      memoryPlaceholder: '例如: 1Gi'
    resources:
      label: 项目资源可用性
      reserved: 其他命名空间
      namespace: 当前命名空间
      available: 可用
      max: 总共
    projectLimit:
      label: 项目限制
      placeholder: '例如: 50'
      milliCpuPlaceholder: '例如: 2000'
      memoryPlaceholder: '例如: 2048'
    namespaceLimit:
      label: 命名空间默认限制
      placeholder: '例如: 10'
      milliCpuPlaceholder: '例如: 500'
      memoryPlaceholder: '例如: 1024'
    noData: 没有配置资源配额
  errors:
    projectLimitRequired: "项目中 {resource} 必须设置。"
    nsDefaultLimitRequired: 命令空间中 {resource} 默认限制必需设置。
    limitRequired: '{resource} 需要设置。'
    invalidLimit: '{resource} 配额总共 {total}，已使用 {used}。该已使用应小于或等于 {left}。'
  resources:
    configMaps: 配置映射
    limitsCpu: CPU 限制
    limitsMemory: 内存限制
    persistentVolumeClaims: PVC
    pods: Pods
    replicationControllers: 副本控制器
    requestsCpu: CPU 预留
    requestsMemory: 内存保留
    requestsStorage: 存储预留
    secrets: 密文
    services: 服务
    servicesLoadBalancers: 服务负载均衡器
    servicesNodePorts: 服务节点端口

formEnvVar:
  title: 环境变量
  detail: 工作负载配置的环境变量。
  noData: 当前工作负载没有配置环境变量。
  status: |
    {count, plural,
    =0{ 无变量 }
    =1{#个变量 }
    other{#个变量 }
    }
  labels:
    key: 键
    value: 值

formGlobalRoles:
  title: 全局角色
  description: 控制用户管理整个 {appName} 安装的访问权限。
  loginError: 用户没有登录权限。Administrator, Standard User 或 User-Base 提供登录权限。
  mode:
    admin:
      label: 管理员
      detail: 管理员完全控制所有集群中的全部安装和所有资源。
    user:
      label: 标准用户
      detail: 标准用户可以创建新的集群并管理他们已被授权访问的集群和项目。
    userBase:
      label: User-Base
      detail: User-Base 用户只有登录访问权限。
    userCreated:
      label: 自定义
      detail: 非 Rancher 创建的角色。
      noDescription: 没有提供描述。
    custom:
      label: 自定义
      detail: 为这个用户选择独立的权限。
  role:
    clusters-create:
      label: 创建新的集群
      detail: 允许用户创建新的集群并成为它们的所有者，标准用户默认具有此权限。
    clustertemplates-create:
      label: 创建新的 RKE 集群模板
      detail: 允许用户创建新的 RKE 集群模板并成为它们的所有者。
    authn-manage:
      label: 配置身份验证
      detail: 允许用户启用，配置和禁用所有身份验证程序设置。
    catalogs-manage:
      label: 配置应用商店
      detail: 允许用户添加，编辑和删除应用商店。
    clusters-manage:
      label: 管理所有集群
      detail: 允许用户管理全部集群，即使这个用户不是被管理集群中的成员也可以管理。
    clusterscans-manage:
      label: 管理 CIS 集群扫描
      detail: 允许用户启动新的并管理 CIS 集群扫描。
    kontainerdrivers-manage:
      label: 创建新的集群驱动程序
      detail: 允许用户创建新的集群驱动程序并成为它们的所有者。
    features-manage:
      label: 配置功能标志
      detail: 允许用户通过特性标志设置启用和禁用自定义特性。
    nodedrivers-manage:
      label: 配置主机驱动
      detail: 允许用户启用，配置和移除所有主机驱动设置。
    nodetemplates-manage:
      label: 管理主机模板
      detail: 允许用户配置，编辑和删除主机模板。
    podsecuritypolicytemplates-manage:
      label: 管理 Pod 安全策略(PSPs)
      detail: 允许用户定义、编辑和删除 psp。
    roles-manage:
      label: 管理角色
      detail: 允许用户配置，编辑和删除角色。
    settings-manage:
      label: 管理设置
      detail: 允许用户管理 Rancher 设置。
    users-manage:
      label: 管理用户
      detail: 允许用户为所有用户创建，删除和设置密码。
    catalogs-use:
      label: 使用应用商店
      detail: 允许用户查看和应用商店中的模板。标准用户默认具有此权限。
    nodetemplates-use:
      label: 使用主机模板
      detail: 允许用户使用现有的主机模板部署新的主机。
    view-rancher-metrics:
      label: 查看 Rancher 指标
      detail: 允许用户通过 API 查看指标。
    base:
      label: 登录访问

formMembers:
  owner: '{type} 所有者'
  members:
    user: 用户
    group: 用户组
    serviceaccount: 服务账号
    labelText: 成员
    addMember: 添加成员
    addUser: 添加用户
    noAddUser: 您是唯一的活动注册用户。
    addGroup: 添加组
    addServiceAccount: 添加服务帐户
    multipleRoles: 多个角色
    customRoles: 自定义角色
    kind:
      label: 类型
    name:
      label: 名称
    role:
      label: 角色
    errors:
      nameReq: 名称(必填)
      nameInExists: 名称已经存在，请使用新的项目名称。
      memberNameReq: 必须设置成员名称。
      memberRoleReq: 必须设置成员角色。
      ownerReq: 必须至少有一个具有所有者角色的成员。

formScopedRoles:
  title: '{type} 权限'
  description: '控制用户对 {type} 的访问权限。'
  mode:
    admin:
      label: 所有者
      detail: 所有者可以完全控制 {type} 和内部的所有资源。
    user:
      label: 成员
      detail: 成员可以管理 {type} 内部的资源，但不能更改 {type} 本身。
    custom:
      label: 自定义
      detail: 为用户选择单个角色
    readOnly:
      label: 只读
      detail: 成员仅可以查看 {type} 中的资源，但不能更改 {type} 本身。
    userDef:
      detail: 用户配置的角色
    role:
      read-only:
        label: 只读
        detail: 允许查看所有，但不能修改。

formShareMember:
  add: '添加成员'
  public: '转换为公有 (只读)'
  helpText: '在分配所有者时，用户必须具有<a href="/g/security/roles">Create Cluster Template</a>全局角色，以便创建新的修订。这些权限可以由管理员授予。'
  table:
    headers:
      name: '名称'
      accessType: '访问类型'
    noMatch: '没有成员匹配您的搜索'
    noData: '您没有与任何人共享此集群模板。'

shareMemberRow:
  table:
    public:
      name: '公有 (all members & groups)'
      accessType: '只读'
  accessType:
    owner: '所有者'
    member: '成员'
    'read-only': '只读用户'

formHealthCheck:
  title: 健康检查
  detail: 周期性向容器发出请求，以检测其健康状态。默认设置下，readiness 和 liveness 使用相同的配置参数。对于应用初始化较长的容器，需要增加就绪检测时间。
  readiness: 就绪状态检查(readiness)
  liveness: 存活状态检查(liveness)
  separateLivenessCheck: '单独配置存活状态(liveness)检查。'
  combinedLivenessCheck: 使用相同的就绪状态(readiness)与存活状态(liveness)配置。
  checkType:
    none: 无
    tcp: TCP 端口检查
    http: HTTP 请求状态检查(2xx 或 3xx)
    https: HTTPS 请求状态检查(2xx 或 3xx)
    command: 容器中进程退出状态码检查(0)
  command:
    label: 命令
    placeholder: '例如: cat /tmp/health'
  path:
    label: 请求路径
    placeholder: '例如: /health'
  httpHeaders:
    label: 其他的 HTTP Headers
    addActionLabel: 添加 Headers
    keyLabel: Http 头字段
    keyPlaceholder: '例如: 用户代理'
    valuePlaceholder: '例如: 健康检查'
  host:
    label: 主机 Headers
    placeholder: '例如: example.com'
  port:
    label: 容器端口
    placeholder: '例如: 80'
  initialDelaySeconds:
    label: 运行多少时间后开始检测
  reinitializingTimeout:
    label: 重新检查时间
  periodSeconds:
    label: 检查间隔
  timeoutSeconds:
    label: 检查超时
  successThreshold:
    label: 健康阈值
    unit: 成功
  failureThreshold:
    label: 不健康阈值
    unit: 失败

formKeyToPath:
  addAction: 添加项目
  header: 项目
  default: 所有键
  specific: 选择特定的键
  key:
    label: 键
    placeholder: "例如: username"
  path:
    label: 路径
    placeholder: '例如: my-group/my-username'
  mode:
    label: 模式
    placeholder: "例如: 400"

formMatchExpressions:
  addAction: 添加表达式
  key:
    label: 键
    placeholder: "例如: region"
  value:
    label: 值
    placeholder: "例如: us,eu,ap"

formKeyValue:
  addAction: 添加键值对
  key:
    label: 键
    placeholder: 键
  separator: "="
  value:
    label: 值
    placeholder: 值
  protip: '高级技巧: 在键(Key)输入栏中粘贴一行或多行的 key=value 键值对能够批量输入。'
  binary:
    byte: |
      {length, plural,
      =1 {# byte}
      other {# bytes}
      }


formImage:
  label: Docker 镜像
  container:
    placeholder: "例如: ubuntu:xenial"

formNameDescription:
  name:
    label: 名称
    placeholder: 名称
  description:
    label: 描述
    placeholder: 描述
    expand: 添加描述

formNetwork:
  title: 网络
  detail: 设置容器的网络和 DNS 选项
  netMode:
    label: 使用主机网络
    disable: "否"
    enable: "是"
  dnsPolicy:
    label: DNS 策略
    clusterFirstWithHostNet: "主机网络下使用集群 DNS 服务器"
    clusterFirst: "集群 DNS 服务器"
  dnsConfig:
    nameservers:
      label: DNS 服务器地址
      addActionLabel: 添加 DNS 服务器
      placeholder: "例如: 192.168.2.1"
    options:
      label: DNS 解析选项
      addActionLabel: 添加
      name:
        label: 名称
        placeholder: "例如: ndots"
      value:
        label: 值
        placeholder: "例如: 5"
    searches:
      label: DNS 搜索域
      placeholder: "例如: example.com"
      addActionLabel: 添加搜索域
  container:
    label: 容器
  requestedIp:
    label: 请求 IP
    placeholder: '例如: 10.42.2.24'
    help: '从 10.42.0.0/16 网段中请求指定的 IP 地址，如果此 IP 地址已经被使用则会分配随机 IP。'
  retainIp:
    label: 保持 IP
    reuse: 当升级或替换不健康的容器实例时保持 IP 地址不变。
  dns:
    label: 服务发现
    enable: 启用服务发现并使用本地缓存 DNS 服务器。
    disable: 禁用服务发现并使用外部远端 DNS 服务器。
  hostname:
    label: 主机名
    placeholder: '例如: web'
    dockerId: 使用 Docker 容器 ID
    hostName: 使用主机的主机名
    containerName: 使用容器名称
    custom: 设置主机名
  domainName:
    label: 域名
    placeholder: '例如: example.com'
  resolvingServers:
    label: 解析服务器
    addActionLabel: 添加服务器
    placeholder: '例如: 114.114.114.114'
  searchDomains:
    label: 搜索域
    placeholder: '例如: prod.example.com'
    addActionLabel: 添加搜索域
  subdomain:
    label: 子域名
    placeholder: '例如: foo'
  hostAlias:
    addActionLabel: 添加主机别名
    label: '主机别名(/etc/hosts 记录)'
    host:
      label: 主机名
      placeholder: '例如: database'
    ip:
      label: IP 地址
      placeholder: '例如: 192.168.0.1'

formCustomMetrics:
  title: 自定义指标
  detail: 配置自定义指标端口，监控系统将通过这些端口采集自定义指标。
  port:
    label: 容器端口
    placeholder: "例如: 8080"
  path:
    label: Path
    placeholder: '例如: /metrics'
  protocol:
    label: 协议
  noPorts: 没有自定义指标
  addActionLabel: 添加自定义指标

formServicePorts:
  header: 端口映射
  addAction: 添加
  noPorts: 此服务没有端口映射。
  name:
    label: 端口名称
    placeholder: "例如: myport"
  port:
    label: 服务端口
    placeholder: "例如: 8088"
  protocol:
    label: 协议
  targetPort:
    label: 目标端口（容器端口）
    placeholder: "例如: 80"
    default: "默认与服务端口相同"
  nodePort:
    label: 主机端口
    placeholder: "例如: 30000"
formPorts:
  header: 端口映射
  addAction: 添加规则
  hostPortWarning: 'Host Port 模式不支持 Windows 节点。了解更多关于 Windows 在 Kubernetes 中的<a href="https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#limitations" target="_blank">支持限制</a>。'
  warning: "这个工作负载不是由 {appName} 或 {appName} API 创建的，{appName} 不会自动为端口映射创建相关服务。"
  kind:
    label: 网络模式
    NodePort: NodePort(所有主机端口均可访问)
    HostPort: HostPort(仅 Pod 所在主机端口可访问)
    ClusterIP: 集群 IP(集群内部访问)
    LoadBalancer: L4 层负载均衡器(对接公有云负载均衡服务)
    LoadBalancerDisbaled: 'Layer-4 Load Balancer(禁用)'
    HostPortDisbaled: 'HostPort(禁用)'
  sourcePort:
    label: 主机监听端口
    placeholder: '例如: 80'
    ipPlaceholder: '例如: 80 或 19.82.2.24:80'
    clusterIpDefault: '与容器端口相同'
  nodePort:
    placeholder: '默认端口范围 30000-32768，例如: 30000'
    customPortRangePlaceholder: "端口范围 {range}，例如: {port}"
  containerPort:
    label: 容器端口
    placeholder: "例如: 8080"
  protocol:
    label: 协议
  name:
    label: 名称
    placeholder: '例如: backend'
  dnsName:
    label: DNS 记录
    placeholder: '例如: example'
  noPorts: 当前 Pod 没有映射端口
  error:
    privateRequired: 每条映射规则必须设置容器端口。
    publicRequired: 如果指定了主机 IP，则需要源端口。
    hostPort:
      sourcePortRequired: 必须设置主机端口。
    loadBalancer:
      sourcePortRequired: 每条规则必须设置源端口。
    mixedIpPort: "Port{ip}:{port}/{proto} 有超过一条映射规则。"
    mixedPort: "Port{port}/{proto} 有超过一条映射规则。"
  showAdvanced: 显示端口命名选项

formScale:
  label: 类型
  showAdvanced: 更多选项
  scaleMode:
    deploymentPrefix: "Deployment: 部署无状态应用"
    replicationControllerPrefix: "复制控制器"
    replicaSetPrefix: "副本集"
    statefulSetPrefix: "StatefulSet: 部署有状态应用"
    scaleSuffix: |
      {scale, plural,
      =1{ 个 Pod}
      other{ 个 Pods}
      }
    daemonSet: "DaemonSet: 每台主机部署 1 个 Pod"
    cronJob: "CronJob: 定时运行 Pod"
    job: "Job: 一次性运行 Pod"
    sidekickInactive: "Sidecar: 将容器添加到现有工作负载"
    sidekickPrefix: "Sidecar: 添加容器到"
    sidekickSuffix: ""

formScheduling:
  title: 主机调度
  detail: 配置 Pod 对应的主机调度规则。
  status: |
    {count, plural,
    =0{ 无规则 }
    =1{#条规则 }
    other{#条规则 }
    }
  canRequestHost:
    vm: 在指定主机上运行<b>所有</b>虚拟机
    containers: 指定主机运行<b>所有 Pods</b>
  runSpecific: 在指定主机上运行此 Pod
  noRules: 没有配置规则
  noToleration: 未配置节点污点
  autoRun: '在匹配调度规则的每个主机上自动运行'
  autoPick:
    vm: '为每一个虚拟机自动选择符合调度规则的主机'
    container: '每个 Pod 自动匹配主机'
    host: '自动选择符合调度规则的主机'
  addRule: 添加规则
  addCustom: 添加自定义规则
  condition: 条件
  field: 字段
  key: 键
  value: 值
  operator: 操作符
  effect: 影响
  time: 时间
  toleration:
    title: 调度容忍
    add: 添加调度容忍
    workloadTitle: "{workload}Pod 的容忍"
  scaling:
    minMaxDetail: 如果设置，用户将无法通过界面或 API 请求使容器数量低于最小数量或超过最大数量。
    incrementDetail: 如果设置，容器数量必须是它的倍数。
    hostMaxDetail: 如果设置，容器将最多被运行在这个数量的主机上。
  scaleMin: 最小数量
  scaleMax: 最大数量
  scaleIncrement: 伸缩增量
  hostMax: 最大主机数
  perHost: 每个主机
  priority:
    label: 优先级
    placeholder: '例如: 3'
  priorityClassName:
    label: 优先级显示名称
    placeholder: '例如: 高'
  scheduler:
    label: 调度名称
    placeholder: '例如: MyScheduler'
  nodeSelector:
    requireAll: "必须 "
    requireAny: "最好"
    preferred: "首选"
    operator:
      lt: '<'
      le: |
        &le;
      eq: '='
      ne: |
        &ne;
      gt: '>'
      ge: |
        &ge;
      in: '在列表中'
      notIn: '不在列表中'
      exists: '已设置'
      notExists: '未设置'
    multiple:
      placeholder: '例如: foo，bar，baz'
    custom:
      placeholder: '例如: foo>42 && bar != baz'

formSources:
  title: 来自其他源的环境变量。
  detail: 来自其他源的环境变量允许您将密码、密钥或其他信息注入需要它们的容器中。
  noData: 没有来自其他源的环境变量。
  noMatch: 没有匹配当前搜索的来自其他源的环境变量。
  addLabel: 添加源
  type:
    label: 类型
  source:
    label: 源
  prefixOrKey:
    label: 键
  prefix:
    label: 前缀或别名
  field:
    placeholder: "例如: spec.nodeName"
  resource:
    placeholder: "例如: requests.cpu"
  container:
    placeholder: '例如: my-container'

formSecurity:
  title: '安全/主机设置'
  detail: 授予或限制容器影响所运行主机的能力。
  pullImage:
    label: 镜像拉取策略
    always: 总是拉取
    ifNotPresent: 不存在则拉取
  privileged:
    label: 特权模式
    disable: "否"
    enable: '是: 容器具有所有主机访问权限'
  allowPrivilegeEscalation:
    label: 提升特权
    disable: "否"
    enable: '是: 容器可以获得比其父进程更多的特权'
  hostIPC:
    label: 使用主机的 IPC 命名空间
  runAsNonRoot:
    label: 以非 root 用户身份运行
    disable: "否"
    enable: '是: 容器必须以非 root 用户身份运行'
  readOnlyRootFilesystem:
    label: 只读根文件系统
    disable: "否"
    enable: '是: 容器有只读的根文件系统'
  hostPID:
    label: 使用主机的 PID 命名空间
  memoryLimit:
    label: 内存限制
    unlimited: 无限制
    set: 限制为
  cpuLimit:
    label: CPU 限制
    unlimited: 无限制
    set: 限制为
    unit: milli CPUs
  swapLimit:
    label: 交换内存
    unlimited: 无限制
    set: 限制为
    default: 限制为两倍物理内存
    none: 不允许使用交换内存
  swappiness:
    label: Swappiness
    default: 使用主机的默认值
    none: 最小
    set: 自定义(1-100)
  cpuPinning:
    label: CPU 绑定
    placeholder: '例如: 0,1,3  默认: All'
  shares:
    label: CPU 份额
    placeholder: '例如: 1024'
  capabilities:
    add: 增加内核功能
    drop: 移除内核功能
    helpBlock:
      text: 内核能力能够对容器所拥有的超级用户权限进行更细粒度的控制。
      link: 更多信息
  deviceBinding:
    label: 设备绑定
    addActionLabel: 添加绑定
    pathHost:
      label: 主机内路径
      placeholder: '例如: /dev/sdc'
    pathContainer:
      label: 容器内路径
      placeholder: '例如: /dev/xsdc'
    permissions:
      label: 权限
  memoryReservation:
    label: 内存预留
    placeholder: '例如: 128'
  milliCpuReservation:
    label: CPU 预留
    placeholder: '例如: 1000'
    unit: milli CPUs
  gpuReservation:
    label: NVIDIA GPU 预留
    placeholder: '例如: 1'
    unit: GPUs
  isolation:
    label: 隔离
    default: 默认(容器)
    hyperv: HyperV(虚拟机)

formSslTermination:
  title: SSL/TLS 证书
  detail: '配置用于端口加密的 SSL/TSL 证书。'
  defaultCertificate:
    prompt: '选择证书...'
  default:
    label: 使用默认 Ingress 证书
    noHosts: 请给默认证书证书至少配置一条域名。
  custom:
    label: 选择证书
    required: 请选择证书
  alternateCertificate:
    prompt: '选择证书...'
  certificate: 证书
  alternateCerts: 备选证书
  addAlternate: 添加备选证书
  noCertificates: 没有可用的证书。
  wildcardCert: 请提供至少一个主机，因为证书 {name} 是一个通配符证书。
  noCertificatesConfiged: 没有证书
  noAlternateCertificates: 没有其他可用的证书。
  hosts: 域名
  noHosts: 没有域名
  host:
    label: SSL 证书对应的域名 (必填)。
    placeholder: '例如: example.com'
  addHostLabel: 添加域名
  helpBlock: |
    "注意: 一些旧的 SSL/TLS 客户的不支持<a href='https://en.wikipedia.org/wiki/Server_Name_Indication' target='_blank'>Server Name Indication(SNI)</a>功能，对于这些客户端将只提供主证书。对于支持 SNI 功能的现代客户端将根据匹配结果从备选证书列表中选择一个合适的证书。"
  notNeeded: 没有配置了有效的目标规则的 SSL/TLS 的监听端口。
  removeCertLabel: 删除此证书
  addCertLabel: 添加证书

formNamespace:
  label:
    reuse: 命名空间
    create: 命名空间
    default: 默认命名空间
  toggle:
    simple: 自定义
    reuse: 使用现有的名称空间
    create: 创建新的命名空间
  reuse:
    prompt: 选择命名空间...
  create:
    placeholder: '例如: Myapp'
  errors:
    noneChosen: 您必须选择命名空间。
    validation: "命名空间: {error}"

formUserData:
  placeholder: "例如: 容器的配置信息"
  isVmPlaceholder: "例如: 虚拟机的配置信息"
formLabelsAnnotations:
  title: '标签/注释'
  detail: '用于调度决策的键值对。后端重写请配置注释: 键: nginx.ingress.kubernetes.io/rewrite-target，值: /。'
formRelatedWorkloads:
  title: 相关的工作负载
  detail: 正在使用它的工作负载
  nodata: 没有相关的工作负载
formNodeTaints:
  title: 污点（Taints）
  detail: 污点标记的节点不接受未配置容忍（tolerate）的 Pod 调度。
  addAction: 添加污点（Taint）
  protip: 必须是唯一的键值对
  key:
    label: 键
    placeholder: '例如: foo'
  value:
    label: 值
    placeholder: '例如: bar'
  effect:
    label: 影响

formUserLabels:
  title: 标签
  detail: 标签是可用于注释容器并进行调度决策的键值对。
  nodeDetail: '键/值对形式的标签将应用于主机上，用于容器的调度决策。'
  addAction: 添加标签
  key:
    label: 键
    placeholder: '例如: foo'
  separator: "="
  value:
    label: 值
    placeholder: '例如: bar'
  protip: '高级技巧: 粘贴一行或多行的 key=value 键值对能够批量输入。'

formAccessModes:
  label: 访问模式
  accessRWO: 单主机读写
  accessROX: 多主机只读
  accessRWX: 多主机读写

formAnnotations:
  addActionLabel: 添加注释
  title: 注释
  detail: '配置容器的注释(键/值元数据)。'
  errors:
    invalidJSON: JSON 注释格式无效。
    topLevelValueInvalid: JSON 注释顶级值必须是对象。

formAuthCloudCredential:
  add: 添加
  label: 云凭证
  selectCreds:
    prompt: 选择云凭证


formJobConfig:
  title: Job 配置
  detail: 配置 Job 需要的参数。
  times: |
    {count, plural,
      =1 {Time}
      other {Times}
    }
  seconds: |
    {count, plural,
      =1 {Second}
      other {Seconds}
    }
  completions:
    label: 完成
    detail: 成功运行 Job 的 Pod 的数量。
  parallelism:
    label: 并行数
    detail: Job 在给定时间内应运行的最大 Pod 数。
  backoffLimit:
    label: Back Off Limit
    detail: 标记此作业失败之前的重试次数。
  successfulJobsHistoryLimit:
    label: 历史成功 Jobs 限制
    detail: 要保留多少个成功完成的 JOB。
  failedJobsHistoryLimit:
    label: 历史失败 Jobs 限制
    detail: 要保留的未完成 JOB 的数量。
  activeDeadlineSeconds:
    label: 停止延迟时间
    detail: 在系统尝试终止 Job 之前，job 可能处于活动状态的持续时间。
  suspend:
    label: 暂停

formUpgrade:
  title: '缩放/升级策略'
  detail: 配置升级过程中替换 Pod 的策略。
  strategy:
    label: 升级策略
    orderedReady: 严格按顺序更新并等待准备就绪。
    parallel: 启动所有新 Pod 和停止所有旧 Pod 并行执行。
    onDelete: 仅当手动删除旧 Pod 时才启动升级新 Pod。
    recreate: 删除所有 Pod，然后重新开始。
    rollingUpdate: 滚动更新
    startFirst: '滚动: 先启动新 Pod，再停止旧 Pod。'
    stopFirst: '滚动: 先停止旧 Pod，再启动新 Pod。'
    custom: 自定义
    batchSize:
      label: 批量大小
      detail: Pod 将批量启动或停止
    maxSurge:
      label: 最大浪涌
      detail: 在任何给定时间内允许超出所需规模的最大 Pod 数量。
    maxUnavailable:
      label: 最大不可用
      detail: 在任意给定时间最大不可用的 Pod 数量。
    minReadySeconds:
      label: 最短准备时间
      detail: 在 Pod 被视为可用之前，Pod 中的容器需至少运行多长时间。
    progressDeadlineSeconds:
      label: 进度截止时间
      detail: 将部署标记为停滞状态之前需要等待多久时间才能看到进度。


formValueArray:
  addActionLabel: 添加值
  valueLabel: 值
  valuePlaceholder: 值
  noData: 没有数据
  protip: '高级技巧: 在任意输入栏中粘贴一行或多行的 value 能够批量输入。'

formVersions:
  experimental: "(实验)"
  dotx: "Latest {minor} (允许补丁版本升级)"
  downgrade: "(不能降级)"
  notallowed: "(模板不允许)"
  unsupported: "(不支持)"
  eks:
    label: "(minor version >1 not allowed by EKS)"
    helpBlock: "Because Amazon EKS runs a highly available control plane, you can update only one minor version at a time."
  helpBlock:
    label: 升级 Kubernetes 版本时，请查看<a href="https://groups.google.com/forum/#!forum/kubernetes-announce" target="_blank" rel="nofollow noreferrer noopener">Kubernetes release notes</a>了解功能变化。

formIstioHost:
  prompt: 选择节点...

formVolumeRow:
  prompt: 选择 PVC...
  name:
    label: 卷名
    placeholder: '例如: vol1'
  volumeClaimTemplateName:
    label: PVC 模板名
    placeholder: '例如: vol1'
    vctWarning: 由于 Kubernetes 中的一个<a href="https://github.com/kubernetes/kubernetes/issues/69041" target="_blank" rel="nofollow noreferrer noopener">BUG</a>，使用 PVC 模板启动的有状态工作负载将不可编辑。请注意，在启动新工作负载之前存在此限制。
  mode:
    label: 卷类型
    newVolume: 临时卷
    existingVolume: 已有的卷
    newPvc: PVC
    existingPvc: PVC
    existingVct: PVC 模板
    bindMount: 主机映射卷
    tmpfs: Tmpfs
    secret: 密文卷
    configmap: 配置映射卷
    certificate: 证书卷
    newVolumeClaimTemplate: 新的 PVC 模板
  remove: 删除卷
  subPath: 卷中的子路径
  readOnly: 只读
  noVolume: 卷不会被挂载到当前容器中，它可能被 Pod 中的其他容器使用。
  addMount: 添加映射
  mounts:
    mountPoint: 容器路径
    subPath: '子路径(仅适用于数据卷挂载，不适用于主机路径映射)'
    readOnly: 只读
    helper: 卷不会被挂载到当前容器中，它可能被 Pod 中的其他容器使用。
  customLogPath:
    helpText: 我们将部署 Flexvolume 驱动程序来创建卷并将日志挂载到主机，GKE 和 RKE 集群现在支持该功能。

formVolumes:
  title: 数据卷
  detail: 持久化和共享独立于单个容器生命周期的数据
  value:
    prompt: 选择容器...
  volumes: 卷
  volumesFrom: 卷来自
  volumeDriver:
    label: 卷驱动
    placeholder: '例如: rancher-nfs，默认: local'
    suggestion: '使用的存储驱动: '
  noLaunchConfigs: 此服务下没有可共享卷的启动配置。
  noHostContainers: 该主机没有可以提供共享卷的容器。
  onlySingleHost: 仅当添加容器到特定主机时适用。
  errors:
    incomplete: 尚未完成卷配置
    absoluteMountPoint: 卷挂载点必须使用绝对路径。
  add:
    label: 添加卷...
    newVolume: 添加临时卷
    existingVolume: 现有的临时卷
    newPvc: 添加新的 PVC
    existingPvc: 使用现有 PVC
    bindMount: 映射主机目录
    tmpfs: 添加内存 tmpfs
    secret: 密文卷
    configMap: 配置映射卷
    certificate: 证书卷
    customLogPath: 从目录读取日志
    vct: 添加 PVC 模板
  table:
    kind: 类型
    source: 源
    mountPoint: 挂载点
    opts: '权限/选项'

formCapabilityPodSecurityPolicy:
  title: 内核安全策略
  detail: 配置一组功能策略
  capabilities:
    allow: 启用的功能
    add: 默认添加的能力
    drop: 必须禁用的内核能力

formVolumePodSecurityPolicy:
  title: 卷策略
  detail: 控制卷类型的使用
  volumes: 数据卷

formAllowedHostPathsPodSecurityPolicy:
  title: 允许主机路径策略
  detail: 允许的主机路径的白名单
  path:
    addLabel: 添加路径前缀
    placeholder: '例如: /foo'

formFsGroupPodSecurityPolicy:
  title: FS 组策略
  detail: 分配拥有 Pod 卷的 FSGroup
  rule:
    mustRunAs: MustRunAs - 至少需要指定一个范围，使用第一个范围的最小值作为默认值，对照第一个范围中的第一个 ID 进行验证。
    runAsAny: RunAsAny - 没有默认值，允许指定任何 fsGroup ID。
  range:
    addLabel: 添加范围
    max:
      label: 最大值
      placeholder: '例如: 6'
    min:
      label: 最小值
      placeholder: '例如: 1'

formHostPortsPodSecurityPolicy:
  title: 主机端口策略
  detail: 使用主机端口
  port:
    addLabel: 添加端口范围
    max:
      label: 最大值
      placeholder: '例如: 7000'
    min:
      label: 最小值
      placeholder: '例如: 6000'

formRunAsGroupPodSecurityPolicy:
  title: 作为组策略运行
  detail: Controls which primary group ID the containers are run with.
  rule:
    mustRunAs: MustRunAs - Requires a range to be configured. Uses the first value of the range as the default. Validates against the configured range.
    mayRunAs: MayRunAs - Does not require that RunAsGroup be specified. However, when RunAsGroup is specified, they have to fall in the defined range.
    runAsAny: RunAsAny - No default provided. Allows any runAsGroup to be specified.
  range:
    addLabel: Add Range
    max:
      label: Max
      placeholder: e.g. 65535
    min:
      label: Min
      placeholder: e.g. 1

formRunAsUserPodSecurityPolicy:
  title: Run As User Policy
  detail: Controls which user ID the containers are run with.
  rule:
    mustRunAs: MustRunAs - 需要配置范围，使用范围的第一个值作为默认值。根据配置的范围进行验证。
    mustRunAsNonRoot: MustRunAsNonRoot - 要求使用非零 runAsUser 启动 Pod，或者在镜像中配置 USER 指令，不提供默认值。
    runAsAny: RunAsAny - 无默认值，允许任何 runAsUser 来指定。
  range:
    addLabel: 添加范围
    max:
      label: 最大值
      placeholder: '例如: 6'
    min:
      label: 最小值
      placeholder: '例如: 1'

formSeLinuxodSecurityPolicy:
  title: SELinux 策略
  detail: 容器的 SELinux 上下文
  rule:
    mustRunAs: MustRunAs - 使用 seLinuxOptions 作为默认值，根据 seLinuxOptions 进行验证。
    runAsAny: RunAsAny - 允许指定任何 seLinuxOptions 设置。
  level:
    label: 等级
    placeholder: '例如: dev1'
  role:
    label: 角色
    placeholder: '例如: node'
  user:
    label: 用户
    placeholder: '例如: master'

formSupplementalGroupsPodSecurityPolicy:
  title: 补充组策略
  detail: 配置允许的补充组
  rule:
    mustRunAs: MustRunAs - 需要至少指定一个范围，使用第一个范围的最小值作为默认值，针对所有范围进行验证。
    runAsAny: RunAsAny - 无默认值。允许指定任何补充组。
  range:
    addLabel: 添加范围
    max:
      label: 最大值
      placeholder: '例如: 6'
    min:
      label: 最小值
      placeholder: '例如: 1'

formBasicPodSecurityPolicy:
  title: 基本策略
  detail: 配置基本的 Pod 安全策略
  allowPrivilegeEscalation:
    label: 允许提升特权
    enable: '是: 运行允许从其父级升级特权的容器'
    disable: "否"
  defaultAllowPrivilegeEscalation:
    label: 默认允许提升特权
    enable: '是: 控制进程可以获得父进程获得更多特权'
    disable: "否"
  hostIPC:
    label: 主机 IPC
    enable: "是: 主机 IPC 命名空间"
    disable: "否"
  hostNetwork:
    label: 主机网络
    enable: "是: 使用主机网络"
    disable: "否"
  hostPID:
    label: 主机 PID
    enable: "是: 主机 PID 名称空间"
    disable: "否"
  privileged:
    label: 特权
    enable: "是: 运行特权容器"
    disable: "否"
  readOnlyRootFilesystem:
    label: 只读根文件系统
    enable: "是: 需要采用只读根文件系统"
    disable: "否"

formReservation:
  limitCpu:
    label: '{component} CPU 限制'
    placeholder: '例如: 1000'
  limitMemory:
    label: '{component} Memory 限制'
    placeholder: '例如: 1000'
  requestCpu:
    label: '{component} CPU 预留'
    placeholder: '例如: 1000'
  requestMemory:
    label: '{component} Memory 预留'
    placeholder: '例如: 1000'

hostSettings:
  header: 主机注册 URL
  subtext: 主机连接 {appName} API 的 Base URL 是？
  hostUrl:
    local: "当前站点地址:"
    new:
      labelText: "其他地址:"
      placeholder: '例如: http://example.com:8080'
  helpText:
    static1: "不要包含<code>/v1</code>或任何其他路径，但如果您设置了"
    static2: "在 {appName} 前面，请确保使用<code>https://</code>."
    isRancher: '<a href="{docsBase}/installing-rancher/installing-server/basic-ssl-config/" target="_blank">SSL 终止</a>'
    sslTerm: SSL 终止
  notPublic:
    alert: |
      确定要创建的所有主机都能够连接<code>{activeValue}</code>？<br/>当前地址似乎是私有 IP 或内部网络。
  badTld:
    alert: |
      '<code>.local</code>顶级域名根据 RFC6762 被保留为用于多播 DNS。不推荐使用.local 域名作为注册 URL，该设置可能导致 DNS 解析问题。请选择其他的主机名或者 IP 地址。'

hostPod:
  supportState:
    unsupported: 不支持的 Docker 版本
    untested: 未测试的 Docker 版本
  groupedInstances:
    namespace: '命名空间:'
    stack: '应用:'
    standalone: 独立容器

identityBlock:
    loading: 加载中...


inputAnswers:
  yaml: 编辑 YAML
  config: 配置选项
  editAsForm: 编辑表单
  yamlConfig: '粘贴或者上传 yml/yaml 格式的应答参数'
  yamlProtip: '您可以在下面的预览部分，找到该应用的默认应答值'
  unknownType: "未识别问题类型:"
  noConfig: 该模板没有配置选项
  protip: '粘贴和读取操作要求应答为 yml/yaml 格式'

inputIdentity:
  placeholder:
    github: 添加 GitHub 用户或组织名称
    generic: 添加用户名或组名
  dropdownLabel:
    teams: 团队和组织
    groups: 组织

inputPassword:
  buttonText: 生成

inputTextFile:
  tooltip: 从文件读取

nodeGroupRow:
  name:
    label: 节点组名称
  instance:
    label: 实例类型
  gpu:
    label: 启用GPU实例
  max:
    label: Maximum ASG Size
  min:
    label: Minimum ASG Size
  desired:
    label: Desired ASG Size
  nodeVolumeSize:
    label: Node Volume Size
    placeholder: e.g. 20
  ssh:
    label: SSH Key
  labels:
    label: Labels
    addLabel: Add Label
  tags:
    label: Tags
    addLabel: Add Tag
  remove:
    label: 删除节点组


uploadFile:
  label: 从文件读取

podsSection:
  title: Pods
  detail: 当前工作负载中的所有 Pods。

containersSection:
  title: 容器
  detail: Pod 中的容器
  noData: 没有容器
  noMatch: 没有容器与当前搜索匹配
  initContainer: Init Container

managedImportClusterInfo:
  title: "{provider} 选项"
  detail: "自定义 {provider} 集群选项"
  kubernetesVersion: Kubernetes 版本
  workerConcurrency: Worker 并发数
  serverConcurrency: Control Plane 并发数
  drainServerNodes: Drain Control Plane Nodes
  drainWorkerNodes: Drain Worker Nodes
  error:
    int: 并发数必须是整数值

k3sNodeEnvVarSection:
  title: K3S 节点环境变量
  detail: 只读取此 K3S 节点的环境变量列表。
  key: Key
  value: Value
  noData: 没有环境变量
  noMatch: 没有环境变量与当前搜索匹配

labelsSection:
  kind: 类型
  title: 标签
  detail: '键/值可以被用在主机调度规则里和一些其他的高级设置中。'
  status: |
    {count, plural,
    =0{ 无标签 }
    =1{#个标签 }
    other{#个标签 }
    }
  key: 键
  value: 值
  noData: 没有标签
  noMatch: 没有标签与当前搜索匹配

loginShibboleth:
  buttonText: 用 Shibboleth 登录

loginGithub:
  buttonText: 用 GitHub 登录

loginGoogle:
  buttonText: 用 Google 登录

loginAzure:
  buttonText: 用 Azure AD 登录

loginSaml:
  ping:
    buttonText: "使用 Ping 登录"
  adfs:
    buttonText: "使用 AD FS 登录"
  okta:
    buttonText: "使用 Okta 登录"
  keycloak:
    buttonText: "使用 Keycloak 登录"
  shibboleth:
    buttonText: 通过 Shibboleth 登录

loginUserPass:
  local: 使用本地用户
  externalProvider: 使用 {externalName} 用户
  provider: "{kind}"
  userLabel: 用户名
  remember: 记住
  userPlaceholder: '例如: jsmith'
  genericLoginLabel: 登录
  loginLabel: 通过 {provider} 登录
  loggingInLabel: '登录中...'
  passwordLabel: 密码

loggingPage:
  targetNav:
    experimental: 实验性
    tips:
      caseA: 当前 {pageScope} 未启用日志收集功能。
      caseB: 当前日志收集目标是<code class="text-capitalize">{currentTarget}</code>，点击下面的保存按钮将禁止当前 {pageScope} 的日志收集。
      caseC: 当前日志收集目标是<code class="text-capitalize">{currentTarget}</code>。
      caseD: 点击下面的保存按钮去设置<span class="text-info text-capitalize">{targetType}</span>为日志收集目标服务。
      caseE: 点击下面的保存按钮来更新<span class="text-info text-capitalize">{targetType}</span>配置。
      caseF: 没有日志收集目标服务，完成以下设置并保存<code class="text-capitalize">{targetType}</code>为日志收集目标服务。
  targetTypes:
    embedded: Embedded
    elasticsearch: Elasticsearch
    splunk: Splunk
    kafka: Kafka
    syslog: Syslog
    fluentd: Fluentd
    disable: 禁用
  endpoint: 访问地址
  endpointPlaceholder: '例如: https://192.168.1.10:9200'
  logging: 日志收集
  clusterHeader: 集群日志收集
  projectHeader: 项目日志收集
  helpText:
    cluster: 我们将使用 fluentd 从每个容器收集<b>stdout/stderr</b>日志，以及在每个主机上<code>/var/log/containers/</code>路径下的日志文件，日志将被发送到被选择的目标服务。
    clusterTarget: 当前日志收集目标是<code class="text-capitalize">{clusterTargetType}</code>。如果项目日志收集启用，日志将被发送到集群目标和项目目标。
    noClusterTarget: 日志收集默认禁用
  tags:
    keyPlaceholder: '例如: foo'
    valuePlaceholder: '例如: bar'
    addActionLabel: 添加字段
  keyValueForm:
    keyPlaceholder: '例如: 192.168.1.10'
  targetKafka:
    addActionLabel: 添加代理
    host: 主机
    port: 端口
  logPreview:
    header: 日志格式预览
  additional:
    header: 其他日志配置
    fields:
      header: 自定义 Log 字段
      helpText: 以键值对的形式添加自定义字段，以便更好地进行过滤。
    flushInterval:
      header: 刷新时间间隔
      label: 刷新时间间隔
      placeholder: '例如: 1'
      sec: 秒
      helpText: 日志刷新频率
    includeSystemComponent:
      label: 包含系统日志
    jsonParsing:
      label: 支持 JSON 解析
  advanced:
    file: 以文件形式编辑
    cancel: 以表单形式编辑

  elasticsearch:
    header: Elasticsearch 配置
    endpointHelpText: 输入云端 Elacticsearch 地址，或者私有部署的 Elacticsearch 地址。
    endpointProtocolError: 访问地址应该以"http://"或者"https://"开头。
    endpointHostError: 请输入主机名或域名。
    xpack:
      header: X-Pack 安全
      headerOptional: (可选)
      helpText: 如果您的 Elasticsearch 开启了 X-Pack 内置的本地身份验证功能，请在下面设置用户名和密码。
      username: 用户名
      usernamePlaceholder: '例如: John'
      password: 密码
      passwordPlaceholder: 密码
    indexPatterns:
      header: 索引配置
      helpText: 配置用于生成 Elacticsearch 索引的参数。
      prefix: 前缀
      prefixPlaceholder: '例如: logstash'
      dateFormat: '日期格式:'
      errors:
        startsWith: '前缀不能以 -, _, + 开始'
        required: 必须添加前缀
        invalidCharacters: "前缀不能包含'{char}'"

    generatedIndex: '生成的索引格式为: <code class="text-italic">{esIndex}</code>，默认索引格式为: {indexFormat}。'
    endpoint:
      required: 必须配置访问地址。
  splunk:
    header: Splunk HTTP 事件收集配置
    helpText: '您可以<a href="http://docs.splunk.com/Documentation/Splunk/7.0.0/Data/UsetheHTTPEventCollector" target="_blank">点击这里</a>找到如何配置 Splunk HEC(HTTP 事件收集器)的说明。'
    token: Token
    tokenPlaceholder: Your Token
    tokenHelpText: 'Token 是允许日志收集程序和 HTTP 客户端连接到 HEC 的验证信息，<a href="http://docs.splunk.com/Documentation/Splunk/7.0.0/Data/UsetheHTTPEventCollector#Configure_HTTP_Event_Collector_on_Splunk_Enterprise" target="_blank">了解详情</a>。'
    tokenRequired: 必须配置 Token。
    endpointRequired: 必须配置访问地址。
    source: 日志源
    sourcePlaceholder: '例如: fluentd'
    sourceHelpText: '标识事件来源的默认字段，即事件发生的位置，<a href="https://docs.splunk.com/Splexicon:Source" target="_blank">了解详情</a>。'
    index: Index
    indexPlaceholder: '例如: main'
    indexHelpText: '您在此处指定的索引必须在此令牌的允许索引列表中，<a href="https://docs.splunk.com/Splexicon:Index" target="_blank">了解详情</a>。'
    endpoint:
      placeholder: '例如: https://192.168.1.10:8088'
  kafka:
    header: Kafka 配置
    endpointType: 访问端点类型
    zookeeper: Zookeeper
    broker: Broker
    brokerTypeHelpText: 使用 Zookeeper 或 Broker 作为 Kafka 连接入口点。
    zookeeperHelpText: Zookeeper 用于构建协调、配置管理、master 检测、检测 kafka 集群中的节点更新。
    brokerHelpText: Kafka 集群由一个或多个 Broker 组成，为每个 Broker 配置主机和端口。
    addEndpoint: 访问地址
    topic:
      label: 主题
      required: 主题必须填写
    topicPlaceholder: '例如: message'
    topicHelpText: 日志将发送到这个主题。
    endpoint:
      required: 必须配置访问地址。
      broker:
        placeholder: '例如: https://192.168.1.10:9092'
      zookeeper:
        placeholder: '例如: https://192.168.1.10:2181'
  syslog:
    endpointPlaceholder: '例如: 192.168.1.10:514'
    header: Syslog 配置
    endpointHelpText: 在这里输入日志服务器的接入地址，选择 TCP 将显示 SSL 证书配置。
    program: 程序名
    programPlaceholder: '例如: MyProgram'
    programHelpText: 日志中的程序名称。
    severityHelpText: '<p class="text-info text-small">日志的严重性列表可以在这里找到<a href="https://tools.ietf.org/html/rfc5424#section-6.2.1" target="_blank">，了解详情</a>。</p>'
    severities:
      emergency: 紧急
      alert: 警报
      critical: 危险
      error: 错误
      warning: 警告
      notice: 注意
      info: Info
      debug: Debug
    tokenHelpText: '将 Token 令牌添加到每个系统日志消息的结构化数据中。对于像<a href="https://help.sumologic.com/Send-Data/Sources/02Sources-for-Hosted-Collectors/Cloud-Syslog-Source" target="_blank">Sumologic</a>, <a href="https://www.loggly.com/docs/customer-token-authentication-token" target="_blank">Loggly</a>等云日志系统，您可以在其配置页面上生成 Token 令牌。'
    endpoint:
      required: 必须配置访问地址。
  fluentd:
    header: Fluentd 配置
    compress:
      label: 启用 Gzip 压缩
      helpText: 启用 Gzip 压缩可减少传输数据大小。
    endpoint:
      label: 访问地址
      placeholder: '例如: 192.168.1.10:24224'
      invalid: 访问地址需要填写端口
      required: 必须配置访问地址。
    password:
      label: 密码
      placeholder: 用于身份验证的用户名密码
    sharedKey:
      label: 共享密钥
      placeholder: 用于身份验证的共享密钥
    standby:
      label: 仅作为备用
      none: 需要一个非待机访问地址.
    username:
      label: 用户名
      placeholder: 用于身份验证的用户名
    weight:
      label: 权重
      placeholder: 此访问地址的负载平衡权重。
    addServer: 添加 Fluentd 服务
    endpointHostError: 访问地址不能以 http 或 https 开头。
    endpointPortError: 访问地址需要添加端口。
    removeFluentServers: 删除此 Fluentd 服务
    enableTls:
      label: 启用 TLS
    certificate:
      label: PEM 格式的 CA 证书
    hostname:
      label: 主机名
      placeholder: 服务器主机名
  customTarget:
    type:
      error: "@type 不支持, 你可以选择以下类型: ['elasticsearch', 'splunk_hec', 'remote_syslog', 'kafka_buffered', 'forward']"
  ssl:
    sslHeader: "{authType} 配置"
    headerHelp: 输入 HTTPS 地址或选择 TCP 开启 SSL 配置
    certificate:
      label: PEM 格式的 CA 证书
    clientKey:
      label: 客户端私钥
    clientCert:
      label: 客户端证书
    clientKeyPass:
      label: 客户端私钥密码
      password:
        placeholder: 客户端私钥密码
    verify:
      label: SSL 校验
      enabled: '启用'
      disabled: 禁用
    sslVersion:
      label: SSL 版本
    saslType:
      label: 类型
      plain: Plain
      scram: Scram
    saslUsername:
      label: 用户名
      placeholder: '例如: John'
    saslPassword:
      label: 密码
      placeholder: 密码
    saslScramMechanism:
      label: 安全机制
      sha256: sha256
      sha512: sha512
    customTarget:
      help: 您可以将路径复制到文件中。
      copyAll: 复制所有键和值。

  dockerRootDir:
    header: Docker 配置
    label: Docker 根目录
    placeholder: "输入 Docker 根目录，默认值为 {dir}"

  testAction:
    testing: 测试
    testOk: 设置验证通过。
    testFailed: 设置验证失败，请检查配置。
    test: 测试
    running: 运行中
    runOk: 试运行成功。
    dryRun: 试运行。

machineTemplatesPage:
  title: 添加主机
  new:
    helpText: 启动新的主机或通过 SSH 导入已经运行 Docker 的主机。
    btn: 设置
  custom: 自定义添加一台现有的正在运行 Docker 的主机。
  templateBox:
    button: 选择
    labels:
      region: 实例所在地区
      zone: 区域

modalDeleteIstio:
  title: '您确定要禁用:'
  onlyIstio:
    true: 仅 Istio
    false: 包括 Istio 和 Monitoring
  disable: 禁用
  disabling: 禁用中

newCertificate:
  title:
    new: 添加证书
    edit: '编辑证书: {name}'
    view: '证书: {name}'
  key:
    label: 私钥
    required: 必须填写私钥
    invalidFormat: 私钥无效
    placeholder: "粘贴或导入私钥，以-----BEGIN RSA PRIVATE KEY-----开头"
  cert:
    label: 证书
    required: 必须填写证书
    invalidFormat: 无效的证书
    placeholder: "粘贴或导入证书，以-----BEGIN CERTIFICATE-----开头"
    protip: 包括全部所需的证书链
    tooltip: '粘贴用于验证 server 证书的 CA 证书，它将生成在 kubecfg 文件中。 查看<a href="https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#authorized-cluster-endpoint" target="blank"
    >更多信息</a>。'
  certChain:
    label: 证书链
    placeholder: "粘贴或导入证书，以-----BEGIN CERTIFICATE-----开头"
  metaXML:
    label: 元数据 XML
    placeholder: "粘贴 IDP Metadata XML"
  publicKey:
    label: SSH 公钥
    required: 必须填写公钥
    invalidFormat: 公钥无效
    placeholder: "粘贴或导入证书，以'ssh-rsa', 'ssh-dss', 'ssh-ed25519', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', or 'ecdsa-sha2-nistp521'开头。"
  errors:
    encrypted: 私钥不能被密码保护
    key:
      required: 必须填写私钥
      invalidFormat: 私钥无效，请确保它是 RSA 密钥。
    cert:
      required: 必须填写证书
      invalidFormat: 证书无效

modalAboutComponent:
  component: 组件
  version: 版本
  cattle: Cattle
  cli: 命令行
  ui: 用户界面
  helm: Helm
  machine: 主机
  linuxImageList: Linux 镜像列表
  windowsImageList: Windows 镜像列表

modalAddPayment:
  header: 添加新的付款方式
  save: 保存
  errors:
    cc: 不正确的信用卡号码
    exp: 不正确的有效期
    cvc: 不正确的 CVC number
    street: 街道信息为必填项
    city: 城市信息为必填项
    state: 省份信息为必填项
    zip: 邮编信息为必填项
  form:
    currency:
      label: 选择币种
    cc:
      label: 信用卡号码
      placeholder: '• • • • • • • • • • • •'
    default:
      label: 默认卡
    name:
      label: 所有者名称
      placeholder: '约翰 · 史密斯'
    exp:
      label: 有效期
      placeholder: '••/••'
    cvc:
      label: CVC 号码
      placeholder: '•••'
    address:
      addressLine1:
        label: 地址栏 1
        placeholder: 742 Evergreen Terrace
      addressLine2:
        label: 地址栏 2
        placeholder: 'Apt. 123'
      city:
        label: 城市
        placeholder: Shanghai
      state:
        label: 省
        placeholder: Shanghai
      zip:
        label: 邮编
        placeholder: '518000'
      country:
        label: 国家
        placeholder: 中国
  currencies:
    yuan: "人民币(¥)"
    euro: "欧元(€)"
    dollar: "美元($)"

modalAddCloudKey:
  name:
    placeholder: '例如: production-credentials'
  description:
    placeholder: '例如: cloud credential for production'
  header:
    new: 添加云凭证
    edit: 编辑云凭证
  type: 凭证类型
  saving:
    validating: 确认键
  errors:
    validation: '{ status }: 验证密钥时出现问题，请输入有效凭证，然后重试。'
    region: 您必须选择一个区域来验证您的密钥。
  typeSelect:
    prompt: 选择云凭证提供商类型
  amazonec2:
    accessKey:
      label: Access Key
      placeholder: Your AWS access key
    secretKey:
      label: Secret Key
      placeholder: Your AWS secret key
  azure:
    clientId:
      label: Client ID
      placeholder: Your Client ID
    clientSecret:
      label: Client Secret
      placeholder: Your Client Secret
  digitalocean:
    accessToken:
      label: Access Token
      placeholder: 您的 DigitalOcean API 访问令牌。
      help: |
        粘贴来自 DigitalOcean 的<a href="https://cloud.digitalocean.com/settings/api/tokens" target="_blank" rel="nofollow noreferrer noopener">Applications & API</a>。
  linode:
    token:
      label: 访问令牌
      placeholder: 您的 Linode API 访问令牌
      help: |
        从 Linode 粘贴个人访问令牌<a href="https://cloud.linode.com/profile/tokens" target="_blank" rel="nofollow noreferrer noopener">API Tokens</a> screen
    authAccountButton: '下一步: 配置实例'
  oci:
    userOcid:
      label: 用户 OCID
      placeholder: 用户的OCID
    userFingerprint:
      label: 用户指纹
      placeholder: The fingerprint corresponding to the specified user's private API Key
    secretKey:
      label: User Private Key
      placeholder: The private API key contents for the specified OCI user, in PEM format
    secretKeyPassphrase:
      label: User Private Key Passphrase
      placeholder: The passphrase (if any) that protects private key file the specified OCI user
    tenancyOcid:
      label: Tenancy OCID
      placeholder: The OCID of the tenancy in the user account exists

  vmwarevsphere:
    password:
      label: 密码

modalConfirmYaml2Form:
  header: '您将从 YAML 编辑切换到表单编辑。'
  helpText: '请注意，此列表并不包括所有的答案，您应该在保存前校验您的配置。当切换回表单编辑时，可能会发生数据丢失，以下字段已被标识为将丢失的字段。在点击确认之前，请确认丢失的字段不会受影响。'
  confirm: 确认

modalContainerStop:
  header: '确认要停止吗？'
  helpText: '在超时时间后容器将被强制停止。'
  protip: "高级技巧: 在点击停止按钮时按住 {key} 键以跳过此确认提示。"
  label: 超时
  button: 停止


modalConfirmDeactivate:
  header: 是否确认？
  protip: "高级技巧: 在点击 {isServiceButton} 时按住 {key} 键以跳过确认操作。"
  cancel: 取消
  nodeDriver: '您将无法在使用此驱动程序的节点池中创建、替换或删除节点。'
  clusterDriver: '您将不能再使用此驱动程序编辑集群配置。提供程序中的资源不会自动删除。'
  buttons:
    project:
      message: 停用环境
      button: 停用
    environment:
      message: 停止服务
      button: 停止服务
    default:
      message: 停用
      button: 停用

modalConfirmRemovePayment:
  header: '确认移除付款信息'
  title: '是否确认要删除'
  card: '以 {card} 结尾的信用卡'

modalDeleteGroupRoleBinding:
  header: '您确定要删除组的所有权限吗: {groupName}'
  createLabel: 确定删除

modalEditDriver:
  header:
    create: 添加驱动
    edit: 编辑驱动
  url:
    label: 下载 URL
    help: 64 位 Linux Docker-Machine 驱动下载地址。
  uiUrl:
    label: 自定义 UI URL
    help: '可选项: 用于加载本驱动程序的自定义添加主机界面的 URL'
    link: 参考<a href="https://github.com/rancher/ui-driver-skel" target="_blank">ui-driver-skel</a>以了解更多信息。
  checksum:
    label: 校验和
    help: '可选: 检验下载的驱动是否匹配期望的校验和。'
  whitelist:
    label: '域名白名单(测试的时候，如果不知道填写什么域名，可以考虑填写 0.0.0.0/0)'
    addActionLabel: 添加
    noData: 没有域名


modalEditSetting:
  title: 编辑高级设置
  name:
    label: 名称
  value:
    label: 值
    prompt: 选择值...
  reset:
    label: 重置为默认值

modalEditPassword:
  firstLogin:
    title: "欢迎使用 {appName}"
    help: '第一步: 请为默认<code>admin</code>用户设置强密码'
    actionButton: 继续
  edit:
    title: 修改密码
    help: 请输入新密码
  current: 旧密码
  new: 新密码
  confirm: 确认密码
  mismatch: 密码不匹配
  actionButton: 确认修改
  mode:
    generate: '随机生成新密码: '
    manual: '自定义新密码: '
  deleteTokens: 删除所有现有的 API KEY

modalFeedback:
  header: "欢迎使用 {appName}!"
  subtitle: "在开始使用前，请让我们了解关于您的信息..."
  send: 开始使用

modalHostEvacuate:
  header: "确认进行疏散操作"
  helpText: "此操作将停用该主机并删除主机上所有运行的非基础设施容器"
  protip: "进阶提示: 在点击时按住 {key} 键以跳过确认操作"
  button: 疏散

modalImport:
  title: 导入 YAML
  mode:
    label: 导入模式
    cluster: "集群: 将资源导入到此集群中"
    project: "项目: 将资源导入此项目"
    namespace: "命名空间: 将资源导入指定的命名空间"
  detail:
    cluster1: 如果资源指定了命名空间，那么会自动创建命名空间，但是不会自动加入到项目中。
    cluster2: 如果资源没有指定命名空间，它将被导入到 default 命名空间中。
    cluster3: '该模式还支持没有命名空间的资源，例如: RoleTemplates。'

    project1: 不指定命名空间的资源将被导入到选定的默认命名空间中。
    project2: 如果资源指定了不存在的命名空间，此命名空间将被创建并添加到这个项目中。

    namespace1: 所有资源将被导入到选定的命名空间中。
    namespace2: 如果资源指定了不同的命名空间，则导入将失败。


modalProcessError:
  header: 异常信息
  cause: "原因: "
  none: 'N/A'
  stackTrace: "堆栈跟踪: "
  close: 关闭

drainNode:
  titleOne: '驱散节点: "{name}"'
  titleMultiple: '驱散 {count} 个节点'
  action: 驱散
  deleteLocalData: 删除本地数据
  force: 强制
  safe:
    label: 安全
    helpText: 如果节点拥有独立的 Pod 或临时的数据，它将被隔离但不会被驱散。
  aggressive:
    label: 强制
    helpText: "<b>永久删除</b> <ul class=m-0><li>独立 Pods 和它们的数据</li><li>配置了 Empty Dir 卷的 Pods 和它们的数据</li></ul>"
  gracePeriod:
    title: 'Pod 终止延时时间: '
    default: 使用每个 Pod 中设置的默认延时时间
    placeholder: '例如: 30'
    custom: "自定义延时时间: "
    view:
      custom: "忽略默认值并给每个 pod 设置 {seconds} 秒"
  timeout:
    title: "驱散超时时间: "
    default: 一直不断重试
    placeholder: '例如: 60'
    custom: "自定义超时时间: "
    view:
      custom: "{seconds} 秒后放弃"

modalRevertSettings:
  title: "将 {setting} 还原为默认值?"
  current: 当前值
  default: 默认值

modalRestoreBackup:
  title: 数据恢复
  backups: 可用备份
  error: 需要备份
  fetching: 获取新的备份
  restoreButton: 恢复
  select:
    all: 选择备份
  type:
    label: 恢复类型
    etcd: Restore etcd
    k8sVersion: "恢复 etcd 和 Kubernetes 版本"
    versionUnknown: '未知'
    etcdAndK8sVersion: "恢复 etcd，Kubernetes 版本和 RKE 集群配置"
    k8sVersionUnknown: 我们无法还原此快照的 kubernetes 版本，因为该版本未知。

modalRotateCertificates:
  title: 更新集群证书
  caCerts: 更新集群 CA 证书和所有服务证书
  servicesCa: 更新所有服务证书(CA 证书不变)
  services: 更新所有服务证书(CA 证书不变)
  single: 更新单个服务(CA 证书不变)
  dropdownLabel: 服务
  select:
    all: 选择服务...
  expiring:
    until: '{ cert } (expires { expiresIn })'
    from: '{ cert } (expired { expiresIn })'

modalRollbackService:
  title: '回滚"{instanceName}"'
  titleWithSidekicks: '回滚"{instanceName}"&{count, plural,=1{#个 sidecar} other {#个 sidecars}}'
  action: 回滚
  current:
    label: 当前版本
  revisionId:
    label: 回滚到版本
    prompt: 选择版本..
  difference:
    label: 区别

modalRollbackApp:
  title: '回滚 "{appName}"'
  protip: '"回滚"操作将创建一个与所选修订具有相同配置的新修订。'
  action: 回滚
  current:
    label: 当前版本
  revision:
    label: 回滚到版本
    prompt: 选择版本...
  difference:
    label: 差异

modalSaveRkeTemplate:
  title: "通过 {clusterName} 创建 RKE 模板"
  subtitle: 从当前集群配置创建一个新的 RKE 集群模板和初始修订。这将修改当前集群，设置集群以使用新创建的集群模板和修订
  name: 集群模板名称
  revName: 集群模板修订名称
modalShell:
  title: "命令行: "

modalShortcuts:
  world: 世界
  time: 时间
  title:
    rancher: "欢迎来到传送门！"
    pl: 快捷键
  global: 全局
  cluster: 集群
  project: 项目
  other: 其他东西
  shift: Shift-{key}
  delete: '删除所选择的(在表视图中)'
  kubectl: Kubectl Shell

  viewGroup: 切换分组视图
  nextTab: 下一页
  search: 聚焦搜索字段
  shortcuts: 您在这里

modalYaml:
  title:
    new: 导入 {type}YAML
    edit: '编辑 YAML: {name}'
    view: '查看 YAML: {name}'
  noData: 没有 {name} 资源。
modalWechat:
  title: '扫码关注 Rancher 中国微信技术群'
  wechat: 微信
modalWelcome:
  header: "欢迎使用 {appName}!"
  closeModal: 确认

namespaceGroup:
  label: "命名空间: {name}"
  none: Pod
  project: "命名空间: 全部"

nodeGroup:
  label: "主机: {name}"

newIngress:
  header:
    add: 添加规则
    edit: 编辑规则
  error:
    noRules: "您必须有一个或多个规则。"
newBalancer:
  header:
    add: 添加负载均衡
    edit: 编辑负载均衡
    upgrade: 升级负载均衡
  error:
    noRules: "必须有一个或多个目标规则和监听端口。"
    noSourcePort: "每条规则必须设置源端口。"
    invalidSourcePort: "不正确的源端口: '{num}'"
    invalidTargetPort: "不正确的目标端口: '{num}'"
    mixedPort: 端口 {num} 有多条冲突的访问'/'协议规则
    noTarget: "每条规则必须设置目标端口"
    noTargetPort: "每个规则需要设置目标端口。"
    needsCertificate: '设置 SSL/TLS 规则时需要证书。'
    stackName: "请输入新应用的名称"

newCatalog:
  istio:
    catalog: 'Traffic Rules Catalog:'
    saveNew: '创建'
  answers:
    label: 应答
    addAction: 添加应答
  catalog: "应用商店:"
  category: "类别:"
  config: 配置选项
  helm:
    label: 配置选项
    protip: Helm 模板接受逗号做为分隔符的字符串列表。
    options:
      label: Helm 选项
      wait:
        label: Helm 等待
        help: 在将应用程序标记为激活之前，等待所有的 Kubernetes 资源准备完成，如果超过超时时间，应用程序安装将失败。
      timeout:
        label: Helm 超时
        help: 等待 Kubernetes 命令完成的超时时间。
  kind: "应用商店类型:"
  license: "授权:"
  maintainedBy: 由社区成员维护
  maintainer: "维护者:"
  newNamespace: 新的命名空间
  customizeNamespace: "此应用程序将被部署到<code>{namespaceId}</code>命名空间。"
  newAppDetail: 选择应用程序版本和对应的命名空间。
  appInfo: 详细描述
  appInfoDetail: 应用程序信息和用户 guid
  noConfig: 该模板没有配置选项
  official: 官方认证
  preview: 预览
  forceUpgrade: 如果升级过程中需要，删除和重新创建资源。
  forceRollback: 如果在回滚期间需要，删除和重新创建资源。
  templateFiles: 模版文件
  requiredNamespace: 需要指定命名空间
  seeMore: 更多信息...
  saveConfigure: 设置
  saveNew: 启动
  saveUpgrade: 升级
  selectVersionAdd: 选择模板版本部署
  selectVersionConfigure: 选择模板版本设置
  selectVersionUpgrade: 选择版本升级
  startService: 创建后启动服务
  support: "支持:"
  templateVersion: 模板版本
  titleAdd: "添加 {name} 应用"
  titleConfigure: "设置 {name} 应用"
  titleUpgrade: "升级 {name} 应用"
  txt: answers.txt
  unknownType: "未识别的问题类型:"
  upgrade: "升级:"
  url: "项目 URL:"
  version:
    prompt: 选择版本...
    default: '当前默认(当前版本 {version})'
  error:
    appData: 数据加载错误

newMultiClusterApp:
  answers:
    label: 应答
    addAction: 添加应答
  access:
    noAccessLink: 您无法访问目标项目
  catalog: "应用商店: "
  category: "类型:"
  config: 配置选项
  helm:
    label: 配置选项
    protip: Helm 模板接受逗号分隔的字符串列表。
  kind: "商店类型:"
  license: "许可:"
  maintainedBy: 由社区成员维护
  maintainer: "维护人员:"
  newNamespace: 新的命名空间
  customizeNamespace: "此应用程序将部署到<code>{namespaceId}</code>命名空间中。"
  newAppDetail: 为应用程序选择应用程序版本和名称空间。
  appInfo: 详细描述
  appInfoDetail: 应用程序信息和用户指南。
  noConfig: 此模板没有配置选项。
  official: 官方认证
  preview: 预览
  templateFiles: 模板文件
  seeMore: 更多信息...
  saveConfigure: 配置
  saveNew: 执行
  saveUpgrade: 升级
  selectVersionAdd: 选择要部署的模板的版本。
  selectVersionConfigure: 选择要配置的模板的版本。
  selectVersionUpgrade: 选择要升级到的模板版本。
  startService: 创建后启动服务
  support: "支持: "
  targets:
    label: 目标项目
    add: 添加目标
    prompt: 添加目标项目
    target: 目标
    cluster: 集群
    project: 项目
    noData: 当前没有目标
  targetDivider:
    label: 目标驱动
  upgradeDivider:
    label: 更新
  rolesDivider:
    label: 角色
  templateVersion: 模板版本
  titleAdd: "添加 {name} App"
  titleConfigure: "配置 {name} App"
  titleUpgrade: "升级 {name} App"
  txt: answers.txt
  unknownType: "无法识别的问题类型: "
  upgrade: "升级:"
  url: "Project URL:"
  version:
    prompt: 选择版本...
    default: 当时的默认值 (当前 {version})
  overrides:
    label: 应答参数
    detail: '在每个集群/项目的基础上覆盖单个应答参数。'
    dropdown:
      allProjects: "集群 {clusterName} 中的所有项目。"
      clusterGroup: "集群: {clusterName}"
    add:
      label: 添加应答参数
    table:
      scope: 区域
      question: 问题
      answer: 回答
      noData: 当前没有应答参数
      noMatch: 没有应答参数匹配当前搜索
    scopeOverride:
      placeholder: 选择区域
    questionOverride:
      placeholder: 选择问题
    answerOverride:
      placeholder: 问题需求
  roles:
    title: 角色
    detail: 选择查看此应用程序所需的角色
    label: 可用的角色
    radios:
      cluster: '集群 - 该应用程序将能够访问和管理部署在集群中的所有资源。'
      project: '项目 - 该应用程序将能够访问和管理它所部署的项目中的资源。'
    help: '注意: 这可能不是完整的角色列表。该列表仅限于用户可用的角色。如果您缺少所需的角色，请询问您的系统管理员。'
    additionalRoles: 现有的角色
    noRoles: '您不能添加新角色，因为您没有任何可用的角色。请联系系统管理员获得角色访问权。'
    table:
      role: 角色
      name: 名称
      builtIn: 内置
      external: 扩展
      noData: 当前没有角色
      noMatch: 没有角色匹配当前搜索
      prompt: '选择角色...'
  members:
    title: 成员
    detail: 选择可以查看此应用程序的成员
    table:
      name: 名称
      type: 成员类型
      accessType: 访问类型
      noData: 目前还没有成员
      noMatch: 没有成员匹配当前搜索
      prompt: 选择值…
  upgradeApp:
    title: 升级策略
    disabled: 同时升级所有应用
    enabled: '滚动更新(批量更新)'
    batch: 批量大小
    interval: 时间间隔

newContainer:
  add:
    container: 部署 Pod
    service: 部署工作负载
    globalService: 添加全局工作负载
    sidekick: '部署 Sidecar'
    sidekickName: '部署 {name} 的 Sidecar'
  upgrade:
    container: 升级容器
    service: 升级服务
    globalService: 升级全局服务
    sidekick: 升级 Sidecar
    sidekickName: '升级 {name} 的 Sidecar'
  saveUpgrade: 升级
  saveNew: 启动
  windows: Windows
  linux: Linux
  all: Any
  os: Target OS
  name:
    placeholder: '例如: Myapp'
  description:
    placeholder: '例如: 我的应用'
  environment:
    label: 环境变量
    from: 引用其他资源
    detail: '设置容器可见的环境变量，包括从其他资源(如密文等)注入的值。'
    addAction: 添加变量
    addFrom: 添加附加资源
    keyLabel: 键
    keyPlaceholder: '例如: FOO'
    valueLabel: 值
    valuePlaceholder: '例如: bar'
  sidekick:
    header: 升级服务
    title: 选择加载配置的服务来升级
    detail: '{service} 有多个容器，希望升级哪个容器?'
    primary: 主容器
    sidekick: Sidecars
  containerType:
    title: Sidecar 类型
    standard: 标准容器
    init: Init 容器

  errors:
    noSidekick: 选择要添加 sidecar 的工作负载。
    duplicateName: '工作负载 {service} 中已经存在名为 {name} 的 sidecar。'
    quotaRequired: '"{key}" 必需设置，因为在项目上执行资源配额。'

newPassword:
  placeholder: 新密码
  password: 新密码
  confirmPassword: 确认密码
  passwordNoMatch: 密码不匹配

newSecret:
  title:
    new: 添加密文
    edit: '编辑密文: {name}'
    view: '密文: {name}'
  name:
    placeholder: '例如: api-key'
  description:
    placeholder: '例如: S3 密钥对'
  values:
    label: 密文
  addActionLabel: 添加密文

customDrivers:
  nodes: 主机驱动
  clusters: 集群驱动

clusterDrivers:
  add: 添加集群驱动
  refresh: 刷新 Kubernetes 元数据
  builtIn: 内置
  table:
    noData: 当前集群没有配置任何节点
    noMatch: 没有节点匹配当前搜索

kontainerDriver:
  displayName:
    aliyunkubernetescontainerservice: Alibaba ACK
    amazonElasticContainerService: Amazon EKS
    azureKubernetesService: Azure AKS
    googleKubernetesEngine: Google GKE
    huaweicontainercloudengine: Huawei CCE
    import: Import
    rancherKubernetesEngine: Rancher RKE
    tencentkubernetesengine: Tencent TKE
    baiducloudcontainerengine: Baidu CCE
    oraclecontainerengine: Oracle OKE
    linodekubernetesengine: Linode LKE


nodeDriver:
  addTemplate: 添加主机模板
  editTemplate: "编辑主机模板: {name}"
  cloneTemplate: "从 {name} 克隆主机模板"
  editWarning: 编辑主机模板只会影响由主机池创建的新主机，现有主机将不会自动更新或替换。<br>如果从池中删除主机，将使用模板中的新设置创建新主机。
  externalError: "尝试加载自定义驱动 { driverName } 出错，请验证自定义节点驱动配置。"
  cloudCredentialError: 云凭证必须设置。
  nameError: 名称必须设置。
  displayName:
    aliyun: Alibaba ACK
    aliyunecs: Aliyun ECS
    amazonec2: Amazon EC2
    amazoneks: Amazon EKS
    amazoneksv2: Amazon EKS
    azure: Azure
    azureaks: Azure AKS
    baidu: Baidu CCE
    cloudca: Cloud.ca
    digitalocean: DigitalOcean
    exoscale: Exoscale
    googlegke: Google GKE
    huaweicce: Huawei CCE
    import: Other
    importeks: Amazon EKS
    linode: Linode
    lke: Linode LKE
    oci: Oracle Cloud Infrastructure
    openstack: OpenStack
    oracleoke: Oracle OKE
    otc: Open Telekom Cloud
    packet: Packet
    pinganyunecs: Pinganyun ECS
    rackspace: RackSpace
    rancherkubernetesengine: RKE
    softlayer: SoftLayer
    tencenttke: Tencent TKE
    upcloud: UpCloud
    vmwarevsphere: vSphere
    zstack: ZStack
  driverOptions: "{driver} 选项"
  templateOptions: "{appName} 模板"
  amazoneks:
    access:
      next: "下一步: 配置集群"
      loading: 从亚马逊加载集群选项...
      help: "在这里粘贴 AWS 密钥对。只使用 IAM 访问键，使用根用户生成的键将使集群不可访问。"
    clusterOption:
      title: 集群选项
      detail: 为集群自定义 Kubernetes 选项
    encryptEbs:
      label: EBS Encryption
      detail: Enables EBS encryption on worker nodes.
    kubernetesVersion:
      label: Kubernetes 版本
      placeholder: 选择要安装的 Kubernetes 版本
    keyPairs:
      label: SSH Key
      prompt: 没有选择
      tooltip: 您可能需要编辑安全组的入站规则来启用 22 端口。
    role:
      label: 服务角色
      noneSelected: "Rancher 创建角色"
      help: "您可以不选择服务角色，Rancher 会为您自动创建。"
      radio:
        default: "标准: Rancher 生成的服务角色。"
        custom: "自定义: 从现有服务角色中选择。"
      next: "下一步: 选择 VPC & Subnet"
      loading: "从 Amazon 加载 VPCs..."
    vpc:
      title: 'VPC & Subnet'
      detail: 选择将用于 EKS 实例的 VPC
      next: "下一步: Subnet"
      loading: "加载 Subnets..."
      nextRancherDefault: "下一步: 选择实例选项"
      loadingRancherDefault: "加载实例选项..."
      noneSelected: "Rancher 创建 VPC 和 Subnet"
      radio:
        default: '标准: 通过 Rancher 创建 VPC 和子网。'
        custom: '自定义: 从现有 VPC 和子网中选择。'
    subnet:
      title: 子网
      help: 2 必须选择子网
      next: '下一步:选择安全组'
      loading: '从 Amazon 加载安全组...'
    associateWorkerNodePublicIp:
      title: Worker 节点的公网 IP
      radio:
        default: 是
        off: '否: 仅私有 ip'
    securityGroup:
      title: 安全组
      detail: 选择将应用于 EKS 实例的安全组
      choose:  选择一个或多个现有安全组
      defaultExisting: '标准: 使用现有的 {groupName} 组。'
      defaultCreate: '标准: 自动创建新的安全组。'
      next: '下一步: 设置实例选项'
      loading: 加载设置实例选项...
    ami:
      label: 自定义 AMI
      help: '您可以覆盖 Rancher 基于区域选择的默认 AMI。'
    max:
      label: 最大平均比重
    min:
      label: 最小平均比重
    desired:
      label: 预期 ASG 大小
    userData:
      label: 用户数据
      help: 将用户数据传递给节点以执行自动配置任务
      placeholder: 粘贴脚本
    nodeVolumeSize:
      label: 主机卷大小
      placeholder: '例如: 20'
    accessKey:
      label: Access Key
      placeholder: Your AWS access key
    secretKey:
      label: Secret Key
      placeholder: Your AWS secret key
      provided: Provided
    sessionToken:
      label: "Session Token<em class='text-muted'>可选</em>"
      placeholder: Your AWS session token
      provided: Provided
    region:
      label: 区域
  amazonec2:
    access:
      title: 1. 帐户访问
      detail: 选择将用于启动 EC2 实例的区域和 API 密钥
      next: '下一步: 认证 & 设置节点'
      loading: 从 EC2 加载可用区和 VPC 信息...
      help: '在此粘贴 AWS 密钥对，我们将用秘钥创建新的实例'
    accessKey:
      label: Access Key
      placeholder: Your AWS access key
    ami:
      label: AMI
      placeholder: An Ubuntu AMI
      rancherList: RancherOS AMI List
    availabilityZone: Availability Zone
    encryptEbsVolume:
      label: Encryption
      radioLabel: Encrypt EBS Volume
    iam:
      label: IAM 配置文件
      placeholder: my-k8s-profile
    instance:
      detail: 定制将要创建的EC2实例。
      title: 4. 实例
    instanceType:
      label: 实例类型
    metadata:
      httpEndpoint:
        label: HTTP Endpoint
        enabled: Enabled
        disabled: Disabled
        protip: Enables or disables the HTTP metadata endpoint on your instances
      httpTokens:
        label: HTTP Tokens
        required: 必须
        optional: 可选
        protip: 对实例元数据请求使用HTTP令牌
    needs:
      item1: 'From the {appName} server to <code>TCP</code> port <code>22</code> <span class="text-muted">(SSH to install and configure Docker)</span>'
      item2: From and To all other hosts on <code>UDP</code> ports <code>500</code> and <code>4500</code> <span class="text-muted">(for IPsec networking)</span></li>
      item3: These rules will <b>not</b> be added automatically.
      label: 'For {appName} to work correctly your security group will need to allow traffic:'
    noSubnet: 没有子网可供选择
    onlyPrivate:
      label: 只使用私有IP地址
    portHelp:
      link: 了解更多
      text: 了解哪些端口需要放行。
    privateIp:
      label: 私有 IP
    region:
      label: 区域
    requestSpotInstance:
      enable: Request spot instance
      label: Spot 实例
    rootSize:
      label: 根磁盘大小
      unit: GB
    secretKey:
      label: Secret Key
      placeholder: Your AWS secret key
      provided: Provided
    securityGroup:
      choose: 选择一个或多个现有组
      defaultCreate: '标准: 自动创建一个 <code>{groupName}</code> 组'
      defaultExisting: '标准: 使用现有的 <code>{groupName}</code> 组'
      detail: 选择将应用于实例的安全组
      loading: 加载实例的选项...
      next: '下一步: 设置实例选项'
      title: 3. 安全组
    spotPrice:
      label: Spot Price
      unit: $
    sshUser:
      label: SSH User
      placeholder: e.g. ubuntu
    subnet: VPC/Subnet
    tags:
      addActionLabel: Add AWS Tag
      placeholder: e.g. dev
      valueLabel: Tags
    useEbsOptimizedInstance:
      label: Optimized Instance
      radioLabel: Create EBS optimized instance
    volumeType:
      label: Amazon EBS volume type
    zone:
      detail: Select the Availability Zone and VPC/Subnet for Instances
      loading: Loading security group info from EC2...
      next: 'Next: Select a Security Group'
      title: 2. Zone and Network
  digitalocean:
    droplet:
      title: Droplet 选项
      detail: 配置将由此模板创建的 Droplets 的选项
    sizeLabel: |
      {highMem, select, true {High Memory: } other {}}{memoryGb} GB RAM, {disk} GB Disk, {vcpus, plural,
        =1 {# vCPU}
        other {# vCPUs}
      }
    authAccountButton: '下一步: 配置 Droplet'
    accessToken:
      label: 访问令牌
      placeholder: DigitalOcean API 访问令牌
      help: |
        '从<a href="https://cloud.digitalocean.com/settings/api/tokens" target="_blank" rel="nofollow noreferrer noopener">Applications&API</a>页面获取 DigitalOcean 的个人访问 token。'
    image:
      label: 镜像
    sshUser:
      label: SSH 用户
      placeholder: '例如: root'
    size:
      label: Droplet 规格
    region:
      label: 区域
    optionsSection: 选项
    backups:
      label: 启用备份
    ipv6:
      label: 启用 IPv6
    privateNetworking:
      label: 启用私有网络
    monitoring:
      label: 启用监控
    tags:
      addActionLabel: 添加 Droplet 标签
      valueLabel: 标签
      placeholder: '例如: dev'
    errors:
      hostnamePrefix: 名称前缀不能包含"_"
  exoscale:
    accountSection: 账户访问
    apiKey:
      label: API Key
      placeholder: Exoscale API 密钥
    secretKey:
      label: 加密秘钥
      placeholder: Exoscale secret 密钥
      provided: 已提供
    accountHelp: 在此粘贴 Exoscale 密钥对，我们将用秘钥创建新的实例
    loginAction: '下一步: 验证并选择安全组'
    loadingSecurity: 从 Exoscale 加载安全组...
    securityGroupSection: 安全组
    securityGroup:
      label: 安全组
      defaultExisting: '标准: 使用现有的<code>{groupName}</code>安全组'
      defaultCreate: '标准: 自动创建<code>{groupName}</code>安全组'
      custom: '自定义: 选择现有安全组'
      updating: 更新安全组...
      creating: 创建安全组...
    loadingZone: 从 Exoscale 加载区域信息...
    zoneSection: 区域
    selectZoneAction: '下一步: 选择安全组'
    zone:
      label: 区域
    portHelp:
      link: 了解更多
      text: 关于将要开放的端口信息
    needs:
      label: "{appName} 正常工作需要安全组允许以下通讯: "
      item1: '从 {appName} 服务器到主机的<code>TCP</code>端口<code>22</code><span class="text-muted">(SSH 连接用于安装 docker)'
      item2: 与其他所有主机之间的 <code>UDP</code>端口<code>500</code>和<code>4500</code><span class="text-muted">(用于 IPsec 网络)</span>
      item3: 这些规则<b>不会</b>自动添加
    selectSecurityGroupAction: '下一步: 设置实例选项'
    loadingInstance: 读取可用实例配置...
    instanceSection: 实例
    instanceProfile:
      label: 实例配置文件
    diskSize:
      label: 根磁盘大小
    sshUser:
      label: SSH 用户
      placeholder: '默认情况下由 docker-machine 选择'
    template:
      label: 模板
  packet:
    accountSection: 账户访问
    projectId:
      label: 项目
      placeholder: Packet 项目 ID
    apiKey:
      label: API Key
      placeholder: Packet API Key
    apiKeyHelp: '由 Packet 的<a href="https://app.packet.net/portal#/api-keys" target="_blank">API Keys</a>页面获取。'
    instanceSection: 实例
    instanceOptionsSection: 实例选项
    loginAction: '下一步: 认证并且选择实例'
    authentication: 验证
    location: 所在地区
    planDetails:
      label: 实例详情
      cpu: CPUs
      memory: 内存
      drives: 驱动
      network: NICs
    image:
      label: 镜像
    size:
      label: 规格
    regionSection: 区域
    region:
      label: 区域
  rackspace:
    account:
      title: 1. 账户访问
      detail: 用来创建 RackSpace 实例的用户名和 API Key。
    username:
      label: 用户名
      placeholder: RackSpace 用户名
    apiKey:
      label: API Key
      placeholder: RackSpace APK Key
    accountHelp: 从 RackSpace 控制面板的帐户设置页面获取。
    region:
      title: 2. 区域和偏好
      detail: 选择要创建的 RackSpace 实例的区域和偏好。
      label: 区域
    flavor:
      label: 偏好
  vmwarevsphere:
    hostOptions:
      any:
        label: 'Any'
    cloudconfig:
      label: Cloud Config YAML
    contentLibrary: 'Content library:'
    libraryTemplate: 'Library template:'
    virtualMachine: '虚拟机:'
    template: '模板:'
    creationType:
      label: 创建方法
      library: '模板部署: Content Library'
      template: "模板部署: Data Center"
      vm: "克隆一个现有的虚拟机"
      legacy: 从 boot2docker ISO 安装(Legacy)
    access:
      title: '1. 帐户访问'
      detail: 配置在哪里查找 vCenter 或 ESXi 服务器
      help: '注意: 免费的 ESXi license 不支持 API 访问，只支持具有有效或评估许可证的服务器。'
    scheduling:
      title: 2. 调度
      detail: 选择将调度虚拟机的管理程序
    instance:
      title: 3. 实例配置
      detail: 选择虚拟机的大小和操作系统
    tags:
      title: 4. 标签
      detail: 标签允许您将元数据附加到 vSphere 目录中的对象，以便更容易地对这些对象进行排序和搜索。
      addActionLabel: Add tag
    customAttributes:
      title: 5. 自定义属性 (legacy)
      detail: 自定义属性允许您将元数据附加到 vSphere 目录中的对象，以便更容易地对这些对象进行排序和搜索。
      addActionLabel: 添加自定义属性
    vappOptions:
      title: '6. vApp 选项'
      detail: 选择 OVF 环境属性
    vcenter:
      label: vCenter 或 ESXi 服务器
      placeholder: 'vCenter 或者 ESXi 主机名/IP'
    vcenterPort:
      label: 端口
    username:
      label: 用户名
    password:
      label: 密码
    instanceSection: 实例
    instanceOptionsSection: 实例选项
    cpuCount:
      label: CPUs
      unit: '{cores, plural, =1 {Core} other {Cores}}'
    memorySize:
      label: 内存
      unit: MB
    diskSize:
      label: 磁盘
      unit: MB
    boot2dockerUrl:
      label: 操作系统 ISO 下载地址
      placeholder: '缺省: 最新的 rancheros-vmware 镜像'
    cloudConfig:
      label: Cloud config
      placeholder: '/etc/kubernetes/vsphere.conf'
    cloneFrom:
      label: VM/Template
      placeholder: '例如: http://my_host/template.yml'
    library:
      label: Library
      placeholder: dsl_linux_v4-4-10.ova
    schedulingSection: Scheduling
    dataCenter:
      label: 数据中心
      placeholder: '例如: datacenter_name'
      help: '用于创建虚拟机的数据中心（对于独立 ESXi 保留空白）。'
    pool:
      label: 池
      placeholder: '例如: /dc_name/host/host_name/Resources/pool_name'
      help: '用于创建 VM 的资源池(对于独立 ESXi 保留空白)。'
    host:
      label: 主机
      placeholder: '例如: cluster_name/host_name'
      help: '用于创建虚拟机的特定主机(对于独立 ESXi 或具有 DRS 的集群留空)。'
    network:
      addActionLabel: "添加网络"
      valueLabel: "网络"
      valuePlaceholder: "例如：VM Network"
      help: "连接 VM 的网络"
    dataStore:
      cluster:
        tooltip: 使用数据存储集群?
        help: "在数据存储集群上创建 VM"
      label: 数据存储
      placeholder: "例如：datastore_cluster_name/datastore_name"
      help: "创建 VM 磁盘的数据存储"
    cloudinitType:
      label: Cloud Init type
    cloudinit:
      label: Cloud Init
      placeholder: '例如: http://my_host/cloud-config.yml'
      help: '在 guestinfo 中设置 Cloud-init 文件或 url'
    folder:
      label: Folder
      placeholder: '例如: /folder'
      help: 'VM 的文件夹。该文件夹必须已经存在于数据中心中'
    cfgparam:
      key:
        placeholder: '例如: guestinfo.hostname'
      value:
        placeholder: '例如: Myrancherhost'
      label: 用于 guestinfo 的配置参数
      addActionLabel: 添加参数
    vappHelp: '注意: 独立的 ESXI 不支持 vApp 选项和网络协议配置文件'
    vappMode:
      disabled: '不使用 vApp'
      auto: '使用 vApp 网络协议配置文件去配置网络'
      manual: '使用自定义 vApp 配置'
    vappTransport:
      label: OVF environment transport
      placeholder: '例如: com.vmware.guestInfo'
      help: 'com.vmware.guestInfo 或 iso'
    vappIpprotocol:
      label: vApp IP 协议
      placeholder: '例如: IPv4'
      help: 'IPv4 或 IPv6'
    vappIpallocationpolicy:
      label: vApp IP 分配策略
      placeholder: '例如: fixedAllocated'
      help: 'dhcp, fixed, transient 或 fixedAllocated'
    vappProperty:
      key:
        placeholder: '例如: guestinfo.interface.0.ip.0.address'
      value:
        placeholder: '例如: ip:VM Network, expression 或 string'
      label: vApp 属性
      addActionLabel: 添加参数
  azure:
    placement:
      title: 区域
      detail: 选择将由此模板创建的实例的区域。
    access:
      title: 账户访问
      detail: 将用于启动 Azure 实例的 API 密钥。
    network:
      title: 网络
      detail: 为此模板创建的实例配置网络
    instance:
      title: 实例
      detail: 自定义将要创建的 Azure 实例
    subscriptionId:
      label: 订阅 ID
      placeholder: Azure 订阅 ID
    subscriptionCert:
      label: 订阅证书
      placeholder: Azure 订阅证书
    image:
      label: 镜像
      placeholder: '推荐: UbuntuServer:16.04.0-LTS:latest'
      helpText: Providing an ARM resource identifier requires using managed disk
    diskSize:
      label: 磁盘大小
      placeholder: '例如: 30'
    managedDisks:
      label: 磁盘类型
      unmanaged: 非托管的磁盘
      managed: 托管的磁盘
      helpText: "Creates a {type} availability set. Changing this value after the availability set has been created may cause errors."
    updateDomainCount:
      label: Update Domain Count
      placeholder: '例如: 5'
      helpText: 如果已经创建了可用性集，更新域计数将被忽略。
    faultDomainCount:
      label: Fault Domain Count
      placeholder: '例如: 3'
      helpText: 如果已经创建了可用性集，则将忽略故障域计数。
    size:
      label: 规格
    dockerPort:
      label: Docker 端口
      placeholder: '2376'
    publishSettingsFile:
      label: 发布配置
      placeholder: 发布配置文件
    environment:
      label: 环境
      placeholder: 'Azure 公共云'
    resourceGroup:
      label: 资源组
      placeholder: 'docker-machine'
    sshUser:
      label: SSH 用户
      placeholder: usr1
    storageType:
      label: 存储类型
    vnet:
      label: VNet
      placeholder: '[资源组: ]名称'
    subnet:
      label: 子网
      placeholder: 示例别名
    subnetPrefix:
      label: 子网前缀
      placeholder: '128.42.0.0/21'
    availabilitySet:
      label: 可用性集
      placeholder: 可用集名称
    openPort:
      label: 开放端口
      placeholder: '使用逗号分隔符，例如: 80，443'
    privateIpAddress:
      label: 私有 IP
      placeholder: 127.0.0.1
    usePrivateIp:
      label: 使用私有 IP 连接
    staticPublicIp:
      label: 公网 IP
    noPublicIp:
      label: 无公网 IP
    clientId:
      label: 客户端 ID
      placeholder: 客户端 ID
    clientSecret:
      label: 客户端秘钥
      placeholder: 客户端秘钥
    region:
      label: 区域
    nsg:
      label: 网络安全组
      placeholder: "e.g. AllowVnetOutBound"
      helpText: 当使用 Rancher 管理的 NSG或提供现有的 NSG 时，使用此模板的所有节点将使用提供的 NSG。如果没有提供 NSG，将为每个节点创建一个新的 NSG。
      openPorts: 使用现有 NSG 时，打开的端口将被忽略。
  aliyunecs:
    accountSection:
      label: 1. 访问令牌
      detail: 配置用于创建阿里云主机的访问令牌
      next: '下一步: 认证&配置网络'
      loading: 正在获取阿里云区域信息...
    accessKey:
      label: 访问秘钥
      placeholder: 阿里云访问秘钥
    accessKeySecret:
      label: 访问秘钥令牌
      placeholder: 阿里云访问秘钥所对应的令牌
      provided: 已提供
    apiEndpoint:
      label: '私有阿里云 API 地址'
      placeholder: 私有阿里云 API 地址
    instanceOptionsSection:
      label: 实例
      detail: 设置即将创建的阿里云实例
    instanceDescription:
      label: 实例描述
      placeholder: 该实例的描述
    instanceType:
      label: 实例类型
      placeholder: 实例类型
    systemImage:
      label: 系统镜像
      placeholder: 系统镜像
    internetMaxBandwidth:
      label: 最大网络带宽
      placeholder: 1 到 100
    aliyunSLB:
      label: 阿里云 SLB ID
      placeholder: 阿里云 SLB ID
    internetChargeType:
      label: EIP 计费方式
      payByBandwidth: 按带宽计费
      payByTraffic: 按流量计费
    storageSection:
      label: 存储
      detail: 配置通过该模版创建的实例的存储选项
      next: '下一步: 配置阿里云实例选项'
      loading: 正在获取主机类型和系统镜像...
    ioOptimized:
      label: 存储 IO 优化
      optimized: 优化
      none: 不优化
    systemDiskCategory:
      label: 系统盘种类
    dataDiskCategory:
      label: 数据盘种类
    dataDiskSize:
      label: 数据磁盘大小
      placeholder: 磁盘大小
    region:
      label: 区域
      placeholder: 区域
    zone:
      label: 可用区
      prompt: 选择可用区...
    networkSection:
      label: 网络
      detail: 配置通过该模版创建的实例的网络选项
      next: '下一步: 配置存储选项'
      loading: 正在获取阿里云存储类型...
    routeCIDR:
      label: 路由 CIDR
      placeholder: '例如: 192.168.1.0/24'
    vpcId:
      label: 专有网络
      prompt: 选择专有网络...
    vswitchId:
      label: 交换机
      prompt: 选择交换机...
    privateIp:
      label: 私有 IP
      placeholder: 专用网络中的私有 IP
    privateAddressOnly:
      label: 仅私网 IP
    securitySection:
      label: 安全
      detail: 选择实例所需要配置的安全组。
    securityGroup:
      label: 安全组
      placeholder: 安全组
      prompt: 选择安全组...
      defaultCreate: "自动创建<code>{groupName}</code>安全组。"
    sshPassword:
      label: SSH 密码
      placeholder: '创建实例后 SSH 远程登录密码(非必填)'
      provided: 已提供
    tags:
      addActionLabel: 添加实例标签
      valueLabel: 标签
      placeholder: '例如: dev'
    errors:
      vpcIdRequired: VPC is required.
      vswitchIdRequired: VSwitch is required.
      accessKeyRequired: Access Key is required.
      accessSecretRequired: Access Secret Key is required.
      sshPasswordLengthNotValid: The length of SSH password must between eight and thirty.
      sshPasswordInvalidCharacter: SSH password contains invalid characters.
      sshPasswordFormatError: "SSH password must contain at least three out of four kinds of following characters: uppercase letter, lowercase letters, numbers, and special characters."
      nameNotValidForApp: The name is invalid according to the {appName} hostname rule.
  oci:
    placement:
      title: Placement
      detail: Select placement for compute instance(s) created by this template.
    access:
      title: Account Access
      detail: User Credentials will be used to launch OCI Instances.
    network:
      title: Virtual Cloud Network Details
      detail: Configure the VCN for compute instances created by this template.
    instance:
      title: Instance Details
      detail: Configure and customize the compute instance(s) that will be created.
    image:
      label: Image
      placeholder: 'Oracle-Linux-7.7-2020.02.21-0'
    faultDomainCount:
      label: Fault Domain
      placeholder: e.g. 3
      helpText: Each availability domain contains three fault domains.
    shape:
      label: Shape
    nodeCompartment:
      label: OCID of compartment where compute instance(s) will be created
      placeholder: 'ocid1.compartment.oc1....'
    vcnCompartment:
      label: OCID of compartment where VCN and subnet reside (if different than above)
      placeholder: 'ocid1.compartment.oc1....'
    vcn:
      label: OCID of VCN where compute instance will be launched
      placeholder: 'ocid1.vcn.oc1....'
    subnet:
      label: OCID of subnet (accessible to Rancher) that compute instance(s) will use
      placeholder: 'ocid1.subnet.oc1....'
      helpText: If subnet is AD-specific, it must match the AD of the node(s) created by this template.
    usePrivateIp:
      label: Use private IP address to connect to compute instances(s)
    availabilityDomain:
      label: Availability Domain
      placeholder: availability-domain-name
      helpText: Must match availability domain of subnet if using AD-specific subnets.
    openPort:
      label: Open Port
      placeholder: 'Comma-separated, e.g. 80,443'
    region:
      label: Region

  zstack:
    access:
      title: 1. 帐户访问
      detail: 选择将用于启动 ZStack 实例的 endpoint，帐户名称和帐户密码
      next: '下一步: 验证&选择网络'
      loading: 从 ZStack 加载区域、集群、网络信息...
    endpoint:
      label: 终端
      placeholder: '例如: https://192.168.1.42:8443/'
    accountName:
      label: 帐户名称
      placeholder: 帐户
    accountPassword:
      label: 帐户密码
      placeholder: 帐户密码
      provided: 已提供
    zone:
      title: 2. 区域、集群和网络
      detail: 选择实例的区域，集群和网络
      next: '下一步: 设置实例选项'
      loading: 从 ZStack 加载实例选项...
      label: 区域
    cluster:
      label: 集群
    network:
      defaultCreate: "标准: 自动创建<code>{groupName}</code>安全组。"
      choose: 连接到现有网络
      label: 网络
    portHelp:
      link: 了解更多
      text: 将要开放的端口的详细信息
    instance:
      title: 3. 实例
      detail: 自定义将要创建的 EC2 实例
    instanceOffering:
      label: 实例类型
    systemDiskOffering:
      label: 系统磁盘
    imageName:
      label: 镜像名称
    dataDiskOffering:
      label: 数据磁盘

newConfigMap:
  title:
    new: 添加配置映射
    edit: '编辑配置映射: {name}'
    view: '配置映射: {name}'
  name:
    placeholder: '例如: map'
  description:
    placeholder: '例如: app'
  values:
    label: 配置映射
    binaryLabel: 配置映射值(二进制值)
  addActionLabel: 添加配置映射值

projectGroup:
  label: "项目: {name}"
  none: 命名空间
  project: 不在项目中
  noNS: 此项目下没有命名空间

optionallyNamespaced:
  scope:
    label: 作用域
    project: 此项目所有命名空间
    namespace: 单个命名空间

orchestrationWelcome:
  simple:
    title: 简单
  enhanced:
    title: 通过 Kubernetes 加强

pageFooter:
  notARelease: (非正式发布)
  help: '帮助&文档'
  issues: 提交问题
  forums: 论坛
  cnforums: 中文社区
  slack: Slack
  download:
    link: 下载 Rancher CLI
    mac: MacOS
    windows: Windows
    linux: Linux
  showSystem: 显示系统容器

pagination:
  catalog: |
    {pages, plural,
    =0{ 无应用商店 }
    =1{ 选中 {count}{count, plural,=1{ 个应用商店 } other { 个应用商店 }}}
    other{ 当前显示 {count} 个应用商店中的 {from} 到 {to} 个 }}
  certificate: |
    {pages, plural,
    =0{ 无证书 }
    =1{ 选中 {count}{count, plural,=1{ 个证书 } other { 个证书 }}}
    other{ 当前显示 {count} 个证书中的 {from} 到 {to} 个 }}
  container: |
    {pages, plural,
    =0 { 无容器 }
    =1{ 选中 {count} {count, plural, =1{ 个容器 } other { 个容器 }}}
    other{ 当前显示 {count} 个容器中的 {from} 到 {to} 个 }}
  cluster: |
    {pages, plural,
    =0{ 没有集群 }
    =1{ 选中 {count}{count, plural,=1{ 个集群 } other { 个集群 }}}
    other{ 当前显示 {count} 个集群中的 {from} 到 {to} 个 }}
  dnsRecord: |
    {pages, plural,
    =0{ 无 DNS 记录 }
    =1{ 选中 {count}{count, plural,=1{ 条 DNS 记录 } other { 条 DNS 记录 }}}
    other { 当前显示 {count} 条 DNS Records 中的 {from} 到 {to} 条 }}
  driver: |
    {pages, plural,
    =0{ 无驱动 }
    =1{ 选中 {count}{count, plural,=1{ 个驱动 } other { 个驱动 }}}
      other { 当前显示 {count} 个驱动中的 {from} 到 {to} 个 }}
  driverOptions: |
    {pages, plural,
    =0{ 无驱动选项 }
    =1{ 选中 {count}{count, plural,=1{ 个驱动选项 } other { 个驱动选项 }}}
    other { 当前显示 {count} 个驱动选项中的 {from} 到 {to} 个 }}
  destinationRules: |
    {pages, plural,
    =0 {No Options}
    =1 {{count} {count, plural, =1 {Destination Rule} other {Destination Rules}}}
    other {{from} - {to} of {count} Destination Rules}}
  entry: |
    {pages, plural,
    =0{ 无条目 }
    =1{ 选中 {count}{count, plural,=1{ 个条目 } other { 个条目 }}}
    other { 当前显示 {count} 个条目中的 {from} 到 {to} 个 }}
  event: |
    {pages, plural,
    =0{ 无事件 }
    =1{ 选中 {count}{count, plural,=1{ 个事件 } other { 个事件 }}}
    other{ 当前显示 {count} 个事件中的 {from} 到 {to} 个 }}
  features: |
    {pages, plural,
    =0 {No Features}
    =1 {{count} {count, plural, =1 {Feature} other {Features}}}
    other {{from} - {to} of {count} Features}}
  generic: |
    {pages, plural,
    =0{ 无条目 }
    =1{ 选中 {count}{count, plural, =1{ 个条目 } other { 个条目 }}}
    other{ 当前显示 {count} 个条目中的 {from} 到 {to} 个 }}
  hpa: |
    {pages, plural,
    =0 { 没有 Pod 自动水平伸缩规则 }
    =1 { 选中 {count} {count, plural, =1 { 条 Pod 自动水平伸缩规则 } other { 条 Pod 自动水平伸缩规则 }}}
    other { 当前显示 {count} 条 Pod 自动水平伸缩规则中的 {from} 到 {to} 条 }}
  image: |
    {pages, plural,
    =0{ 无镜像 }
    =1{ 选中 {count}{count, plural,=1{ 个镜像 } other { 个镜像 }}}
    other { 当前显示 {count} 个镜像中的 {from} 到 {to} 个 }}
  istioRule: |
    {pages, plural,
    =0 {No Traffic Rules}
    =1 {{count} {count, plural, =1 {Traffic Rule} other {Traffic Rules}}}
    other {{from} - {to} of {count} Traffic Rules}}
  link: |
    {pages, plural,
    =0{ 无链接 }
    =1{ 选中 {count}{count, plural,=1{ 个链接 } other { 个链接 }}}
    other { 当前显示 {count} 个 Links 中的 {from} 到 {to} 个 }}
  loadBalancer: |
    {pages, plural,
    =0{ 无负载均衡 }
    =1{ 选中 {count}{count, plural,=1{ 条负载均衡 } other { 条负载均衡 }}}
    other { 当前显示 {count} 条负载均衡中的 {from} 到 {to} 条 }}
  ingress: |
    {pages, plural,
    =0{ 无 Ingresses}
    =1{ 选中 {count}{count, plural,=1{ 个 Ingresses} other { 个 Ingresses}}}
    other { 当前显示 {count} 个 Ingresses 中的 {from} 到 {to} 个 }}
  member: |
    {pages, plural,
    =0{ 无成员 }
    =1{ 选中 {count}{count, plural,=1{ 个成员 } other { 个成员 }}}
    other { 当前显示 {count} 个成员中的 {from} 到 {to} 个 }}
  mount: |
    {pages, plural,
    =0{ 无挂载 }
    =1{ 选中 {count}{count, plural,=1{ 个挂载 } other { 个挂载 }}}
    other { 当前显示 {count} 个挂载中的 {from} 到 {to} 个 }}
  namespace: |
    {pages, plural,
    =0{ 无命名空间 }
    =1{ 选中 {count}{count, plural,=1{ 个命名空间 } other { 个命名空间 }}}
    other { 当前显示 {count} 个命名空间中的 {from} 到 {to} 个 }}
  node: |
    {pages, plural,
    =0{ 无主机 }
    =1{{count}{count, plural,=1{ 台主机 } other { 台主机 }}}
    other { 当前显示 {count} 个 Nodes 中的 {from} 到 {to} 个 }}
  nodePool: |
    {pages, plural,
    =0{ 无主机池 }
    =1{ 选中 {count}{count, plural,=1{ 个主机池 } other { 个主机池 }}}
    other { 当前显示 {count} 个 Node Pools 中的 {from} 到 {to} 个 }}
  nodeTemplate: |
    {pages, plural,
    =0{ 无主机模板 }
    =1{ 选中 {count}{count, plural,=1{ 个主机模板 } other { 个主机模板 }}}
    other { 当前显示 {count} 个主机模板中的 {from} 到 {to} 个 }}
  pod: |
    {pages, plural,
    =0 { 没有 Pods}
    =1{{count}{count, plural, =1{ 个 Pod} other { 个 Pods}}}
    other{ 当前显示 {count} 个 Pods 中的 {from} 到 {to} 个 }}
  podHighlightSubset: "<b>{subset} of {count}</b> Pods"
  podNoSubset: "0 of {count} Pods"
  podLabel: |
    {count, plural,
      =1{ 个 Pod}
      other{ 个 Pods}
    }
  port: |
    {pages, plural,
    =0{ 无端口 }
    =1{ 选中 {count}{count, plural,=1{ 个端口 } other { 个端口 }}}
    other{ 当前显示 {count} 个端口中的 {from} 到 {to} 个 }}
  project: |
    {pages, plural,
    =0{ 无项目 }
    =1{ 选中 {count}{count, plural,=1{ 个项目 } other { 个项目 }}}
    other { 当前显示 {count} 个项目中的 {from} 到 {to} 个 }}
  rule: |
    {pages, plural,
    =0{ 无规则 }
    =1{ 选中 {count}{count, plural,=1{ 条规则 } other { 条规则 }}}
    other { 当前显示 {count} 条规则中的 {from} 到 {to} 条 }}
  role: |
    {pages, plural,
    =0 { 没有角色 }
    =1 { 选中 {count} {count, plural, =1 { 条角色 } other { 条角色 }}}
    other { 当前显示 {count} 条角色中的 {from} 到 {to} 条 }}
  clusterTemplates: |
    {pages, plural,
    =0 {No Template Revisions}
    =1 {{count} {count, plural, =1 {Template Revision} other {Template Revisions}}}
    other {{from} - {to} of {count} Template Revisions}}
  service: |
    {pages, plural,
    =0{ 无服务 }
    =1{ 选中 {count}{count, plural,=1{ 个服务 } other { 个服务 }}}
    other { 当前显示 {count} 个服务中的 {from} 到 {to} 个 }}
  storageClass: |
    {pages, plural,
    =0{ 无存储类 }
    =1{ 选中 {count}{count, plural,=1{ 个存储类 } other { 个存储类 }}}
    other{ 当前显示 {count} 个 Storage Classes 中的 {from} 到 {to} 个 }}
  volume: |
    {pages, plural,
    =0{ 没有卷 }
    =1{ 选中 {count}{count, plural,=1{ 个卷 } other { 个卷 }}}
    other { 当前显示 {count} 个数据卷中的 {from} 到 {to} 个 }}
  virtualServices: |
    {pages, plural,
    =0 {No Options}
    =1 {{count} {count, plural, =1 {Virtual Service} other {Virtual Services}}}
    other {{from} - {to} of {count} Virtual Services}}
  gateways: |
    {pages, plural,
    =0 {No Options}
    =1 {{count} {count, plural, =1 {Gateway} other {Gateways}}}
    other {{from} - {to} of {count} Gateways}}
  workload: |
    {pages, plural,
    =0{ 无工作负载 }
    =1{ 选中 {count}{count, plural,=1{ 个工作负载 } other { 个工作负载 }}}
    other { 当前显示 {count} 个工作负载中的 {from} 到 {to} 个 }}

projectRow:
  none: 没有描述
  orchestration: 编排

publicEndpoints:
  endpoint: 入口点
  bindIpAddress: 绑定 IP
  publicPort: 映射端口
  target: 目标
  privatePort: 容器端口
  noData: 无映射端口
  noMatch: 没有与当前搜索匹配的端口

physicalStats:
  title: 物理属性
  detail: 物理计算机属性

registryRow:
  address: 地址
  username: 用户名
  created: 创建时间

reservationParameters:
  label: 资源限制
  memory:
    labelText: '内存'
    placeholder: '默认: 整个主机'
    unit: 'MB'
  milliCpu:
    labelText: 处理器
    placeholder: '默认: 整个主机'
    unit: 'mCPU'

saveCancel:
  saving: 保存中...
  saved: 已保存!
  edit: 保存
  next: 下一步
  create: 创建
  cancel: 取消

schema:
  inputBoolean:
    y: "是"
    n: "否"
  inputCertificate:
    prompt: 选择证书...
  inputContainer:
    prompt: 选择容器...
  inputConfigMap:
    prompt: 选择配置映射
  inputEnum:
    option: 选择选项...
  inputHost:
    label: 选择主机...
  inputService:
    prompt: 选择工作负载...
    custom: 自定义
  inputDnsRecord:
    prompt: 选择服务...
  inputStorageClass:
    prompt: 使用默认的类
  inputSecret:
    secret: 选择密文...
    certificate: 选择证书...

schedulingRuleRow:
  theHost: 主机
  must: 必须
  should: 最好
  shouldNot: 最好没有
  mustNot: 必须没有
  haveA: 具有
  of: 其
  hostLabel: 主机标签
  containerLabel: 容器标签
  serviceName: 服务名称
  containerName: 容器名称

serverUrl:
  header:
    label: Rancher Server URL
    detail: "{appName} 安装使用的地址，集群中的所有节点都需要能够访问此地址"
  button:
    save: 保存 URL

siteAccess:
  header: 站点访问
  helpText: "配置允许哪些人登录和使用 {appName}"
  unrestricted: "允许所有有效的 {individuals}"
  restricted: "允许集群成员，项目成员以及授权的 {individuals} 和 {collection}"
  required: "仅允许授权的 {individuals} 和 {collection}"
  listHeader: "授权的 {individuals} 和 {collection}"
  dupe: "已授权用户访问"
  minimum: '您必须至少添加一条授权条目。'
  noIdentity: 无
  users: 用户
  groups: 用户组
  organizations: 组织
  refreshGroups: 刷新组成员
  refreshHelp: 这将触发所有组的刷新并更新它们的用户列表。
  helpLabel: 这是什么?

systemInfoSection:
  title: 系统信息
  detail: 操作系统和 kubernetes 信息。
  key: 键
  value: 值
  noData: 没有数据
  arch: 系统架构
  dockerVersion: Docker 版本
  containerDVersion: Containerd 版本
  kernelVersion: 内核版本
  kubeletVersion: Kubelet 版本
  kubeProxyVersion: Kube 代理版本
  operatingSystem: 操作系统映像
  osType: 系统类型
  noMatch: 没有与当前搜索匹配的系统信息。

tableCountSelect:
  header: 每页显示行数

telemetryOpt:
  header: 统计数据
  subtext: |
    Rancher Labs 希望能够收集您环境的匿名配置信息以帮助改进 {appName} 产品。<br/>信息不会被提供给任何第三方，收集的信息不包含特定的资源名称或地址。
  learnMore:
    label: 了解更多
  label: 允许收集匿名统计信息。
  eula:
    prefix: 我同意
    suffix: ''
    link: '条款和条件'

tooltipLink:
  list: 列表
  composeYaml: 编排文件

tooltipWarning:
  notConfigured: 没有配置访问控制
  dismiss: 取消

tooltipExpire:
  label: '此集群证书即将过期。'
  link: '立即轮换证书'

tooltipToggleOverride:
  label: '是否允许用户修改当前参数?'

upgradeBtn:
  version:
    current: '当前版本'
  status:
    none: '升级: 无'
    loading: '检查更新...'
    current: '已经是最新版本'
    available: '有可用更新'
    inprogress: '升级进行中'
    upgraded: '已升级: 完成升级'
    notfound: '未识别模板版本'
    error: '检查更新出错'
    required: '需要升级'

jsonEditor:
  placeholder: '请以 JSON 格式输入'

viewEditDescription:
  form:
    name:
      placeholder: '例如: lab'
    description:
      placeholder: '例如: 开发实验环境'

volumesPage:
  title: PVC
  addActionLabel: 添加 PVC
  noData: 没有配置 PVC
  noMatch: '没有符合当前搜索的持久卷(PV)'
  claimName:
    label: PVC 名称
  volume:
    label: '持久卷(PV)'
  storageClass:
    label: 存储类


vmConsole:
  header: '控制台: '
  protip: '高级技巧: 启动命令行时按下 {key} 键可在新窗口中打开'
  canvas: 暂不提供 Canvas 支持
  footerActions:
    buttonSend: 发送 Ctrl-Alt-Delete
    buttonCancel: 关闭

volumeRow:
  mounts:
    readOnly: "(只读)"

waitOrchestration:
  count: '({sub}/{count})'

waitKubernetes:
  addHost: '添加至少一台主机'
  activateHost: '等待主机激活'
  createStack: '创建 Kubernetes 系统应用栈'
  startServices: '启动服务'
  waitApi: '等待 Kubernetes API'

searchableSelect:
  noMatch: 没有匹配
  noOptions: 没有可用的选项

##############################
# Mixins
##############################
containerChoices:
  hostGroup: "主机: {name}"
  hostGroupWithState: "主机: {name}{state}"
  unknownHost: "主机: ???"
  containerOption: "{name}"

##############################
# Services
##############################
allWorkloads:
  namespace: "命名空间: {name}"

##############################
# Navigation
##############################
nav:
  srToggleDropdown: 切换下拉菜单
  projectDropdown:
    label: 范围
    clusters: 集群
    projects: 项目
    projectsIn: 集群 {cluster} 中的项目。
    clustersNoData: 没有集群。
    projectsNoData: 选择集群来查看项目。
    projectNoData: 当前集群没有项目。
    clustersNoMatch: '没有与"{searchInput}" 匹配的集群。'
    projectsNoMatch: '没有与"{searchInput}" 匹配的项目。'
    projectNotReady: '集群未就绪。'
    projectInCluster: '在集群 {cluster} 中的项目。'
    search: '搜索...'
  cluster:
    dashboard: 集群
    members: 成员
    nodes: 主机
    namespaces: 命名空间
    storage:
      tab: 存储
      classes: 存储类
      volumes: 持久卷
    projects: '项目/命名空间'
  containers:
    tab: 工作负载
    systemTab: 系统
    ingresses: 负载均衡
    containers: 工作负载
    dns: 服务发现
    hpa: HPA
    volumes: PVC
    pipelines: 流水线
    deploy: 部署服务
    addContainer: 添加容器
    addBalancer: 添加负载均衡
    addIngress: 添加规则
    addDns: 添加 DNS 记录
    addHpa: 添加 HPA
    addVolume: 添加 PVC
    importCompose: 导入 YAML
  group:
    none: 列表视图
    node: 按主机分组
    workload: 按负载量分组
    namespace: 按名称空间分组
    namespaceWorkload: '按名称空间/工作负载分组'
  hosts:
    tab: 主机
    addHost: 添加主机
  catalog:
    all: 全部
    library: 官方认证
    community: 社区贡献
  apps:
    tab: 应用商店
    apps: 应用列表
    noData: 目前没有运行应用程序
    noMatch: 没有应用程序匹配当前搜索
    launch: 启动
    manage: 管理
  infra:
    tab: 资源
    storagePage: 存储
    certificates: 证书
    configMaps: 配置映射
    registries: 镜像库凭证
    secrets: 密文
    members: 成员
    hpa: HPA
    pipelines: 流水线
  admin:
    tab: 全局
    clusters:
      tab: 集群
      rkeTemplate: RKE 集群模板
    machines: 主机
    drivers: 驱动管理
    catalogs: 商店设置
    globalDns: 全局 DNS 服务
    globalDnsEntries: 全局 DNS 服务
    globalDnsProviders: 全局 DNS 提供商
    globalRegistry: 全局镜像库
    multiClusterApps: 多集群应用
    security:
      accounts: 用户
      groupAccounts: 用户组
      cloudCredentials: 云凭证
      tab: 安全
      roles: 角色
      members: 成员
      podSecurityPolicies: Pod 安全策略
      authentication: 认证
    settings:
      tab: 系统设置
      auth: 访问控制
      registration: 主机注册
      advanced: 高级
  user:
    label: "用户菜单: {username}"
    logout: 注销
  userPreferences:
    link: "设置"
  nodeTemplates:
    link: '主机模板'
  clusterTemplates:
    link: 集群模板
  api:
    link: 'API & Keys'
  settings:
    tab: 系统设置
    advanced: 高级
  tools:
    alerts: 告警
    backups: 备份
    catalogs: 商店设置
    logging: 日志
    monitoring: 监控
    notifiers: 通知
    pipeline: 流水线
    tab: 工具
    istio: Istio
    cisScans: CIS 扫描
  project:
    none: '项目/命名空间'
    namespaces: 命名空间
  dashboard:
    try: 仪表盘


##############################
# Resource Actions
##############################
action:
  activate: 激活
  addContainer: 部署 Pod
  addSidekick: 添加 Sidecar
  backupEtcd: 备份
  backupEtcdMessage:
    success:
      title: 备份成功
      message: "已备份 { clusterId } 到 { backupType } 存储。"
  clone: 克隆
  cloneRevision: 克隆修订
  console: 打开控制台
  convertToService: 转换为服务
  cordon: 暂停
  deactivate: 停用
  downloadYaml: 下载 YAML
  download: 下载
  drain: 驱散
  edit: 升级
  editConfig: 编辑配置
  editService: 编辑服务
  editYaml: '查看/编辑 YAML'
  evacuate: 疏散
  execute: 执行命令行
  exportConfig: 导出配置
  garbageCollect: 清理
  logs: 查看日志
  makeDefault: 设置为缺省
  move: 移动
  mute: 静默
  nodeConfig: 下载 Keys
  pause: 暂停编排
  pauseAll: 全部暂停
  redeploy: 重新部署
  refreshAuthProviderAccess:
    label: 刷新组成员
    success:
      title: 刷新成功
      message: 已触发组成员更新
    allSuccess:
      title: 刷新成功
      message: 已为所有用户触发组成员更新。
  remove: 删除
  replay: 重播
  resetDefault: 恢复默认值
  restart: 重启
  restoreFromEtcdBackup: 恢复
  resume: 恢复编排
  resumeCronjob: 重新开始
  retry: 重试
  revert: 恢复默认值
  revision: 新修订的默认值
  rollback: 回滚
  rotate: 更新证书
  rerun: 重新运行
  run: 运行
  runCISScan: 运行 CIS 扫描
  saveAsTemplate: 另存为 RKE 模板
  setDefault: 设置为默认值
  setDefaultRevision:
    success:
      title: 成功
      message: '已在 {ctName} 的默认修订中设置了 {name}。'
  setting: 设置
  start: 启动
  startAll: 全部开始
  stop: 停止
  stopAll: 全部停止
  stopDrain: 停止驱散
  suspend: 暂停
  test: 测试
  uncordon: 激活
  unmute: 取消静默
  upgrade: 升级
  upgradeOrEdit: '升级/编辑'
  viewConfig: 查看配置
  viewGraph: 查看图形
  viewInApi: API 查看
  viewInGrafana: 查看 Grafana
  viewInstance: 查看实例
  viewYaml: 查看 YAML
  enableAutoInject: 启用 Istio 自动注入
  disableAutoInject: 禁用 Istio 自动注入

##############################
# Resource Actions
##############################
validation:
  required: '"{key}" 必须设置'
  requiredOrOverride: '"{key}" 是必须的或者允许覆盖'
  arrayLength:
    exactly: '"{key}" 应当包含 {count, plural,=1{#个条目 } other {#个条目 }}'
    between: '"{key}" 应当介于 {min} 和 {max} 之间 {max, plural,=1{ 个条目 } other { 个条目 }}'
    min: '"{key}" 应当至少为 {count}{count, plural,=1{ 个条目 } other { 个条目 }}'
    max: '"{key}" 应当至多为 {count}{count, plural,=1{ 个条目 } other { 个条目 }}'
  stringLength:
    exactly: '"{key}" 应当为 {count, plural,=1{#个字符 } other {#个字符 }}'
    between: '"{key}" 应当介于 {min} 和 {max} 之间 {max, plural,=1{ 个字符 } other { 个字符 }}'
    min: '"{key}" 应当至少为 {count}{count, plural,=1{ 个字符 } other { 个字符 }}'
    max: '"{key}" 应当至多为 {count}{count, plural,=1{ 个字符 } other { 个字符 }}'
  number:
    exactly: '"{key}" 应当为 {val}'
    between: '"{key}" 应当介于 {min} 和 {max} 之间'
    min: '"{key}" 应当至少为 {val}'
    max: '"{key}" 应当至多为 {val}'
  chars: '"{key}" 包含 {count, plural,=1{ 个无效字符 } other {#个无效字符 }}: {chars}'
  dns:
    doubleHyphen: 不能包含两个连续的连字符
    hostname:
      startDot: '"{key}" 不能以点开头'
      endDot: '"{key}" 不能以点结尾'
      empty: '"{key}" 至少需一个字符'
      tooLong: '"{key}" 不能超过 {max} 个字符'
      startNumber: '"{key}" 不能以数字开头'
      startHyphen: '"{key}" 必须以字母或数字开头'
      endHyphen: '"{key}" 必须以字母或数字结尾'
      emptyLabel: '"{key}" 不能有两个连续的点'
      tooLongLabel: '"{key}" 不能超过 {max} 个字符'
    label:
      startHyphen: '"{key}" 必须以字母或数字开头'
      endHyphen: '"{key}" 必须以字母或数字结尾'
      startNumber: '"{key}" 不能以数字开头'
      emptyLabel: '"{key}" 不能为空'
      tooLongLabel: '"{key}" 不能超过 {max} 字符'
  k8s:
    identifier:
      startLetter: '"{key}" 必须以字母或数字开头'
      endLetter: '"{key}" 必须以字母或数字结尾'
      emptyPrefix: '"{key}" 不能有空白的前缀'
      tooLongPrefix: '"{key}" 的前缀不能超过 {max} 个字符'
      emptyLabel: '"{key}" 不能有空格键'
      tooLongKey: '"{key}" 的长度不能超过 {max} 个字符'
  targets:
    missingProjectId: 必须选择目标项目。

##############################
# Model Properties
##############################
model:
  account:
    kind:
      registeredAgent: 已注册的代理
      agent: 代理
      service: 服务
      user: 用户
      admin: 管理员
      project: 环境
  cluster:
      name: 集群名
  identity:
    displayType:
      user: 用户
      team: 团队
      group: 用户组
      org: 组织
      localUser: 本地用户
      unknown: "{type}？"
  ingress:
    displayKind: L7 Ingress
  machine:
    role:
      worker: Worker
      etcd: etcd
      controlPlane: Control
  openldapconfig:
    server:
      label: 主机名或 IP 地址
    serviceAccountUsername:
      label: 服务账号用户名
    serviceAccountPassword:
      label: 服务账号密码
    domain:
      label: '用户搜索起点:'
      placeholder: "例如: ou=Users,dc=Mycompany,dc=com"
      help: "仅该搜索起点下的用户能够访问"
  projectMember:
    role:
      member: 成员
      owner: 所有者
      readonly: 只读
      restricted: 受限
  service:
    displayKind:
      generic: 服务
      loadBalancer: L4 层负载均衡

growl:
  dismiss: 禁止所有通知
  webSocket:
    connecting:
      title: 连接至服务器时发生错误！
      warning: 无法建立到服务器的 WebSocket 连接。如果服务器位于代理或 SSL 终端设备后面，则浏览器无法连接到 WebSocket。如果您在代理后面运行服务器，请确保代理支持 WebSockets。在解决问题之前，流量统计、日志、shell/控制台和资源状态的自动更新可能无法正常工作。
      safariCertWarning: 另一个可能的原因是 Safari 不允许使用无法识别的证书进行 WebSocket 连接，即使您继续绕过警告也是如此。服务器必须拥有由 Safari 自动信任的认可机构签署的证书。
      disconnectedWarning: "断开与服务器的连接，尝试重新连接..."

storageClass:
  aws-ebs:
    title: Amazon EBS Disk
  azure-disk:
    title: Azure Disk
  azure-file:
    title: Azure File
  local-storage:
    title: Local Storage
  cinder:
    title: Openstack Cinder Volume
  gce-pd:
    title: Google Persistent Disk
  glusterfs:
    title: Gluster Volume
  local:
    title: Local
  longhorn:
    title: Longhorn
  portworx-volume:
    title: Portworx Volume
  quobyte:
    title: Quobyte Volume
  rbd:
    title: Ceph RBD
  scaleio:
    title: ScaleIO Volume
  storageos:
    title: StorageOS
  vsphere-volume:
    title: VMWare vSphere Volume

volumeSource:
  aws-ebs:
    title: Amazon EBS Disk
  azure-disk:
    title: Azure Disk
  azure-file:
    title: Azure Filesystem
  csi:
    title: CSI
  cephfs:
    title: Ceph Filesystem
  config-map:
    title: Config Map Volume
  cinder:
    title: Openstack Cinder Volume
  secret:
    title: Secret Volume
  empty-dir:
    title: Empty Dir Volume
  fc:
    title: Fibre Channel
  flex-volume:
    title: Flex Volume
  csi-volume-longhorn:
    title: Longhorn
  flocker:
    title: Flocker
  gce-pd:
    title: Google Persistent Disk
  glusterfs:
    title: Gluster Volume
  host-path:
    title: HostPath
    path:
      label: 主机路径
      placeholder: '例如: /data'
    kind:
      label: 主机路径类型检查
      Any: "不检查目标路径"
      DirectoryOrCreate: '目录: 不存在则创建'
      FileOrCreate: '文件: 不存在则创建'
      Directory: '现有目录'
      File: '现有文件'
      Socket: '现有 socket 文件'
      CharDevice: '现有 character 设备'
      BlockDevice: '现有 block 设备'
  iscsi:
    title: iSCSI Target
  local:
    title: Local
  nfs:
    title: NFS Share
  photon:
    title: Photon Volume
  portworx:
    title: Portworx Volume
  quobyte:
    title: Quobyte Volume
  rbd:
    title: Ceph RBD
  scaleio:
    title: ScaleIO Volume
  storageos:
    title: StorageOS
  vsphere-volume:
    title: VMWare vSphere Volume
  customLogPath:
    mountPath:
      label: 日志路径
      placeholder: '例如: /var/www'
      helpText: 容器中的日志路径
    logFormat:
      label: 日志格式
      useCustomRegex: 使用自定义 Fluentd 正则表达式
      useExistingLogFormat: 使用现有的日志格式
      helpText: 您可以在</a>这里<a href="http://fluentular.herokuapp.com/" target="_blank">测试正则表达式。

yamlPage:
  errors: yaml 文件中存在错误

rkeConfigComment:
  ingress: |
    ""
    "  # 当前仅支持 nginx 的 ingress"
    "  # 设置`provider: none`禁用 ingress 控制器"
    "  # 通过 node_selector 可以指定在某些节点上运行 ingress 控制器，例如: "
    "   provider: nginx"
    "   node_selector:"
    "     app: ingress"
  network: |
    ""
    "  # 如果您在 AWS 上使用 calico"
    ""
    "   network:"
    "     plugin: calico"
    "     calico_network_provider:"
    "       cloud_provider: aws"
    ""
    "  # 指定 flannel 网络接口"
    ""
    "   network:"
    "     plugin: flannel"
    "     flannel_network_provider:"
    "     iface: eth1"
    ""
    "  # 指定 canal 网络插件的 flannel 网络接口"
    ""
    "   network:"
    "     plugin: canal"
    "     canal_network_provider:"
    "       iface: eth1"
  services: |
    ""
    " # 自定义服务参数，仅适用于 Linux 环境"
    "   services:"
    "     kube-api:"
    "       service_cluster_ip_range: 10.43.0.0/16"
    "       extra_args: "
    "         watch-cache: true   "
    "     kube-controller:"
    "       cluster_cidr: 10.42.0.0/16"
    "       service_cluster_ip_range: 10.43.0.0/16"
    "       extra_args:     "
    "         # 修改每个节点子网大小(cidr 掩码长度)，默认为 24，可用 IP 为 254 个；23，可用 IP 为 510 个；22，可用 IP 为 1022 个；"
    "         node-cidr-mask-size: 24  "
    "         # 控制器定时与节点通信以检查通信是否正常，周期默认 5s  "
    "         node-monitor-period: '5s'  "
    "         # 当节点通信失败后，再等一段时间 kubernetes 判定节点为 notready 状态。这个时间段必须是 kubelet 的 nodeStatusUpdateFrequency(默认 10s)的 N 倍，其中 N 表示允许 kubelet 同步节点状态的重试次数，默认 40s。"
    "         node-monitor-grace-period: '20s' "
    "         # 再持续通信失败一段时间后，kubernetes 判定节点为 unhealthy 状态，默认 1m0s。"
    "         node-startup-grace-period: '30s' "
    "         # 再持续失联一段时间，kubernetes 开始迁移失联节点的 Pod，默认 5m0s。"
    "         pod-eviction-timeout: '1m'   "
    "     kubelet:"
    "       cluster_domain: cluster.local"
    "       cluster_dns_server: 10.43.0.10"
    "       # 扩展变量 "
    "       extra_args:"
    "         # 与 apiserver 会话时的并发数，默认是 10 "
    "         kube-api-burst: '30'      "
    "         # 与 apiserver 会话时的 QPS,默认是 5   "
    "         kube-api-qps: '15'  "
    "         # 修改节点最大 Pod 数量"
    "         max-pods: '250' "
    "         # secrets 和 configmaps 同步到 Pod 需要的时间，默认一分钟"
    "         sync-frequency: '3s'"
    "         # kubelet 默认一次拉取一个镜像，设置为 false 可以同时拉取多个镜像，前提是存储驱动要为 overlay2，对应的 Docker 也需要增加下载并发数     "
    "         serialize-image-pulls: false  "
    "         # 拉取镜像的最大并发数，registry-burst 不能超过 registry-qps ，仅当 registry-qps 大于 0(零)时生效，(默认 10)。如果 registry-qps 为 0 则不限制(默认 5)。"
    "         registry-burst: '10' "
    "         registry-qps: '0'   "
    "         # 以下配置用于配置节点资源预留和限制  "
    "         cgroups-per-qos: 'true'   "
    "         cgroup-driver: cgroupfs   "
    "         # 以下两个参数指明为相关服务预留多少资源，仅用于调度，不做实际限制"
    "         system-reserved: 'memory=300Mi'   "
    "         kube-reserved: 'memory=2Gi'  "
    "         enforce-node-allocatable: 'pods'  "
    "         # 硬驱逐阈值，当节点上的可用资源少于这个值时，就会触发强制驱逐。强制驱逐会强制 kill 掉 POD，不会等 POD 自动退出。"
    "         eviction-hard: 'memory.available<300Mi,nodefs.available<10%,imagefs.available<15%,nodefs.inodesFree<5%'   "
    "         # 软驱逐阈值  "
    "         ## 以下四个参数配套使用，当节点上的可用资源少于这个值时但大于硬驱逐阈值时候，会等待 eviction-soft-grace-period 设置的时长；"
    "         ## 等待中每 10s 检查一次，当最后一次检查还触发了软驱逐阈值就会开始驱逐，驱逐不会直接 Kill POD，先发送停止信号给 POD，然后等待 eviction-max-pod-grace-period 设置的时长； "
    "         ## 在 eviction-max-pod-grace-period 时长之后，如果 POD 还未退出则发送强制 kill POD"
    "         eviction-soft: 'memory.available<500Mi,nodefs.available<50%,imagefs.available<50%,nodefs.inodesFree<10%'   "
    "         eviction-soft-grace-period: 'memory.available=1m30s'    "
    "         eviction-max-pod-grace-period: '30'      "
    "         ## 当处于驱逐状态的节点不可调度，当节点恢复正常状态后"
    "         eviction-pressure-transition-period: '5m0s'       "
    "       extra_binds:      "
    "         - "/usr/libexec/kubernetes/kubelet-plugins:/usr/libexec/kubernetes/kubelet-plugins"    "
    "         - "/etc/iscsi:/etc/iscsi"     "
    "         - "/sbin/iscsiadm:/sbin/iscsiadm"       "
    "     etcd:     "
    "       # 修改空间配额为$((4*1024*1024*1024))，默认 2G,最大 8G    "
    "       extra_args:"
    "         quota-backend-bytes: '4294967296'        "
    "         auto-compaction-retention: 240 #(单位小时)      "
    "     kubeproxy:    "
    "       extra_args:     "
    "       # 默认使用 iptables 进行数据转发    "
    "         proxy-mode: ""    # 如果要启用 ipvs，则此处设置为`ipvs` "
  rancher_kubernetes_engine_config: |
    ""
    "Rancher Config"
  clusterConfig: |
    ""
    "Cluster Config"

units:
  percent: '%'
  cpu: milli CPUs

windowsCluster:
  logging:
    vxlanWarning: |
      由于<a href="https://github.com/kubernetes/kubernetes/issues/79359" target="_blank">kubernetes/kubernetes#79359</a>这个问题，{appName} Logging 目前无法运行在 VxLan 模式下。我们正在与微软合作， 以修复 Kubernetes 相关的问题。
    kafka:
      brokerTypeHelpText: 使用 Broker 列表作为 Kafka 连接入口点。
    helpText: '我们将使用 fluentd 从每个容器中收集 stdout/stderr 日志，以及收集每个<b>Linux</b>主机<code >/var/log/containers/</code>路径和每个<b>Windows</b>主机<code >c:/var/log/containers/</code>路径下的日志文件，并且可以将日志发送到下面配置的目标日志收集服务。'
  istio: 在 Windows 集群中不支持 Istio。
  pipelines: 在 Windows 集群中不支持 pipelines。

pipelinesPage:
  table:
    status: 状态
    noData: 没有配置流水线
    noMatch: 没有符合当前搜索的流水线规则
  pipelines: 流水线
  lastActivity: 最后运行

pipelinesSetting:
  globalConfigChangeLabel: 使用 OAuth 应用程序去认证
  customConfigChangeLabel: 使用另一个 OAuthe 应用程序
  userGlobalConfig: GitHub 身份验证已启用，您可以使用它来直接启用 Pipline。
  gitAuthentication: Git 验证
  authenticateWithGit: 用 Git 进行身份验证
  authenticatedUsers: 已授权的用户
  sureToDisableOAuth: 您确定要取消授权吗？
  disableOAuth: 取消授权
  dataClear: 清除数据
  resetData: 重置所有与流水线相关的数据
  clearing: 清除中
  sureToClearData: 确定要清除数据吗？
  clearData: 清除数据
  error:
    limit: 保存限制和预留发生错误
  info:
    noPermission: "您没有配置流水线的权限。"

repositories:
  header: 代码库
  enable: 设置代码库
  message: 选择示例代码库或者使用您自己的代码库来设置流水线。
  table:
    repository: 代码库
    noData: 没有任何代码库
    noMatch: 没有代码库符合当前搜索

newPipeline:
  steps:
    label: 流水线配置
  save: 保存

newPipelineStage:
  errors:
    name:
      required: 请输入名称。
  header:
    create: 添加阶段
    edit: 编辑阶段
  name:
    placeholder: "例如: compile"
  addStep: 添加步骤
  trigger:
    webhook: 推送
    webhookPR: 拉取请求
    webhookTag: 标签

newPipelineStep:
  header:
    create: 添加步骤
    edit: 编辑步骤
  stepType:
    label: 步骤类型
    image: 基础镜像
    env: 环境变量
    enableBranch: 设置流水线
    publishCatalog:
      label: 发布应用模版
      secret:
        label: 密文
        missingKey: 所选的密文没有 {key} 字段.
      auth:
        http: '密文中的<code>USERNAME</code>和<code>PASSWORD</code>将被作为用户名和密码。'
        ssh: '密文中的<code>DEPLOY_KEY</code>将被作为 Deploy Key'
      stepName: 发布应用模版
      targets:
        label: 协议
        http: 通过 HTTP 协议发布到 Git
        ssh: 通过 SSH 协议发布到 Git
      path:
        label: Chart 目录
        placeholder: '例如: ./charts/wordpress/latest'
        helpText: '代码库中<code style="padding: 2px 5px;">Chart.yaml</code>所在的目录'
      catalogTemplate:
        label: 应用模版名称
        placeholder: '例如: wordpress'
        helpText: 所发布应用模版的名称。
      version:
        label: 应用模版版本
        placeholder: '例如: latest'
        helpText: 所发布应用模版的版本。
      gitUrl:
        label: Git 地址
        placeholder:
          ssh: '例如: git@github.com:myrepo/charts.git'
          http: '例如: https://github.com/myrepo/charts.git'
        helpText: 把应用模版发布到这个 Git 地址。
        error: Git 地址必须以 http 或 https 开头。
      gitBranch:
        label: Git 分支
        placeholder: '例如: dev'
        helpText: 把应用模版发布到这个 Git 分支。
      gitAuthor:
        label: 作者
        placeholder: '例如: user'
        helpText: 提交信息中所包含的作者信息。
      gitEmail:
        label: 作者邮箱
        placeholder: user@example.com
        helpText: 提交信息中所包含的作者邮箱信息。


    applyApp:
      label: 部署应用
      stepName: 部署应用
      catalog:
        label: 应用商店
      catalogTemplate:
        label: 应用模版
        helpText: 你可以选择已有应用模版或者输入新的模版。
      version:
        label: 模版版本
        helpText: 你可以选择已有版本或者输入新的版本。
      name:
        label: 应用名称
        placeholder: '例如: myapp'
      targetNamespace:
        label: 命名空间
        helpText: 部署应用的命名空间。

    applyYaml:
      label: 部署 YAML
      yaml: YAML 路径
      env:
        header: 环境变量
        addActionLabel: 添加变量
        keyPlaceholder: IMAGE_TAG
      errors:
        path:
          required: 请输入 YAML 路径。
    scm:
      noYaml: 代码库中没有发现<code>.rancher-pipeline.yml</code>文件。
      demoGroup: 示例代码库
      selectRepository: 代码库
      add: 选择代码库
      refresh: 刷新代码库
      user: 用户
      trigger: 流水线触发
      noWebhook: 没有设置代码库 Webhook 的权限
    build:
      imageName:
        placeholder: '例如: example/app:v1'
      errors:
        tag:
          required: 请输入镜像名称
        dockerfilePath:
          required: 请输入 Dockerfile 的路径。
        registry:
          required: 请选择镜像仓库。
      noRegistry: 没有配置镜像仓库。您可以点击<a href="{route}" target="_blank" rel="nofollow noreferrer">这里</a>配置镜像仓库。
      pushRemote: 推送镜像到远端镜像仓库。
      label: 构建并发布镜像
      dockerFilePath: Dockerfile 路径
      buildContext: 构建上下文
    task:
      label: 运行脚本
      shellScript: 脚本
      customEntryPoint: 自定义 EntryPoint
      secret: 从密文中注入环境变量
      errors:
        image:
          required: 请输入基础镜像。
        shellScript:
          required: 请输入要运行的脚本。
      privileged:
        label: 以特权模式运行该步骤。
      shell:
        label: 脚本
      command:
        label: 命令
        placeholder: EntryPoint 的参数
      entryPoint:
        label: EntryPoint
        placeholder: 该项留空将使用默认的 EntryPoint

pipelineDetailPage:
  header: '构建项目: {name}'
  repository: '代码库:'
  lastRun: 最后运行
  triggered: '触发时间'
  commitMessage: 提交信息
  activity:
    title: 构建记录
    detail: 流水线的历史构建记录
    table:
      noData: 没有任何运行任务。
      noMatch: 没有运行任务符合当前搜索。
      status: 状态
      branch: '分支:'
      runNumber: 运行编号
      commit: 提交信息
      triggered: 触发时间

runPipeline:
  title: '运行 {name}'
  noBranch: '该代码库没有发现<code>.rancher-pipeline.yml</code>文件。您可以点击<b>编辑配置</b>通过向导的方式配置流水线，也可以点击<b>查看/编辑 YAML</b>直接修改配置。'
  branch:
    label: '分支'

pipelineSetting:
  title: '流水线设置: "{name}"'

buildDetailPage:
  header: '流水线运行: #{name}'
  duration: 构建时间
  stillRunning: 仍在运行
  log:
    title: 详细日志
    detail: 当前流水线运行的详细日志。
    waiting: 请等待...
    loading: 加载中...


enablePipeline:
  header: 启用代码库认证
  configNow: 立即设置
  helpText:
    代码库认证尚未开启,需要先开启代码库认证。
  noPermission:
    代码库认证尚未开启,需要联系项目管理员设置认证。

editYamlPipeline:
  title: '查看/编辑 YAML{name}'
  branch:
    label: '分支'

editPipelineConfig:
  header: 修改流水线配置
  pushToReop: 将如下的流水线配置自动推送到远端代码库。
  download: 仅下载流水线配置。
  timeout:
    label: 超时时间
    helpText: 如果构建在该时间内没有执行完成，则终止本次构建。
pipelineSelector:
  header: 触发规则
  table:
    type: 类型
    value: 值
  title:
    include: '当满足条件时运行该 {type}'
    exclude: '当满足条件时不运行该 {type}'
  addRule: 添加规则
  branch: 分支
  event: 事件
  pr: 拉取请求
  push: 推送
  tag: Tag

fromSecret:
  addFrom: 从密文中添加
  secret:
    label: 密文
  prefixOrKey:
    label: 键
  prefix:
    label: 别名
  keyLabel: 变量
  keyPlaceholder: '例如: Foo'
  valueLabel: 值
  valuePlaceholder: '例如: bar'

pipelineNotification:
  header: 通知
  when: 当构建状态为
  condition:
    success:
      label: 成功
    changed:
      label: 改变
    failed:
      label: 失败
    required: 构建状态必选
  recipients:
    required: 接受者必填
  asMessage: 发送信息到

selectValueCheck:
  message: |
    {values, plural,
      =1 { 请选择新的值。以下内容不再有效:}
      other { 请选择新的值。以下内容不再有效:}
    }
