languageName: "简体中文"
languageContribute: "帮助翻译Rancher"


##############################
# Really generic things used in multiple places (use sparingly)
##############################
generic:
  authorize: 认证 & 同步代码库
  branch: 分支
  commit: 构建提交
  repository: 代码库
  registry: 镜像库
  image: 镜像
  imageName: 镜像名称
  loginIn: 登入
  logout: 退出用户{user}
  pipeline: 项目
  is: 是
  push: 提交到代码库
  noBranch: 该代码库中没有任何分支。
  github: GitHub
  gitlab: GitLab
  bitbucket: Bitbucket
  required: '{key}为必填项。'
##############################
# Resource Actions
##############################
action:
  rerun: 重新运行
  run: 运行

pipelinesPage:
  table:
    status: 状态
    noData: 没有任何流水线
    noMatch: 没有流水线符合当前搜索
  pipelines: 流水线
  lastActivity: 最后运行

pipelinesSetting:
  globalConfigChangeLabel: 使用OAuth应用程序去认证
  customConfigChangeLabel: 使用另一个OAuthe应用程序
  userGlobalConfig: GitHub身份验证已启用，您可以使用它来直接启用Pipline。
  gitAuthentication: Git验证
  authenticateWithGit: 用Git进行身份验证
  authenticatedUsers: 已授权的用户
  sureToDisableOAuth: 您确定要取消授权吗？
  disableOAuth: 取消授权
  dataClear: 清除数据
  resetData: 重置所有与流水线相关的数据
  clearing: 清除中
  sureToClearData: 确定要清除数据吗？
  clearData: 清除数据
  error:
    limit: 保存限制和预留发生错误

repositories:
  header: 代码库
  enable: 设置代码库
  message: 选择示例代码库或者使用您自己的代码库来设置流水线。
  table:
    repository: 代码库
    noData: 没有任何代码库
    noMatch: 没有代码库符合当前搜索

newPipeline:
  steps:
    label: 流水线配置
  save: 保存

newPipelineStage:
  errors:
    name:
      required: 请输入名称。
  header:
    create: 添加阶段
    edit: 编辑阶段
  name:
    placeholder: "例如: compile"
  addStep: 添加步骤
  trigger:
    webhook: 推送
    webhookPR: 拉取请求
    webhookTag: Tag

newPipelineStep:
  header:
    create: 添加步骤
    edit: 编辑步骤
  stepType:
    label: 步骤类型
    image: 基础镜像
    env: 环境变量
    enableBranch: 设置流水线
    publishCatalog:
      label: 发布应用模版
      secret:
        label: 密文
        missingKey: 所选的密文没有{key}字段.
      auth:
        http: '密文中的<code>USERNAME</code>和<code>PASSWORD</code>将被作为用户名和密码。'
        ssh: '密文中的<code>DEPLOY_KEY</code>将被作为Deploy Key'
      stepName: 发布应用模版
      targets:
        label: 协议
        http: 通过HTTP协议发布到Git
        ssh: 通过SSH协议发布到Git
      path:
        label: Chart目录
        placeholder: 例如：./charts/wordpress/latest
        helpText: '代码库中<code style="padding: 2px 5px;">Chart.yaml</code>所在的目录'
      catalogTemplate:
        label: 应用模版名称
        placeholder: 例如：wordpress
        helpText: 所发布应用模版的名称。
      version:
        label: 应用模版版本
        placeholder: 例如：latest
        helpText: 所发布应用模版的版本。
      gitUrl:
        label: Git地址
        placeholder:
          ssh: 例如：git@github.com:myrepo/charts.git
          http: 例如：https://github.com/myrepo/charts.git
        helpText: 把应用模版发布到这个Git地址。
        error: Git地址必须以http或https开头。
      gitBranch:
        label: Git分支
        placeholder: 例如：dev
        helpText: 把应用模版发布到这个Git分支。
      gitAuthor:
        label: 作者
        placeholder: 例如：user
        helpText: 提交信息中所包含的作者信息。
      gitEmail:
        label: 作者邮箱
        placeholder: user@example.com
        helpText: 提交信息中所包含的作者邮箱信息。


    applyApp:
      label: 部署应用
      stepName: 部署应用
      catalog:
        label: 应用商店
      catalogTemplate:
        label: 应用模版
        helpText: 你可以选择已有应用模版或者输入新的模版。
      version:
        label: 模版版本
        helpText: 你可以选择已有版本或者输入新的版本。
      name:
        label: 应用名称
        placeholder: 例如：myapp
      targetNamespace:
        label: 命名空间
        helpText: 部署应用的命名空间。

    applyYaml:
      label: 部署YAML
      yaml: YAML路径
      env:
        header: 环境变量
        addActionLabel: 添加变量
        keyPlaceholder: IMAGE_TAG
      errors:
        path:
          required: 请输入YAML路径。
    scm:
      noYaml: 代码库中没有发现<code>.rancher-pipeline.yml</code>文件。
      demoGroup: 示例代码库
      selectRepository: 代码库
      add: 选择代码库
      refresh: 刷新代码库
      user: 用户
      trigger: 流水线触发
      noWebhook: 没有设置代码库Webhook的权限
    build:
      imageName:
        placeholder: '例如: example/app:v1'
      errors:
        tag:
          required: 请输入镜像名称
        dockerfilePath:
          required: 请输入Dockerfile的路径。
        registry:
          required: 请选择镜像仓库。
      noRegistry: 没有配置镜像仓库。您可以点击<a href="{route}" target="_blank" rel="nofollow noreferrer">这里</a>配置镜像仓库。
      pushRemote: 推送镜像到远端镜像仓库。
      label: 构建并发布镜像
      dockerFilePath: Dockerfile路径
      buildContext: 构建上下文
    task:
      label: 运行脚本
      shellScript: 脚本
      customEntryPoint: 自定义EntryPoint
      secret: 从密文中注入环境变量
      errors:
        image:
          required: 请输入基础镜像。
        shellScript:
          required: 请输入要运行的脚本。
      privileged:
        label: 以特权模式运行该步骤。
      shell:
        label: 脚本
      command:
        label: 命令
        placeholder: EntryPoint的参数
      entryPoint:
        label: EntryPoint
        placeholder: 该项留空将使用默认的EntryPoint

authPage:
  setting:
    executor:
      label: 最大流水线运行个数
      scale: 数量
    cacerts:
      label: 配置证书，支持从自签名的Git服务中拉取代码
      show: 修改证书
      saveActionLabel: 保存证书
    limit:
      label: 为执行程序配置资源限制和预留
      saveActionLabel: 更新限制和预留
  header: 流水线设置
  setup: "1. 配置{type}应用"
  authenticated:
    header:
      text: 代码库认证信息
      enterpriseHostName: "地址:"
      clientId:
        text: "客户端ID:"
      key:
        text: "Key:"
  testAuth:
    header: '3. 测试并启用验证'
    subtext: '通过测试认证来检查配置是否正确:'
    buttonText:
      preVariable: 授权
      post: 授权中
  form:
    headerVariable: '2. 完成配置，并使用您的{SCM}账号进行验证'
    isEnterprise:
      labelText: 使用https连接
    enterprise:
      labelText: '使用私有{type}企业版部署'
    enterpriseHost:
      labelText: 地址
      placeholder: '例如: example.com'
  gitlab:
    auth: '标准GitLab: <a href="https://gitlab.com/profile/applications" target="_blank" rel="nofollow noreferrer">点击此处</a>，在弹出的新窗口中进行应用设置。'
    enterpriseAuth: "企业版GitLab: 请登录您的GitLab账号，点击Settings，然后点击Applications进行设置。"
    ul:
      li2:
        text: '填写表单内容:'
        ul:
          li1: '<b>名称: </b><span class="text-muted">应用名称，例如: My Pipeline。</span>'
          li2: '回调URL:'
      li3:
        text: '点击Save application'
    form:
      subtextVariable: '将新创建应用的Application Id和Secret复制粘贴到对应的输入框中。'
      clientId:
        labelText: 应用ID
      clientSecret:
        labelText: 秘钥
  github:
    auth: '标准GitHub: <a href="https://github.com/settings/developers" target="_blank" rel="nofollow noreferrer">点击此处</a>，在弹出的新窗口中进行应用设置。'
    enterpriseAuth: "企业版GitHub: 请登录您的GitHub账号，点击Settings，然后点击Applications进行设置。"
    ul:
      li2:
        text: '点击"Register new application"并填写表单内容:'
        ul:
          li1: '<b>应用名称: </b><span class="text-muted">应用名称，例如: My Pipeline。</span>'
          li2: '主页URL:'
          li3: '<b>应用描述: </b><span class="text-muted">应用描述，可选。</span>'
          li4: '授权回调URL:'
      li3:
        text: '点击Register Application'
    form:
      subtextVariable: '将新创建应用的Client ID和Client Secret复制粘贴到对应的输入框中。'
      clientId:
        labelText: 客户端ID
      clientSecret:
        labelText: 客户端秘钥
  bitbucketcloud:
    target:
      header: '1. 选择你要使用的Bitbucket类型'
      bitbucketserver: '使用私有Bitbucket Server'
      bitbucketcloud: '使用Bitbucket Cloud'
    setup: '2. 配置Bitbucket Cloud应用'
    auth: '使用Bitbucket Cloud时，<a href="https://bitbucket.org/account" target="_blank" rel="nofollow noreferrer">点击此处</a>，在弹出的新窗口中进行应用设置。'
    ul:
      li2:
        text: '点击"OAuth"，然后点击"Add consumer"，并填写表单内容：'
        ul:
          li1: '<b>Name:</b> <span class="text-muted">任意名称，例如 My Pipeline</span>'
          li2: Callback URL
          li3: '<b>选择权限</b> <b>Account Read</b>, <b>Pull Requests Write</b>, <b>Projects Read</b> and <b>Webhooks Read And Write</b>'
      li3:
        text: '点击 "Save" '
    form:
      headerVariable: '3. 完成配置，并使用您的Bitbucket Cloud账号进行验证'
      subtextVariable: '复制并粘贴新创建的consumer的Key和Secret'
      clientId:
        labelText: Key
      clientSecret:
        labelText: Secret
  bitbucketserver:
    warning: Bitbucket Server Webhook需要SSL验证，请确保{appName}服务器的证书在Bitbucket Server中是可信的。点击<a href="https://rancher.com/docs/rancher/v2.x/en/tools/pipelines/configurations/#1-configuring-version-control-providers" target="_blank" rel="nofollow noopener noreferrer">这里</a>获取更多信息。
    copy: 点击复制
    target:
      header: '1. 选择你要使用的Bitbucket类型'
      bitbucketserver: '使用私有Bitbucket Server'
      bitbucketcloud: '使用Bitbucket Cloud'
    setup: '2. 配置Bitbucket Server应用'
    auth: '使用Bitbucket Server时，登陆你的账户。点击Administration，然后点击Application Links。'
    ul:
      li2:
        text: '创建新的应用链接:'
        ul:
          li1: '<b>Link:</b>'
          li2: '<b>Application Name:</b> <span class="text-muted">任意名称，例如: My Pipeline</span>'
          li3: '<b>勾选Create incoming link</b>'
          li4: '<b>点击 "Continue"</b>'
          li5: 'Consumer Key:'
          li6: '<b>Consumer Name:</b> <span class="text-muted">任意名称, 例如: pipeline</span>'
          li7: 'Public Key:'
          li8: '<b>点击 "Continue"</b>'
    form:
      headerVariable: '3. 完成配置，并使用您的Bitbucket Server账号进行验证'
      hostname:
        labelText: Bitbucket Server主机
        placeholder: 例如 example.com
        required: 请输入Bitbucket Server主机。
      tls:
        labelText: 使用https连接
pipelineDetailPage:
  header: '构建项目: {name}'
  repository: '代码库:'
  lastRun: 最后运行
  triggered: '触发时间'
  commitMessage: 提交信息
  activity:
    title: 构建记录
    detail: 流水线的历史构建记录
    table:
      noData: 没有任何运行任务。
      noMatch: 没有运行任务符合当前搜索。
      status: 状态
      branch: '分支:'
      runNumber: 运行编号
      commit: 提交信息
      triggered: 触发时间

runPipeline:
  title: '运行{name}'
  noBranch: '该代码库没有发现<code>.rancher-pipeline.yml</code>文件。您可以点击<b>编辑配置</b>通过向导的方式配置流水线，也可以点击<b>查看/编辑YAML</b>直接修改配置。'
  branch:
    label: '分支'

pipelineSetting:
  title: '流水线设置"{name}"'

buildDetailPage:
  header: '流水线运行: #{name}'
  duration: 构建时间
  stillRunning: 仍在运行
  log:
    title: 详细日志
    detail: 当前流水线运行的详细日志。
    waiting: 请等待...
    loading: 加载中...


enablePipeline:
  header: 启用代码库认证
  configNow: 立即设置
  helpText:
    代码库认证尚未开启,需要先开启代码库认证。
  noPermission:
    代码库认证尚未开启,需要联系项目管理员设置认证。

editYamlPipeline:
  title: '查看/编辑YAML{name}'
  branch:
    label: '分支'

editPipelineConfig:
  header: 修改流水线配置
  pushToReop: 将如下的流水线配置自动推送到远端代码库。
  download: 仅下载流水线配置。
  timeout:
    label: 超时时间
    helpText: 如果构建在该时间内没有执行完成，则终止本次构建。
pipelineSelector:
  header: 触发规则
  table:
    type: 类型
    value: 值
  title:
    include: '当满足条件时运行该{type}'
    exclude: '当满足条件时不运行该{type}'
  addRule: 添加规则
  branch: 分支
  event: 事件
  pr: 拉取请求
  push: 推送
  tag: Tag

fromSecret:
  addFrom: 从密文中添加
  secret:
    label: 密文
  prefixOrKey:
    label: 键
  prefix:
    label: 别名
  keyLabel: 变量
  keyPlaceholder: '例如: Foo'
  valueLabel: 值
  valuePlaceholder: '例如: bar'

pipelineNotification:
  header: 通知
  when: 当编译状态为
  condition:
    success:
      label: 成功
    changed:
      label: 改变
    failed:
      label: 失败
    required: 编译状态必选
  recipients:
    required: 接受者必填
  asMessage: 发送信息到
