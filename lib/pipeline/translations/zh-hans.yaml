---
languageName: "简体中文"
languageContribute: "帮助翻译Rancher"


##############################
# Really generic things used in multiple places (use sparingly)
##############################
generic:
  authorize: 认证 & 同步你自己的代码库
  branch: 分支
  commit: 提交
  repository: 代码库
  registry: 镜像库
  image: 镜像
  imageName: 镜像名称
  loginIn: 登入
  logout: 退出用户 {user}
  pipeline: 流水线
  is: 是
  push: 提交到代码库
##############################
# Resource Actions
##############################
action:
  rerun: 重新运行
  run: 运行

pipelinesPage:
  table:
    status: 状态
    noData: 没有任何流水线
    noMatch: 没有流水线符合当前搜索
  pipelines: 流水线
  lastActivity: 最新运行

pipelinesSetting:
  globalConfigChangeLabel: 使用OAuth应用程序去认证
  customConfigChangeLabel: 使用另一个OAuthe应用程序
  userGlobalConfig: GitHub身份验证已启用，您可以使用它来直接启用Pipline
  gitAuthentication: Git验证
  authenticateWithGit: 用Git进行身份验证
  authenticatedUsers: 已授权的用户
  sureToDisableOAuth: 您确定要取消授权吗？
  disableOAuth: 取消授权
  dataClear: 清除数据
  resetData: 重置所有与流水线相关的数据
  clearing: 清除中
  sureToClearData: 你确定要清除数据吗？
  clearData: 清除数据

repositories: 
  header: 代码库
  enable: 设置代码库
  message: 你可以选择一个示例代码库或者使用你自己的代码库来设置流水线。
  table:
    repository: 代码库
    noData: 没有任何代码库
    noMatch: 没有代码库符合当前搜索

newPipeline:
  steps:
    label: 流水线配置
  save: 保存

newPipelineStage:
  errors:
    name:
      required: 请输入名称。
  header:
    create: 添加阶段
    edit: 编辑阶段
  name:
    placeholder: "例如: compile"
  addStep: 添加步骤
  trigger:
    webhook: Push
    webhookPR: Pull Request
    webhookTag: Tag

newPipelineStep:
  header:
    create: 添加步骤
    edit: 编辑步骤
  stepType:
    label: 步骤类型
    image: 基础镜像
    env: 环境变量
    enableBranch: 设置流水线。
    applyYaml:
      label: 部署YAML
      yaml: YAML路径
      env: 
        header: 环境变量
        addActionLabel: 添加变量
        keyPlaceholder: IMAGE_TAG
      errors:
        path:
          required: 请输入YAML路径。
    scm:
      noYaml: 代码库中没有<code>.rancher-pipeline.yml</code>文件。
      demoGroup: 示例代码库
      selectRepository: 代码库
      add: 选择代码库
      refresh: 刷新代码库
      user: 用户
      trigger: 流水线触发
      noWebhook: 没有设置代码库Webhook的权限
    build:
      imageName:
        placeholder: "例如：example/app:v1"
      errors:
        tag:
          required: 请输入镜像名称。
        dockerfilePath:
          required: 请输入Dockerfile的路径。
        registry:
          required: 请选择镜像仓库。
      noRegistry: 没有配置镜像仓库。你可以点击<a href="{route}" target="_blank">这里</a>配置镜像仓库。
      pushRemote: 推送镜像到远端镜像仓库。
      label: 构建并发布镜像
      dockerFilePath: Dockerfile路径
    task:
      label: 运行脚本
      shellScript: 脚本
      customEntryPoint: 自定义EntryPoint
      secret: 从密文中注入环境变量
      errors:
        image:
          required: 请输入基础镜像。
        shellScript:
          required: 请输入要运行的脚本。
      privileged:
        label: 以特权模式运行该步骤。
      shell: 
        label: 脚本
      command:
        label: 命令
        placeholder: EntryPoint的参数
      entryPoint:
        label: EntryPoint
        placeholder: 该项留空将使用默认的EntryPoint

authPage:
  setting:
    executor: 
      label: 最大流水线运行个数
      scale: 数量
  header: 流水线设置
  setup: "1. 配置{type}应用"
  authenticated:
    header:
      text: 代码库认证信息
      enterpriseHostName: "地址:"
      clientId:
        text: "客户端ID:"
  testAuth:
    header: '3. 测试并启用验证'
    subtext: '通过测试认证来检查你的应用程序是否配置正确:'
    buttonText:
      preVariable: 授权
      post: 保存中
  form:
    headerVariable: '2. 配置流水线使用你的{SCM}验证'
    isEnterprise:
      labelText: 使用https连接
    enterprise:
      labelText: 使用私有{type}企业版部署
    enterpriseHost:
      labelText: 地址
      placeholder: '例如 example.com'
  gitlab:
    auth: '标准GitLab，<a href="https://gitlab.com/profile/applications" target="_blank">点击此处</a>在弹出的新窗口中进行应用设置。'
    enterpriseAuth: "企业版GitLab，请登录你的账号，点击Settings，然后点击Applications进行设置"
    ul:
      li2:
        text: '填写表单内容:'
        ul:
          li1: '<b>名称：</b> <span class="text-muted">应用名称，例如：My Pipeline</span>'
          li2: 回调URL：
      li3:
        text: '点击"Save application"'
    form:
      subtextVariable: '将新创建应用的应用ID和秘钥复制粘贴到对应的输入框中'
      clientId:
        labelText: 应用ID
      clientSecret:
        labelText: 秘钥

  github:
    auth: '标准GitHub，<a href="https://github.com/settings/developers" target="_blank">点击此处</a>在弹出的新窗口中进行应用设置。'
    enterpriseAuth: "企业版GitHub，请登录你的账号，点击Settings，然后点击Applications进行设置"
    ul:
      li2:
        text: '点击"Register new application"并填写表单内容:'
        ul:
          li1: '<b>应用名称：</b> <span class="text-muted">应用名称，例如：My Pipeline</span>'
          li2: 主页URL：
          li3: '<b>应用描述：</b> <span class="text-muted">应用描述，可选</span>'
          li4: 授权回调URL：
      li3:
        text: '点击"Register Application"'
    form:
      subtextVariable: '将新创建应用的Client ID和Secret复制粘贴到对应的输入框中'
      clientId:
        labelText: 客户端ID
      clientSecret:
        labelText: 客户端秘钥

pipelineDetailPage:
  header: '流水线: {name}'
  repositry: 代码库
  lastRun: 最新运行
  triggered: 触发时间
  commitMessage: 提交信息
  activity:
    title: 运行
    detail: 流水线的历史运行列表
    table:
      noData: 没有任何运行。
      noMatch: 没有运行符合当前搜索。
      status: 状态
      branch: 分支
      runNumber: 运行
      commit: 提交信息
      triggered: 触发时间

runPipeline:
  title: '运行 "{name}"'
  noBranch: 该代码库没有任何<code>.rancher-pipeline.yml</code>文件。你可以点击<b>编辑配置</b>来通过向导的方式配置流水线，也可以点击<b>查看/编辑YAML</b>直接修改配置。
  branch: 
    label: '分支'

pipelineSetting:
  title: '流水线设置 "{name}"'

buildDetailPage:
  header: '流水线运行: #{name}'
  duration: 运行时间
  stillRunning: 仍在运行
  log:
    title: 详细日志
    detail: 当前流水线运行的详细日志。


enablePipeline:
  header: 启用代码库认证
  configNow: 马上设置
  helpText:
    代码库认证尚未开启。你需要先开启代码库认证。
  noPermission:
    代码库认证尚未开启。你需要联系项目管理员设置认证。

editYamlPipeline:
  title: '查看/编辑 YAML "{name}"'
  branch: 
    label: '分支'

editPipelineConfig:
  header: 修改流水线配置
  pushToReop: 将如下的流水线配置自动推送到远端代码库。
  download: 仅下载流水线配置。
  timeout:
    label: 超时时间
    helpText: 如果Build在该时间内没有执行完成，则终止本次Build。
pipelineSelector:
  header: 触发规则
  table:
    type: 类型
    value: 值
  title: 
    include: '运行该{type}当:'
    exclude: '不运行该{type}当:'
  addRule: 添加规则
  branch: 分支
  event: 事件
  pr: Pull Request
  push: Push
  tag: Tag

fromSecret:
  addFrom: 从密文中添加
  secret:
    label: 密文
  prefixOrKey:
    label: 键
  prefix:
    label: 别名
  keyLabel: 变量
  keyPlaceholder: 例如： FOO
  valueLabel: 值
  valuePlaceholder: 例如： bar
